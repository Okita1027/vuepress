import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as t}from"./app-NwmlIrjp.js";const e={},p=t(`<h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解"><span>常用注解</span></a></h2><h3 id="max、-min" tabindex="-1"><a class="header-anchor" href="#max、-min"><span>@Max、@Min</span></a></h3><p><code>@Min</code> 是 Spring Boot 中的一个注解，用于指定某个数值类型的属性的最小值。它通常与 <code>@Max</code> 配合使用，表示一个数值类型的属性的最小值和最大值。<br> 例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;ID must be greater than or equal to 1&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>@Min(value = 1, message = &quot;ID must be greater than or equal to 1&quot;)</code> 表示 <code>getUser()</code> 方法的参数 <code>id</code> 必须大于或等于 1，否则会抛出异常并显示错误信息 &quot;ID must be greater than or equal to 1&quot;。</p><h2 id="常见配置文件属性" tabindex="-1"><a class="header-anchor" href="#常见配置文件属性"><span>常见配置文件属性</span></a></h2><h3 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源"><span>静态资源</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
   <span class="token comment">## 指定资源路径为/res/**</span>
   <span class="token comment">## /res表示加一层目录，</span>
   <span class="token comment">## 方便以后拦截器设置拦截不到两层的资源路径</span>
   <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span>
 <span class="token key atrule">web</span><span class="token punctuation">:</span>
   <span class="token key atrule">resources</span><span class="token punctuation">:</span>
     <span class="token key atrule">static-locations</span><span class="token punctuation">:</span>
       <span class="token comment">## 改完若访问不了:Maven-&gt;clean</span>
       <span class="token punctuation">[</span>
           <span class="token comment">## 自定义一个类路径</span>
           classpath<span class="token punctuation">:</span>/myDefine/<span class="token punctuation">,</span>
           <span class="token comment">## 这三个目录在不更改资源的路径的情况下默认可以访问到资源</span>
           <span class="token comment">## 在上面资源路径加上了一层/res后需要手动标记之后才能够访问到</span>
           <span class="token comment">## 而META-INF下不需要标记也能够访问得到</span>
           classpath<span class="token punctuation">:</span>/public<span class="token punctuation">,</span>
           classpath<span class="token punctuation">:</span>/resources<span class="token punctuation">,</span>
           classpath<span class="token punctuation">:</span>/static	
					 <span class="token comment">## 设置浏览器标签页左上角的小图标：将图标命名为favicon.ico放入该目录下即可</span>
       <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
	<span class="token comment">## 自定义SpringBoot启动时的banner</span>
  <span class="token key atrule">banner</span><span class="token punctuation">:</span>
    <span class="token key atrule">location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>banner.txt
  <span class="token comment">## 将banner关闭</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">banner-mode</span><span class="token punctuation">:</span> off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
	<span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
<span class="token comment">##      add-mappings: false ## 禁用所有静态资源</span>
      <span class="token key atrule">cache</span><span class="token punctuation">:</span>
        <span class="token key atrule">cachecontrol</span><span class="token punctuation">:</span>
          <span class="token key atrule">max-age</span><span class="token punctuation">:</span> 60s  <span class="token comment">## 设置静态资源在浏览器上的缓存时间（单位：s）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 给服务器资源加上前置路径 /world 例如：localhost:8080/world/xxx</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
 <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
   <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**请求与静态资源路径一致时，优先处理请求。</p><h3 id="矩阵注解" tabindex="-1"><a class="header-anchor" href="#矩阵注解"><span>矩阵注解</span></a></h3><p>请求的地址附带的参数以’分号‘开始<br> 例如：/matrixVariable;username=root;password=root<br> 这里处理请求的路径只有/user</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MatrixController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{path}&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//矩阵变量注解:见WebConfig</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">matrixParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
                                           <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>
                                           <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot默认不开启矩阵功能，需手动配置。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//SpringBoot默认不开启矩阵功能</span>
            <span class="token comment">//设置不移除分号后面的内容</span>
            urlPathHelper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取配置文件中的值" tabindex="-1"><a class="header-anchor" href="#获取配置文件中的值"><span>获取配置文件中的值</span></a></h2><h3 id="直接使用yaml中的值" tabindex="-1"><a class="header-anchor" href="#直接使用yaml中的值"><span>直接使用yaml中的值</span></a></h3><h4 id="读取单一数据" tabindex="-1"><a class="header-anchor" href="#读取单一数据"><span>读取单一数据</span></a></h4><p>yaml中保存的单个数据，可以使用Spring中的注解@Value读取单个数据，属性名引用方式：<strong>\${一级属性名.二级属性名……}</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">data</span><span class="token punctuation">:</span> java

<span class="token key atrule">user</span><span class="token punctuation">:</span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> root
  <span class="token key atrule">password</span><span class="token punctuation">:</span> root
  
<span class="token key atrule">love</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">pcGame</span><span class="token punctuation">:</span> SC<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token key atrule">mbGame</span><span class="token punctuation">:</span> FGO<span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token key atrule">baseDir</span><span class="token punctuation">:</span> C<span class="token punctuation">:</span>\\windows

<span class="token comment">## 使用\${}引用已定义的数据</span>
<span class="token key atrule">tempDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>\\temp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${data}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.username}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${love[0].pcGame}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> pcGame<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${tempDir}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> tempDir<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171745578.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="读取全部数据" tabindex="-1"><a class="header-anchor" href="#读取全部数据"><span>读取全部数据</span></a></h4><p>SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//将整个YAML文件中的内容配置到这个变量中</span>
<span class="token comment">//使用方法：environment.getProperty(string)</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171745875.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="将数据配置到实体类中使用" tabindex="-1"><a class="header-anchor" href="#将数据配置到实体类中使用"><span>将数据配置到实体类中使用</span></a></h3><h4 id="自定义的bean" tabindex="-1"><a class="header-anchor" href="#自定义的bean"><span>自定义的Bean</span></a></h4><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">info</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> qzy
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">//yaml文件中的数据前缀为info</span>
<span class="token comment">//之后定义对象Info后使用自动注入即可</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<br> Info是一个POJO类，本不应该使用@Configuration标记，正常情况下，需要在主程序/配置类使用<code>@EnableConfigurationProperties(XXX.class)</code>来开启@ConfigurationProperties的功能。</p><h4 id="第三方的bean" tabindex="-1"><a class="header-anchor" href="#第三方的bean"><span>第三方的Bean</span></a></h4><p><strong>步骤①</strong>：使用@Bean注解定义第三方bean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤②</strong>：在yaml中定义要绑定的属性，注意datasource此时全小写</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">datasource</span><span class="token punctuation">:</span>
  <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤③</strong>：使用@ConfigurationProperties注解为第三方bean进行属性绑定，注意前缀是全小写的datasource</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@ConfigurationProperties注解不仅能添加到类上，还可以添加到方法上，添加到类上是为spring容器管理的当前类的对象绑定属性，添加到方法上是为spring容器管理的当前方法的返回值对象绑定属性，本质上一样<br><strong>由于@ConfigurationProperties注解可以写在方法/类上，导致注解找起来比较麻烦，故提供了@EnableConfigurationProperties,使用方法如下：</strong><br><strong>步骤①</strong>：在配置类上开启@EnableConfigurationProperties注解，并标注要使用@ConfigurationProperties注解绑定属性的类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootConfigurationApplication</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤②</strong>：在对应的类上直接使用@ConfigurationProperties进行属性绑定</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当使用@EnableConfigurationProperties注解时，Spring会默认将其标注的类定义为bean，因此无需在ServerConfig中再次声明@Component注解了</strong></p><h3 id="测试用例随机数据设定" tabindex="-1"><a class="header-anchor" href="#测试用例随机数据设定"><span>测试用例随机数据设定</span></a></h3><p>对于测试用例的数据固定书写肯定是不合理的，springboot提供了在配置中使用随机值的机制，确保每次运行程序加载的数据都是随机的。具体如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">testcase</span><span class="token punctuation">:</span>
  <span class="token key atrule">book</span><span class="token punctuation">:</span>
    <span class="token key atrule">id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>
    <span class="token key atrule">id2</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int(10)<span class="token punctuation">}</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int(5<span class="token punctuation">,</span>10)<span class="token punctuation">}</span>	<span class="token comment">## ()没有强制规定，可以写其它字符例如：[]/{}/!!/@@</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>		<span class="token comment">## 随机字符串,MD5字符串，32位</span>
    <span class="token key atrule">uuid</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span>
    <span class="token key atrule">publishTime</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.long<span class="token punctuation">}</span> <span class="token comment">## 随机整数（Long范围）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前配置就可以在每次运行程序时创建一组随机数据，避免每次运行时数据都是固定值的尴尬现象发生，有助于测试功能的进行。数据的加载按照之前加载数据的形式，使用@ConfigurationProperties注解即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;testcase.book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookCase</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id2<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> publishTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong><br> 使用随机数据可以替换测试用例中书写的固定数据，提高测试用例中的测试数据有效性</p><h2 id="属性配置" tabindex="-1"><a class="header-anchor" href="#属性配置"><span>属性配置</span></a></h2><h3 id="条件装配" tabindex="-1"><a class="header-anchor" href="#条件装配"><span>条件装配</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//组件名：TomCat</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;TomCat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;TomCat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//条件装配,若有名为TomCat的组件，则装配getUser这个组件</span>
    <span class="token comment">//注意TomCat要放在这个上面，否则会报错</span>
    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;TomCat&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//更多条件bean注解直接Conditional看补全,括号内的参数可查看注解源码</span>
    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bean</span>	<span class="token comment">//默认组件名：getUser</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//得到的是容器中的对象</span>
        user<span class="token punctuation">.</span><span class="token function">setCat</span><span class="token punctuation">(</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="宽松绑定" tabindex="-1"><a class="header-anchor" href="#宽松绑定"><span>宽松绑定</span></a></h3><p>宽松绑定实际上是springboot进行编程时人性化设计的一种体现，即配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。<br> 兼容到什么程度呢？几乎主流的命名格式都支持，例如：</p><ul><li>在ServerConfig中的ipAddress属性名</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以与下面的配置属性名规则全兼容</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token key atrule">ipAddress</span><span class="token punctuation">:</span> 192.168.0.2       <span class="token comment">## 驼峰模式</span>
  <span class="token key atrule">ip_address</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment">## 下划线模式</span>
  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment">## 烤肉串模式</span>
  <span class="token key atrule">IP_ADDRESS</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment">## 常量模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上4种模式最终都可以匹配到ipAddress这个属性名。<br> 原因就是在进行匹配时，配置中的名称要去掉中划线和下划线后，忽略大小写的情况下去与java代码中的属性名进行忽略大小写的等值匹配<br> 以上4种命名去掉下划线中划线忽略大小写后都是一个词ipaddress，java代码中的属性名忽略大小写后也是ipaddress，这样就可以进行等值匹配了，这就是为什么这4种格式都能匹配成功的原因。<br> 不过springboot官方推荐使用<strong>烤肉串模式</strong>，也就是中划线模式。<br> **注意：**以上规则仅针对springboot中@ConfigurationProperties注解进行属性绑定时有效，对@Value注解进行属性映射无效。</p><h3 id="计量单位" tabindex="-1"><a class="header-anchor" href="#计量单位"><span>计量单位</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.1 
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2345</span>
  <span class="token key atrule">serverTimeout</span><span class="token punctuation">:</span> <span class="token number">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot充分利用了JDK8中提供的全新的用来表示计量单位的新数据类型，从根本上解决这个问题。<br> 以下模型类中添加了两个JDK8中新增的类，分别是Duration和DataSize</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Duration</span> serverTimeOut<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@DataSizeUnit</span><span class="token punctuation">(</span><span class="token class-name">DataUnit</span><span class="token punctuation">.</span><span class="token constant">MEGABYTES</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSize</span> dataSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Duration</strong>：表示时间间隔，可以通过@DurationUnit注解描述时间单位，例如上例中描述的单位为小时（ChronoUnit.HOURS）<br><strong>DataSize</strong>：表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位，例如上例中描述的单位为MB（DataUnit.MEGABYTES）</p><h3 id="校验属性" tabindex="-1"><a class="header-anchor" href="#校验属性"><span>校验属性</span></a></h3><p><strong>步骤①</strong>：开启校验框架</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--1.导入JSR303规范--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--使用hibernate框架提供的校验器做实现--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤②</strong>：在需要开启校验功能的类上使用注解@Validated开启校验功能</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//开启对当前bean的属性注入校验</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤③</strong>：对具体的字段设置校验规则</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//开启对当前bean的属性注入校验</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置具体的规则</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;最大值不能超过8888&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;最小值不能低于202&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性转换" tabindex="-1"><a class="header-anchor" href="#属性转换"><span>属性转换</span></a></h3><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171745288.png" alt="image.png" loading="lazy"><br> 一个<strong>错误</strong>的案例：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm<span class="token punctuation">?</span>serverTimezone=UTC
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">0127</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>password属性的值为0127 符合八进制的转换规则，故实际输出值为87，建议<strong>都用双引号引起来</strong>避免出现这种问题。</p><h3 id="临时属性" tabindex="-1"><a class="header-anchor" href="#临时属性"><span>临时属性</span></a></h3><h4 id="命令行方式" tabindex="-1"><a class="header-anchor" href="#命令行方式"><span>命令行方式：</span></a></h4><p>1．使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性<br> 2．临时属性添加方式:java -jar工程名.jar --属性名=值<br> 3．多个临时属性之间使用空格分隔<br> 4．临时属性必须是当前boot工程支持的属性，否则设置无效</p><h4 id="idea中的方式" tabindex="-1"><a class="header-anchor" href="#idea中的方式"><span>IDEA中的方式：</span></a></h4><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171745448.png" alt="图片.png" loading="lazy"><strong>注意：</strong></p><ul><li>这里的参数对应的就是启动类中的<strong>args</strong><ul><li>修改配置文件名: <strong>--spring.config.name=xxx</strong></li><li>修改配置文件路径: <strong>--spring.config.location=classpath:/xxx.properties</strong></li><li>配置多个属性时<strong>最后一个</strong>生效</li><li><strong>在以后的微服务架构中（多环境开发）几乎不会出现这种形式！</strong></li></ul></li><li>可以通过编程在启动方法中去掉args使得界面中的配置不生效</li><li>也可以手动定义一个String[]的args传到启动方法中</li></ul><h4 id="测试类中的方式" tabindex="-1"><a class="header-anchor" href="#测试类中的方式"><span>测试类中的方式</span></a></h4><h5 id="临时属性-1" tabindex="-1"><a class="header-anchor" href="#临时属性-1"><span><strong>临时属性</strong></span></a></h5><p>springboot已经为我们开发者早就想好了这种问题该如何解决，并且提供了对应的功能入口。在测试用例程序中，可以通过对注解@SpringBootTest添加属性来模拟临时属性，具体如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//properties属性可以为当前测试用例添加临时的属性配置</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>properties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;test.prop=testValue1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesAndArgsTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${test.prop}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用注解@SpringBootTest的properties属性就可以为当前测试用例添加临时的属性，覆盖源码配置文件中对应的属性值进行测试。<br> 优势：比多环境开发中的测试环境影响更小，仅对当前测试类有效。</p><h5 id="临时参数" tabindex="-1"><a class="header-anchor" href="#临时参数"><span><strong>临时参数</strong></span></a></h5><p>除了上述这种情况，在前面讲解使用命令行启动springboot程序时讲过，通过命令行参数也可以设置属性值。而且线上启动程序时，通常都会添加一些专用的配置信息。作为运维人员他们才不懂java，更不懂这些配置的信息具体格式该怎么写，那如果我们作为开发者提供了对应的书写内容后，能否提前测试一下这些配置信息是否有效呢？当时是可以的，还是通过注解@SpringBootTest的另一个属性来进行设定。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//args属性可以为当前测试用例添加临时的命令行参数</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;--test.prop=testValue2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesAndArgsTest</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${test.prop}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用注解@SpringBootTest的args属性就可以为当前测试用例模拟命令行参数并进行测试。<br><strong>注意优先级：args(命令行) &gt; properties(临时属性) &gt; yaml文件中的属性(配置)</strong></p><h3 id="加载测试专用配置" tabindex="-1"><a class="header-anchor" href="#加载测试专用配置"><span>加载测试专用配置</span></a></h3><p>一个spring环境中可以设置若干个配置文件或配置类，若干个配置信息可以同时生效。现在我们的需求就是在测试环境中再添加一个配置类，然后启动测试环境时，生效此配置就行了。其实做法和spring环境中加载多个配置信息的方式完全一样。具体操作步骤如下：<br><strong>步骤①</strong>：在测试包test中创建专用的测试环境配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;bean msg&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置仅用于演示当前实验效果，实际开发可不能这么注入String类型的数据<br><strong>步骤②</strong>：在启动测试环境时，导入测试环境专用的配置类，使用@Import注解即可实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MsgConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	<span class="token comment">//MsgConfig是测试环境的专用类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里就通过@Import属性实现了基于开发环境的配置基础上，对配置进行测试环境的追加操作，实现了1+1的配置环境效果。这样我们就可以实现每一个不同的测试用例加载不同的bean的效果，丰富测试用例的编写，同时不影响开发环境的配置。</p><h3 id="注解-xml混合配置" tabindex="-1"><a class="header-anchor" href="#注解-xml混合配置"><span>注解&amp;XML混合配置</span></a></h3><p>在使用了SpringBoot后，通常使用<strong>注解</strong>的方式进行配置，此时若想额外添加XML文件进行配置，可使用**@ImportResources(&quot;classpath:fileName.xml&quot;)**注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:applicationContext.xml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><p>日志的主要作用：</p><ul><li>编程期调试代码</li><li>运营期记录信息</li><li>记录日常运营重要信息（峰值流量、平均响应时长……）</li><li>记录应用报错信息（错误堆栈）</li><li>记录运维过程数据（扩容、宕机、报警……）</li></ul><h3 id="代码中使用日志工具" tabindex="-1"><a class="header-anchor" href="#代码中使用日志工具"><span>代码中使用日志工具</span></a></h3><p><strong>步骤①</strong>：添加日志记录操作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BookController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;debug...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;info...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;warn...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;springboot is running...2&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中log对象就是用来记录日志的对象，下面的<code>log.debug</code>，<code>log.info</code>这些操作就是写日志的API了。</p><hr><h4 id="lombok下的-slf4j" tabindex="-1"><a class="header-anchor" href="#lombok下的-slf4j"><span>Lombok下的@Slf4j</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>	<span class="token comment">//日志对象名为log</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;这是日志信息&quot;</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;信息：{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>步骤②</strong>：设置日志输出级别<br> 日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。日志的级别分为6种，分别是：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入ERROR</li></ul><p>一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。下面就设置一下日志级别：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 开启debug模式，输出调试信息，常用于检查系统运行状况</span>
<span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这么设置太简单粗暴了，日志系统通常都提供了细粒度的控制。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 开启debug模式，输出调试信息，常用于检查系统运行状况</span>
<span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment">## 设置日志级别，root表示根节点，即整体应用日志级别</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
	<span class="token key atrule">level</span><span class="token punctuation">:</span>
    	<span class="token key atrule">root</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以再设置更细粒度的控制<br><strong>步骤③</strong>：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
	<span class="token comment">## 设置日志组</span>
    <span class="token key atrule">group</span><span class="token punctuation">:</span>
    	<span class="token comment">## 自定义组名，设置当前组中所包含的包</span>
        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> com.springboot.controller
    <span class="token key atrule">level</span><span class="token punctuation">:</span>
    	<span class="token key atrule">root</span><span class="token punctuation">:</span> warn
        <span class="token comment">## 为对应组设置日志级别</span>
        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> debug
    	<span class="token comment">## 为对包设置日志级别</span>
        <span class="token key atrule">com.springboot.controller</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说白了就是总体设置一下，每个包设置一下，如果感觉设置的麻烦，就先把包分个组，对组设置。</p><h4 id="lombok其它注解" tabindex="-1"><a class="header-anchor" href="#lombok其它注解"><span>Lombok其它注解</span></a></h4><h5 id="accessors" tabindex="-1"><a class="header-anchor" href="#accessors"><span>@Accessors</span></a></h5><p>@Accessors 是 Lombok 库中的一个注解，用于控制生成的 getter 和 setter 方法的访问级别。<br> 默认情况下，Lombok 会为所有属性生成 public 的 getter 和 setter 方法，这样可以直接访问和修改这些属性。但是，有时候我们可能需要将这些属性设置为 private，以便更好地封装数据。这时就可以使用 @Accessors 注解来控制生成的 getter 和 setter 方法的访问级别。<br> @Accessors 注解有以下几个可选值：</p><ul><li>public：生成 public 的 getter 和 setter 方法。</li><li>private：生成 private 的 getter 和 setter 方法。</li><li>protected：生成 protected 的 getter 和 setter 方法。</li><li>package-private：生成包私有的 getter 和 setter 方法。</li><li>all：生成所有访问级别的 getter 和 setter 方法。</li><li>chain: 允许链式调用</li></ul><p>例如，下面的代码将生成所有访问级别的 getter 和 setter 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>all <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#requiredargsconstructor"><span>@RequiredArgsConstructor</span></a></h5><p>使用 <code>@RequiredArgsConstructor</code> 注解的类将自动生成一个带有所有<strong>非静态成员变量</strong>的构造方法，使得在使用该类时无需手动编写这些构造方法。<br> 例如，假设你有一个名为 <code>Person</code> 的类，其中包含 <code>name</code> 和 <code>age</code> 两个成员变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiredArgsConstructor</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">//以下内容可被上方的注解替代</span>
    
    <span class="token comment">// // 默认构造方法</span>
    <span class="token comment">// public Person() {</span>
    <span class="token comment">//     // 默认构造方法的内容</span>
    <span class="token comment">// }</span>

    <span class="token comment">// // 带参数的构造方法</span>
    <span class="token comment">// public Person(String name, int age) {</span>
    <span class="token comment">//     this.name = name;</span>
    <span class="token comment">//     this.age = age;</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志格式控制" tabindex="-1"><a class="header-anchor" href="#日志格式控制"><span>日志格式控制</span></a></h3><h4 id="日志信息说明" tabindex="-1"><a class="header-anchor" href="#日志信息说明"><span>日志信息说明</span></a></h4><p>默认输出格式：</p><ul><li>时间和日期：毫秒级精度</li><li>日志级别：ERROR, WARN, INFO, DEBUG, or TRACE.</li><li>进程 ID</li><li>---： 消息分割符</li><li>线程名： 使用[]包含</li><li>Logger 名： 通常是产生日志的<strong>类名</strong></li><li>消息： 日志记录的内容</li></ul><p>注意： logback 没有FATAL级别，对应的是ERROR<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171745222.png" alt="image.png" loading="lazy"><br> 对于单条日志信息来说，日期，触发位置，记录信息是最核心的信息。级别用于做筛选过滤，PID与线程名用于做精准分析。了解这些信息后就可以DIY日志格式了。<br> 官方日志模板的书写格式：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
	<span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    	<span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">&quot;%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义日志格式" tabindex="-1"><a class="header-anchor" href="#自定义日志格式"><span>自定义日志格式</span></a></h4><p>默认值：参照：<code>spring-boot</code>包<code>additional-spring-configuration-metadata.json</code>文件<br> 默认输出格式值：<code>%clr(%d{\${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX}}){faint} %clr(\${LOG_LEVEL_PATTERN:-%5p}) %clr(\${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n\${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</code><br> 可修改为：<code>&#39;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} ===&gt; %msg%n&#39;</code></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token value attr-value">%d{yyyy:MM:dd HH:mm:ss} %-5level [%thread] %logger{15} =&gt; %msg %n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别"><span>日志级别</span></a></h3><ul><li>由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>； <ul><li><strong>只会打印指定级别及以上级别的日志</strong></li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，<strong>一般不使用</strong></li><li>DEBUG：开发调试细节日志</li><li>INFO：关键、感兴趣信息日志</li><li>WARN：警告但不是错误的信息日志，比如：版本过时</li><li>ERROR：业务错误日志，比如出现各种异常</li><li>FATAL：致命错误日志，比如jvm系统崩溃</li><li>OFF：关闭所有日志记录</li></ul></li><li>不指定级别的所有类，都使用root指定的级别作为默认级别</li><li>SpringBoot日志<strong>默认级别是 INFO</strong></li></ul><hr><ol><li>在application.properties/yaml中配置<code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别</li><li>level可取值范围：<code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF</code>，定义在<code>LogLevel</code>类中</li><li>root 的logger-name叫root，可以配置logging.level.root=warn，代表所有未指定日志级别都使用 root 的 warn 级别</li></ol><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#默认所有日志若没有精确指定级别就使用root的默认级别</span>
<span class="token key attr-name">logging.level.root</span> <span class="token punctuation">=</span> <span class="token value attr-value">warn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志分组" tabindex="-1"><a class="header-anchor" href="#日志分组"><span>日志分组</span></a></h3><p>将制定的包划分为一个组，实现组内日志的统一管理</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.group.abc</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.qzy.functional_web.config, com.qzy.functional_web.pojo</span>
<span class="token key attr-name">logging.level.abc</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>比较有用的技巧是：<br> 将相关的logger分组在一起，统一配置。SpringBoot 也支持。比如：Tomcat 相关的日志统一设置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>logging<span class="token punctuation">.</span>group<span class="token punctuation">.</span>tomcat<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat
logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>tomcat<span class="token operator">=</span>trace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot 预定义两个组</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td>org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td>sql</td><td>org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</td></tr></tbody></table><h3 id="配置日志文件到本地" tabindex="-1"><a class="header-anchor" href="#配置日志文件到本地"><span>配置日志文件到本地</span></a></h3><p>SpringBoot 默认只把日志写在控制台，如果想额外记录到文件，可以在application.properties中添加logging.file.name or logging.file.path配置项。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171746935.png" alt="image.png" loading="lazy"></p><table><thead><tr><th>logging.file.name</th><th>logging.file.path</th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td></td><td>仅控制台输出</td></tr><tr><td><strong>指定</strong></td><td>未指定</td><td>my.log</td><td>写入指定文件。可以加路径</td></tr><tr><td>未指定</td><td><strong>指定</strong></td><td>/var/log</td><td>写入指定目录，文件名为spring.log</td></tr><tr><td><strong>指定</strong></td><td><strong>指定</strong></td><td></td><td>以logging.file.name为准</td></tr></tbody></table><p>记录日志到文件中格式非常简单，设置日志文件名即可。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> server.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然使用上述格式可以将日志记录下来了，但是面对线上的复杂情况，一个文件记录肯定是不能够满足运维要求的，通常会每天记录日志文件，同时为了便于维护，还要限制每个日志文件的大小。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
	<span class="token key atrule">logback</span><span class="token punctuation">:</span>
    	<span class="token key atrule">rollingpolicy</span><span class="token punctuation">:</span>
        	<span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 3KB
            <span class="token key atrule">file-name-pattern</span><span class="token punctuation">:</span> server.%d<span class="token punctuation">{</span>yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd<span class="token punctuation">}</span>.%i.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上格式是基于logback日志技术设置每日日志文件的设置格式，要求容量到达3KB以后就转存信息到第二个文件中。文件命名规则中的%d标识日期，%i是一个递增变量，用于区分日志文件。</p><h3 id="文件归档与滚动切割" tabindex="-1"><a class="header-anchor" href="#文件归档与滚动切割"><span>文件归档与滚动切割</span></a></h3><blockquote><p>归档：每天的日志单独存到一个文档中。<br> 切割：每个文件10MB，超过大小切割成另外一个文件。</p></blockquote><ol><li>每天的日志应该独立分割出来存档。如果使用logback（SpringBoot 默认整合），可以通过application.properties/yaml文件指定日志滚动规则。</li><li>如果是其他日志系统，需要自行配置（添加log4j2.xml或log4j2-spring.xml）</li><li>支持的滚动规则设置如下<br> | 配置项 | 描述 |<br> | --- | --- |<br> | logging.logback.rollingpolicy.file-name-pattern | 日志存档的文件名格式（默认值：\${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz） |<br> | logging.logback.rollingpolicy.clean-history-on-start | 应用启动时是否清除以前存档（默认值：false） |<br> | logging.logback.rollingpolicy.max-file-size | 存档前，每个日志文件的最大大小（默认值：10MB） |<br> | logging.logback.rollingpolicy.total-size-cap | 日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件 |<br> | logging.logback.rollingpolicy.max-history | 日志文件保存的最大天数(默认值：7). |</li></ol><h3 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置"><span>自定义配置</span></a></h3><p>通常我们配置 application.properties 就够了。当然也可以自定义。比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy,</td></tr><tr><td>logback.xml, or logback.groovy</td><td></td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml or log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>如果可能，我们建议您在日志配置中使用<code>-spring</code> 变量（例如，<code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。<br> 如果您使用标准配置文件，spring 无法完全控制日志初始化。<br> 最佳实战：自己要写配置，配置文件名加上 <code>xx-spring.xml</code></p><h3 id="切换日志组合" tabindex="-1"><a class="header-anchor" href="#切换日志组合"><span>切换日志组合</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>log4j2支持yaml和json格式的配置文件</p><table><thead><tr><th>格式</th><th>依赖</th><th>文件名</th></tr></thead><tbody><tr><td>YAML</td><td>com.fasterxml.jackson.core:jackson-databind + com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</td><td>log4j2.yaml + log4j2.yml</td></tr><tr><td>JSON</td><td>com.fasterxml.jackson.core:jackson-databind</td><td>log4j2.json + log4j2.jsn</td></tr></tbody></table><h3 id="最佳实战" tabindex="-1"><a class="header-anchor" href="#最佳实战"><span>最佳实战</span></a></h3><ol><li>导入任何第三方框架，先排除它的日志包，因为Boot底层控制好了日志</li><li>修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如<code>logback-spring.xml</code>，<code>log4j2-spring.xml</code></li><li>如需对接<strong>专业日志系统</strong>，也只需要把 logback 记录的<strong>日志</strong>灌倒** kafka**之类的中间件，这和SpringBoot没关系，都是日志框架自己的配置，<strong>修改配置文件即可</strong></li><li><strong>业务中使用slf4j-api记录日志。不要再 sout 了</strong></li></ol><h2 id="热部署" tabindex="-1"><a class="header-anchor" href="#热部署"><span>热部署</span></a></h2><h3 id="手工启动热部署" tabindex="-1"><a class="header-anchor" href="#手工启动热部署"><span>手工启动热部署</span></a></h3><p><strong>步骤①</strong>：导入开发者工具对应的坐标</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤②</strong>：构建项目，可以使用快捷键激活此功能，对应的快捷键一定要记得<strong>CTRL + F9</strong><br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/spring/springboot/202406171746714.png" alt="image.png" loading="lazy"></p><h3 id="关闭热部署" tabindex="-1"><a class="header-anchor" href="#关闭热部署"><span>关闭热部署</span></a></h3><p>线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSMPApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.devtools.restart.enabled&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实上述担心略微有点多余，因为线上环境的维护是不可能出现修改代码的操作的，这么做唯一的作用是降低资源消耗，毕竟那双盯着你项目是不是产生变化的眼睛只要闭上了，就不具有热部署功能了，这个开关的作用就是禁用对应功能。<br><strong>总结</strong><br> 通过配置可以关闭热部署功能，降低线上程序的资源消耗。</p><h3 id="热部署监控的文件范围" tabindex="-1"><a class="header-anchor" href="#热部署监控的文件范围"><span>热部署监控的文件范围</span></a></h3><p>配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过application.yml文件进行设定哪些文件不参与热部署操作</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span>
      <span class="token comment">## 设置不参与热部署的文件或文件夹</span>
      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/<span class="token important">**</span><span class="token punctuation">,</span>public/<span class="token important">**</span><span class="token punctuation">,</span>config/application.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境隔离" tabindex="-1"><a class="header-anchor" href="#环境隔离"><span>环境隔离</span></a></h2><h3 id="类中的相关操作" tabindex="-1"><a class="header-anchor" href="#类中的相关操作"><span>类中的相关操作</span></a></h3><p>指定组件在哪些环境下<strong>可能</strong>生效。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//指定该类只在下面这三个环境才 可能 生效</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pro&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rubbish</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器中的任何组价（Component、Bean、Configration……）都可以使用@Profile标记<br> 激活环境的方案：</p><ul><li>配置文件激活：<code>spring.profiles.active = dev</code></li><li>命令行激活：<code>java -jar xxx.jar --spring.profiles.active = dev</code></li></ul><h3 id="多环境开发-yaml-单文件" tabindex="-1"><a class="header-anchor" href="#多环境开发-yaml-单文件"><span>多环境开发(yaml-单文件)</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 指定使用哪个生产环境</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> pro
<span class="token comment">## 各个环境之间用 --- 隔开</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> pro
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7777</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> dev
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> test
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多环境开发-yaml-多文件" tabindex="-1"><a class="header-anchor" href="#多环境开发-yaml-多文件"><span>多环境开发(yaml-多文件)</span></a></h3><h4 id="profile-配置文件" tabindex="-1"><a class="header-anchor" href="#profile-配置文件"><span>Profile 配置文件</span></a></h4><ul><li><code>application-{profile}.properties</code>可以作为<strong>指定环境的配置文件</strong>。</li><li>激活这个环境，<strong>配置</strong>就会生效。最终生效的所有<strong>配置</strong>是 <ul><li><code>application.properties</code>：主配置文件，任意时候都生效</li><li><code>application-{profile}.properties</code>：指定环境配置文件，激活指定环境生效</li></ul></li></ul><p>profile优先级 &gt; application</p><h4 id="profile-环境分组" tabindex="-1"><a class="header-anchor" href="#profile-环境分组"><span>Profile 环境分组</span></a></h4><p>创建prod组，指定包含db和mq配置</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.group.prod[0]</span><span class="token punctuation">=</span><span class="token value attr-value">db</span>
<span class="token key attr-name">spring.profiles.group.prod[1]</span><span class="token punctuation">=</span><span class="token value attr-value">mq</span>
<span class="token key attr-name">spring.profiles.group.abc</span><span class="token punctuation">=</span><span class="token value attr-value">a,b,c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用--spring.profiles.active=prod ，就会激活prod=&gt;db，mq配置文件</p><h4 id="配置文件隔离-案例使用" tabindex="-1"><a class="header-anchor" href="#配置文件隔离-案例使用"><span>配置文件隔离-案例使用</span></a></h4><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
	<span class="token key atrule">profiles</span><span class="token punctuation">:</span>
		<span class="token key atrule">active</span><span class="token punctuation">:</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7777</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多环境开发分组管理" tabindex="-1"><a class="header-anchor" href="#多环境开发分组管理"><span>多环境开发分组管理</span></a></h3><h4 id="环境激活" tabindex="-1"><a class="header-anchor" href="#环境激活"><span>环境激活</span></a></h4><p>若把多个数据库的连接信息配置在一起将会有安全隐患，故多使用<strong>多文件</strong>格式，维护起来也更加方便<br> 多文件格式进阶：</p><ul><li>可以根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件</li><li>命名规则：application-devDB.yaml、application-devRedis.yaml、application-devMVC.yaml <ul><li>在主配置文件中: application.yaml</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
    <span class="token key atrule">include</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  -  若是更改了当前使用的dev,则下面的三个dev也要跟着改 
  -  在这种方式中，若这几个配置文件中有相同属性，则主配置dev的生效 
</code></pre><ul><li>在SpringBoot2.4之后发生了一点变化：</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
    <span class="token key atrule">group</span><span class="token punctuation">:</span>
    	<span class="token key atrule">&quot;dev&quot;</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC
    	<span class="token key atrule">&quot;pro&quot;</span><span class="token punctuation">:</span> proDB<span class="token punctuation">,</span>proRedis<span class="token punctuation">,</span>proMVC
    	<span class="token key atrule">&quot;test&quot;</span><span class="token punctuation">:</span> testDB<span class="token punctuation">,</span>testRedis<span class="token punctuation">,</span>testMVC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  -  新版的group关键字在修改所使用的环境时，只需要更改active后的值即可 
  -  在这种方式中，若这几个配置文件中有相同属性，则主配置devMVC的生效 
</code></pre><h4 id="默认环境" tabindex="-1"><a class="header-anchor" href="#默认环境"><span>默认环境</span></a></h4><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">## 修改默认的环境为test</span>
<span class="token key attr-name">spring.profiles.default</span><span class="token punctuation">=</span><span class="token value attr-value">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不推荐这种方式！建议使用激活方式！</strong></p><h3 id="环境包含" tabindex="-1"><a class="header-anchor" href="#环境包含"><span>环境包含</span></a></h3><p>注意：</p><ol><li>spring.profiles.active 和spring.profiles.default 只能用到** 无 profile 的文件<strong>中，如果在application-dev.yaml中编写就是</strong>无效的**</li><li>也可以额外添加生效文件，而不是激活替换。比如：</li></ol><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.include[0]</span><span class="token punctuation">=</span><span class="token value attr-value">common</span>
<span class="token key attr-name">spring.profiles.include[1]</span><span class="token punctuation">=</span><span class="token value attr-value">local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="最佳实战-1" tabindex="-1"><a class="header-anchor" href="#最佳实战-1"><span>最佳实战</span></a></h4><ul><li>**生效的环境 **= <strong>激活的环境/默认环境</strong> + <strong>包含的环境</strong></li><li>项目里面这么用 <ul><li>基础的配置<code>mybatis</code>、<code>log</code>、<code>xxx</code>：写到<strong>包含环境中</strong></li><li>需要动态切换变化的 <code>db</code>、<code>redis</code>：写到<strong>激活的环境中</strong></li></ul></li></ul><h3 id="多环境开发控制" tabindex="-1"><a class="header-anchor" href="#多环境开发控制"><span>多环境开发控制</span></a></h3><p>处理maven和SpringBoot同时设置多环境<br> maven是做项目构建管理、最终生成代码包的；SpringBoot是简化开发的。简化，不是起主导作用。最终还是要靠maven来管理整个工程，所以SpringBoot应该听maven的。整个确认后下面就好做了。大体思想如下：</p><ul><li>先在maven环境中设置用什么具体的环境</li><li>在SpringBoot中读取maven设置的环境即可</li></ul><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>env_dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>		<span class="token comment">&lt;!--默认启动环境--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>env_pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">&gt;</span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SpringBoot中读取maven设置值</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
	<span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    	<span class="token key atrule">active</span><span class="token punctuation">:</span> @profile.active@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的@属性名@就是读取maven中配置的属性值的语法格式。<br><strong>总结</strong></p><ol><li>当Maven与SpringBoot同时对多环境进行控制时，以Mavn为主，SpringBoot使用@..@占位符读取Maven对应的配置属性值</li><li>基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</li></ol><h2 id="外部化配置" tabindex="-1"><a class="header-anchor" href="#外部化配置"><span>外部化配置</span></a></h2><h3 id="配置文件分类" tabindex="-1"><a class="header-anchor" href="#配置文件分类"><span>配置文件分类</span></a></h3><h4 id="四级分类" tabindex="-1"><a class="header-anchor" href="#四级分类"><span>四级分类</span></a></h4><ol><li>一级**[最高]**</li></ol><ul><li>file : config/application.yaml</li></ul><ol start="2"><li>二级</li></ol><ul><li>application.yaml</li></ul><ol start="3"><li>三级</li></ol><ul><li>classpath : config/application.yaml</li></ul><ol start="4"><li>四级**[最低]**</li></ol><ul><li>application.yaml</li></ul><h4 id="混合配置" tabindex="-1"><a class="header-anchor" href="#混合配置"><span><strong>混合配置</strong></span></a></h4><ul><li><strong>由于配置文件有多级，因此可分别在不同级别进行不同的配置</strong></li><li><strong>当出现多个配置文件时，按照优先级对配置进行取舍</strong><ul><li>由于配置文件有yaml和properties两种格式</li><li>已知：properties的优先级 &gt; yml &gt; yaml的优先级</li><li>故：同一层级 properties生效，而不同层级，层级高的生效</li></ul></li><li>举例： <ul><li>程序员在4级</li><li>项目经理使用3级</li><li>运维人员在2级</li><li>运维经理用1级</li></ul></li></ul><hr><blockquote><p><strong>场景</strong>：线上应用如何<strong>快速修改配置</strong>，并应<strong>用最新配置</strong>？</p><ul><li>SpringBoot 使用 <strong>配置优先级</strong> + <strong>外部配置</strong> 简化配置更新、简化运维。</li><li>只需要给<code>jar</code>应用所在的文件夹放一个<code>application.properties</code>最新配置文件，重启项目就能自动应用最新配置</li></ul></blockquote><h3 id="配置优先级" tabindex="-1"><a class="header-anchor" href="#配置优先级"><span>配置优先级</span></a></h3><p>Spring Boot 允许将<strong>配置外部化</strong>，以便可以在不同的环境中使用相同的应用程序代码。<br> 我们可以使用各种<strong>外部配置源</strong>，包括Java Properties文件、YAML文件、环境变量和命令行参数。<br> @Value可以获取值，也可以用@ConfigurationProperties将所有属性绑定到java object中<br><strong>以下是 SpringBoot 属性源加载顺序。后面的会覆盖前面的值</strong>。由低到高，高优先级配置覆盖低优先级</p><ol><li><strong>默认属性</strong>（通过<code>SpringApplication.setDefaultProperties</code>指定的）</li><li>@PropertySource指定加载的配置（需要写在@Configuration类上才可生效）</li><li><strong>配置文件（application.properties/yml等）</strong></li><li>RandomValuePropertySource支持的random.*配置（如：@Value(&quot;\${random.int}&quot;)）</li><li>OS 环境变量</li><li>Java 系统属性（System.getProperties()）</li><li>JNDI 属性（来自java:comp/env）</li><li>ServletContext 初始化参数</li><li>ServletConfig 初始化参数</li><li>SPRING_APPLICATION_JSON属性（内置在环境变量或系统属性中的 JSON）</li><li><strong>命令行参数</strong></li><li>测试属性。(@SpringBootTest进行测试时指定的属性)</li><li>测试类@TestPropertySource注解</li><li>Devtools 设置的全局属性。($HOME/.config/spring-boot)</li></ol><blockquote><p>结论：配置可以写到很多位置，常见的优先级顺序：</p><ul><li><code>命令行</code>&gt; <code>配置文件</code>&gt; <code>springapplication配置</code></li></ul></blockquote><p><strong>配置文件优先级</strong>如下：(<strong>后面覆盖前面</strong>)</p><ol><li><strong>jar 包内</strong>的application.properties/yml</li><li><strong>jar 包内</strong>的application-{profile}.properties/yml</li><li><strong>jar 包外</strong>的application.properties/yml</li><li><strong>jar 包外</strong>的application-{profile}.properties/yml</li></ol><p><strong>建议</strong>：<strong>用一种格式的配置文件</strong>。<code>**如果.properties和.yml同时存在,则.properties优先**</code></p><blockquote><p>结论：<code>包外 &gt; 包内</code>； 同级情况：<code>profile配置 &gt; application配置</code></p></blockquote><p><strong>所有参数均可由命令行传入，使用</strong><code>**--参数项=参数值**</code><strong>，将会被添加到环境变量中，并优先于</strong><code>**配置文件**</code><strong>。</strong><br><strong>比如</strong><code>**java -jar app.jar --name=&quot;Spring&quot;**</code><strong>,可以使用</strong><code>**@Value(&quot;\${name}&quot;)**</code><strong>获取</strong></p><p>演示场景：</p><ul><li>包内： application.properties <code>server.port=8000</code></li><li>包内： application-dev.properties <code>server.port=9000</code></li><li>包外： application.properties <code>server.port=8001</code></li><li>包外： application-dev.properties <code>server.port=9001</code></li></ul><p>启动端口？：命令行 &gt; <code>9001</code> &gt; <code>8001</code> &gt; <code>9000</code> &gt; <code>8000</code></p><h3 id="外部配置" tabindex="-1"><a class="header-anchor" href="#外部配置"><span>外部配置</span></a></h3><p>SpringBoot 应用启动时会自动寻找application.properties和application.yaml位置，进行加载。顺序如下：（<strong>后面覆盖前面</strong>）</p><ol><li>类路径: 内部 <ol><li>类根路径</li><li>类下/config包</li></ol></li><li>当前路径（项目所在的位置） <ol><li>当前路径</li><li>当前下/config子目录</li><li>/config目录的直接子目录</li></ol></li></ol><p>最终效果：优先级由高到低，前面覆盖后面</p><ul><li>命令行 &gt; 包外config直接子目录 &gt; 包外config目录 &gt; 包外根目录 &gt; 包内目录</li><li>同级比较： <ul><li>profile配置 &gt; 默认配置</li><li>properties配置 &gt; yaml配置</li></ul></li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1682073869709-2cba18c8-55bd-4bf1-a9df-ac784e30d89a.svg#clientId=ua56aff10-fdb3-4&amp;from=paste&amp;height=535&amp;id=u251139ab&amp;originHeight=669&amp;originWidth=694&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=91719&amp;status=done&amp;style=none&amp;taskId=uc8d5b2d7-9e97-48ee-9d6e-18be7deac2e&amp;title=&amp;width=555.2" alt="未命名绘图.svg" tabindex="0" loading="lazy"><figcaption>未命名绘图.svg</figcaption></figure><p>规律：最外层的最优先。</p><ul><li>命令行 &gt; 所有</li><li>包外 &gt; 包内</li><li>config目录 &gt; 根目录</li><li>profile &gt; application</li></ul><p>配置不同就都生效（互补），配置相同高优先级覆盖低优先级</p><h2 id="模拟web环境的测试" tabindex="-1"><a class="header-anchor" href="#模拟web环境的测试"><span>模拟Web环境的测试</span></a></h2><p>在后端代码写好之后，想要模拟网页发送请求（不使用PostMan）进行业务测试，可以进行如下步骤的操作。</p><h3 id="配置虚拟环境" tabindex="-1"><a class="header-anchor" href="#配置虚拟环境"><span>配置虚拟环境</span></a></h3><p>每一个springboot的测试类上方都会有@SpringBootTest注解，其中一个属性为webEnvironment。通过该属性设置测试用例启动web环境，具体如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">{</span>	
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类中启动web环境时，可以指定启动的Web环境对应的端口，springboot提供了4种设置值，分别如下：</p><ul><li>MOCK：根据当前设置确认是否启动web环境，例如使用了Servlet的API就启动web环境，属于适配性的配置</li><li>DEFINED_PORT：使用自定义的端口作为web服务器端口</li><li>RANDOM_PORT：使用随机端口作为web服务器端口</li><li>NONE：不启动web环境</li></ul><p>通过上述配置，现在启动测试程序时就可以正常启用web环境了，建议大家测试时使用<strong>RANDOM_PORT</strong>，避免代码中因为写死设定引发线上功能打包测试时由于端口冲突导致意外现象的出现。</p><h3 id="发送虚拟请求" tabindex="-1"><a class="header-anchor" href="#发送虚拟请求"><span>发送虚拟请求</span></a></h3><p><strong>步骤①</strong>：在测试类中开启web虚拟调用功能，通过注解@AutoConfigureMockMvc实现此功能的开启</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token comment">//开启虚拟MVC调用</span>
<span class="token annotation punctuation">@AutoConfigureMockMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤②</strong>：定义发起虚拟调用的对象MockMVC，通过自动装配的形式初始化对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token comment">//开启虚拟MVC调用</span>
<span class="token annotation punctuation">@AutoConfigureMockMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤③</strong>：创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token comment">//开启虚拟MVC调用</span>
<span class="token annotation punctuation">@AutoConfigureMockMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//http://localhost:8080/books</span>
        <span class="token comment">//创建虚拟请求，方式：get，路径：/books</span>
        <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//执行对应的请求</span>
        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行测试程序，就可以正常的发送/books对应的请求了，注意访问路径不要写http://localhost:8080/books，因为前面的服务器IP地址和端口使用的是当前虚拟的web环境，无需指定，仅指定请求的具体路径即可。</p><h3 id="请求结果比对" tabindex="-1"><a class="header-anchor" href="#请求结果比对"><span>请求结果比对</span></a></h3><h4 id="响应状态匹配" tabindex="-1"><a class="header-anchor" href="#响应状态匹配"><span>响应状态匹配</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultActions</span> action <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span>
    <span class="token comment">//定义本次调用的预期值</span>
    <span class="token class-name">StatusResultMatchers</span> status <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//预计本次调用时成功的状态：200</span>
    <span class="token class-name">ResultMatcher</span> ok <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加预计值到本次调用过程中进行匹配</span>
    action<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="响应体匹配-非json数据格式" tabindex="-1"><a class="header-anchor" href="#响应体匹配-非json数据格式"><span>响应体匹配（非json数据格式）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultActions</span> action <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span>
    <span class="token comment">//定义本次调用的预期值</span>
    <span class="token class-name">ContentResultMatchers</span> content <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultMatcher</span> result <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;springboot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加预计值到本次调用过程中进行匹配</span>
    action<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="响应体匹配-json数据格式" tabindex="-1"><a class="header-anchor" href="#响应体匹配-json数据格式"><span>响应体匹配（json数据格式）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books/1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultActions</span> action <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span>
    <span class="token comment">//定义本次调用的预期值</span>
    <span class="token class-name">ContentResultMatchers</span> content <span class="token operator">=</span> <span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultMatcher</span> result <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;springboot\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加预计值到本次调用过程中进行匹配</span>
    action<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ol><li>web虚拟调用可以对本地虚拟请求的返回响应信息进行比对，分为响应头信息比对、响应体信息比对、响应状态信息等进行比对。</li></ol><h2 id="函数式web" tabindex="-1"><a class="header-anchor" href="#函数式web"><span>函数式Web</span></a></h2><p><code>SpringMVC 5.2</code> 以后 允许我们使用<strong>函数式</strong>的方式，<strong>定义Web的请求处理流程</strong>。<br> 函数式接口<br> Web请求处理的方式：</p><ol><li><code>@Controller + @RequestMapping</code>：**耦合式 **（<strong>路由</strong>、<strong>业务</strong>耦合）</li><li><strong>函数式Web</strong>：分离式（路由、业务分离）</li></ol><h3 id="核心类" tabindex="-1"><a class="header-anchor" href="#核心类"><span>核心类</span></a></h3><ul><li><strong>RouterFunction：定义路由信息。发什么请求，谁来处理</strong></li><li><strong>RequestPredicate：请求谓语。请求方式（get、post）、请求参数</strong></li><li><strong>ServerRequest：封装请求完整数据</strong></li><li><strong>ServerResponse：封装响应完整数据</strong></li></ul><h3 id="入门用法" tabindex="-1"><a class="header-anchor" href="#入门用法"><span>入门用法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBusinessHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;保存用户&quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新用户 &quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot; 成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除用户&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebFunctionConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 函数式web：
     * 1、给容器中放一个Bean：类型是 RouterFunction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ServerResponse</span><span class="token punctuation">&gt;</span></span>,集中所有路由信息
     * 2、每个业务对象准备一个自己的handler
     *
     * 核心四大对象：
     * ● RouterFunction：定义路由信息。发什么请求，谁来处理
     * ● RequestPredicate：请求谓语。请求方式（get、post）、请求参数
     * ● ServerRequest：封装请求完整数据
     * ● ServerResponse：封装响应完整数据
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">userRoute</span><span class="token punctuation">(</span><span class="token class-name">UserBusinessHandler</span> userBusinessHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开始定义路由信息</span>
        <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//三个参数的意义分别是：请求路径、接受请求中的参数、具体的业务处理</span>
                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userBusinessHandler<span class="token operator">::</span><span class="token function">getUser</span><span class="token punctuation">)</span>
                <span class="token comment">//没有中间参数表示不需要接受参数</span>
                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> userBusinessHandler<span class="token operator">::</span><span class="token function">getUsers</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userBusinessHandler<span class="token operator">::</span><span class="token function">saveUser</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userBusinessHandler<span class="token operator">::</span><span class="token function">updateUser</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userBusinessHandler<span class="token operator">::</span><span class="token function">deleteUser</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,306),o=[p];function l(i,c){return a(),s("div",null,o)}const d=n(e,[["render",l],["__file","core.html.vue"]]),k=JSON.parse('{"path":"/frame/spring/SpringBoot/core.html","title":"核心知识","lang":"zh-CN","frontmatter":{"title":"核心知识","shortTitle":"核心知识","description":null,"date":"2024-06-16T21:59:17.000Z","categories":["SpringBoot"],"tags":[]},"headers":[{"level":2,"title":"常用注解","slug":"常用注解","link":"#常用注解","children":[{"level":3,"title":"@Max、@Min","slug":"max、-min","link":"#max、-min","children":[]}]},{"level":2,"title":"常见配置文件属性","slug":"常见配置文件属性","link":"#常见配置文件属性","children":[{"level":3,"title":"静态资源","slug":"静态资源","link":"#静态资源","children":[]},{"level":3,"title":"矩阵注解","slug":"矩阵注解","link":"#矩阵注解","children":[]}]},{"level":2,"title":"获取配置文件中的值","slug":"获取配置文件中的值","link":"#获取配置文件中的值","children":[{"level":3,"title":"直接使用yaml中的值","slug":"直接使用yaml中的值","link":"#直接使用yaml中的值","children":[]},{"level":3,"title":"将数据配置到实体类中使用","slug":"将数据配置到实体类中使用","link":"#将数据配置到实体类中使用","children":[]},{"level":3,"title":"测试用例随机数据设定","slug":"测试用例随机数据设定","link":"#测试用例随机数据设定","children":[]}]},{"level":2,"title":"属性配置","slug":"属性配置","link":"#属性配置","children":[{"level":3,"title":"条件装配","slug":"条件装配","link":"#条件装配","children":[]},{"level":3,"title":"宽松绑定","slug":"宽松绑定","link":"#宽松绑定","children":[]},{"level":3,"title":"计量单位","slug":"计量单位","link":"#计量单位","children":[]},{"level":3,"title":"校验属性","slug":"校验属性","link":"#校验属性","children":[]},{"level":3,"title":"属性转换","slug":"属性转换","link":"#属性转换","children":[]},{"level":3,"title":"临时属性","slug":"临时属性","link":"#临时属性","children":[]},{"level":3,"title":"加载测试专用配置","slug":"加载测试专用配置","link":"#加载测试专用配置","children":[]},{"level":3,"title":"注解&XML混合配置","slug":"注解-xml混合配置","link":"#注解-xml混合配置","children":[]}]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[{"level":3,"title":"代码中使用日志工具","slug":"代码中使用日志工具","link":"#代码中使用日志工具","children":[]},{"level":3,"title":"日志格式控制","slug":"日志格式控制","link":"#日志格式控制","children":[]},{"level":3,"title":"日志级别","slug":"日志级别","link":"#日志级别","children":[]},{"level":3,"title":"日志分组","slug":"日志分组","link":"#日志分组","children":[]},{"level":3,"title":"配置日志文件到本地","slug":"配置日志文件到本地","link":"#配置日志文件到本地","children":[]},{"level":3,"title":"文件归档与滚动切割","slug":"文件归档与滚动切割","link":"#文件归档与滚动切割","children":[]},{"level":3,"title":"自定义配置","slug":"自定义配置","link":"#自定义配置","children":[]},{"level":3,"title":"切换日志组合","slug":"切换日志组合","link":"#切换日志组合","children":[]},{"level":3,"title":"最佳实战","slug":"最佳实战","link":"#最佳实战","children":[]}]},{"level":2,"title":"热部署","slug":"热部署","link":"#热部署","children":[{"level":3,"title":"手工启动热部署","slug":"手工启动热部署","link":"#手工启动热部署","children":[]},{"level":3,"title":"关闭热部署","slug":"关闭热部署","link":"#关闭热部署","children":[]},{"level":3,"title":"热部署监控的文件范围","slug":"热部署监控的文件范围","link":"#热部署监控的文件范围","children":[]}]},{"level":2,"title":"环境隔离","slug":"环境隔离","link":"#环境隔离","children":[{"level":3,"title":"类中的相关操作","slug":"类中的相关操作","link":"#类中的相关操作","children":[]},{"level":3,"title":"多环境开发(yaml-单文件)","slug":"多环境开发-yaml-单文件","link":"#多环境开发-yaml-单文件","children":[]},{"level":3,"title":"多环境开发(yaml-多文件)","slug":"多环境开发-yaml-多文件","link":"#多环境开发-yaml-多文件","children":[]},{"level":3,"title":"多环境开发分组管理","slug":"多环境开发分组管理","link":"#多环境开发分组管理","children":[]},{"level":3,"title":"环境包含","slug":"环境包含","link":"#环境包含","children":[]},{"level":3,"title":"多环境开发控制","slug":"多环境开发控制","link":"#多环境开发控制","children":[]}]},{"level":2,"title":"外部化配置","slug":"外部化配置","link":"#外部化配置","children":[{"level":3,"title":"配置文件分类","slug":"配置文件分类","link":"#配置文件分类","children":[]},{"level":3,"title":"配置优先级","slug":"配置优先级","link":"#配置优先级","children":[]},{"level":3,"title":"外部配置","slug":"外部配置","link":"#外部配置","children":[]}]},{"level":2,"title":"模拟Web环境的测试","slug":"模拟web环境的测试","link":"#模拟web环境的测试","children":[{"level":3,"title":"配置虚拟环境","slug":"配置虚拟环境","link":"#配置虚拟环境","children":[]},{"level":3,"title":"发送虚拟请求","slug":"发送虚拟请求","link":"#发送虚拟请求","children":[]},{"level":3,"title":"请求结果比对","slug":"请求结果比对","link":"#请求结果比对","children":[]}]},{"level":2,"title":"函数式Web","slug":"函数式web","link":"#函数式web","children":[{"level":3,"title":"核心类","slug":"核心类","link":"#核心类","children":[]},{"level":3,"title":"入门用法","slug":"入门用法","link":"#入门用法","children":[]}]}],"git":{"createdTime":1718621104000,"updatedTime":1718621104000,"contributors":[{"name":"Zhiyun Qin","email":"96156298+Okita1027@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":32.72,"words":9816},"filePathRelative":"frame/spring/SpringBoot/core.md","localizedDate":"2024年6月17日"}');export{d as comp,k as data};
