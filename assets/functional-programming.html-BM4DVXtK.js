import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c,d as a,w as t,b as n,o as l,e as p}from"./app-NwmlIrjp.js";const i={},u=n(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="函数化对象" tabindex="-1"><a class="header-anchor" href="#函数化对象"><span>函数化对象</span></a></h3><p>函数本无形，也就是它代表的规则：位置固定、不能传播。</p><p>若要有形，让函数的规则能够传播，需要将函数化为对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lambda</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Lambda</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 它已经变成了一个 lambda 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别</p><ul><li>前者是纯粹的一条两数加法规则，它的位置是固定的，要使用它，需要通过 <code>MyClass.add</code> 找到它，然后执行</li><li>而后者（add 对象）的位置是可以变化的，想去哪里就去哪里，哪里要用到这条加法规则，把它传递过去</li><li>接口的目的是为了将来用它来执行函数对象，此接口中<strong>只能有一个方法定义</strong></li></ul><p>函数化为对象的比喻</p><ul><li>之前是大家要统一去西天取经</li><li>现在是每个菩萨、罗汉拿着经书，入世传经</li></ul><blockquote><p><em><strong>P.S.</strong></em></p><ul><li>大部分文献都说 lambda 是匿名函数，但这个说法需要进行补充</li><li>至少在 java 里，虽然 lambda 表达式本身不需要起名字，但必须提供一个对应的接口</li></ul></blockquote><h3 id="行为参数化" tabindex="-1"><a class="header-anchor" href="#行为参数化"><span>行为参数化</span></a></h3><p>需求：针对一组学生集合，进行筛选</p><div class="language-java line-numbers-mode" data-ext="java" data-title="学生类"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原本的写法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;杨不悔&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;周芷若&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;宋青书&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 能得到 张无忌，宋青书</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需求再变动一下，要求找到 18 岁以下的学生，则需要修改<code>filter</code>方法中的判断条件</p><table><thead><tr><th><code>student.sex.equals(&quot;男&quot;)</code></th><th><code>student.age &lt;= 18</code></th></tr></thead></table><p>既然只有判断逻辑不同，能否把它作为参数传递进来，这样处理起来不就一致了吗？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它俩要判断的逻辑不同，那这两处不同的逻辑必然要用函数来表示，将来这两个函数都需要用到 <code>student</code> 对象来判断，都应该返回一个 <code>boolean</code> 结果，怎么描述函数的长相呢？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">StudentFilterLambda</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">filterStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>filter</code>方法可以统一成下述代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token punctuation">,</span> <span class="token class-name">StudentFilterLambda</span> lambda<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lambda<span class="token punctuation">.</span><span class="token function">filterStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就无需修改原本的判断方法，也能传递不同的实现了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">filter</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> student <span class="token operator">-&gt;</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> student <span class="token operator">-&gt;</span> student<span class="token punctuation">.</span>age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> student <span class="token operator">-&gt;</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="延迟执行" tabindex="-1"><a class="header-anchor" href="#延迟执行"><span>延迟执行</span></a></h3><p>延迟执行（Lazy Evaluation）指的是推迟表达式的求值，直到需要求值的时候才执行。在延迟执行的情况下，表达式的计算会被推迟到需要结果的时候，这样可以提高程序的性能和效率，避免不必要的计算。</p><ul><li><p>特点</p><ul><li>**推迟计算：**在延迟执行的情况下，表达式的计算不会立即执行，而是在需要结果的时候才进行计算。</li><li><strong>惰性计算：</strong> 延迟执行可以看作是一种惰性计算（Lazy Evaluation），即在需要的时候才执行计算，而不是立即计算。</li><li><strong>节省资源：</strong> 延迟执行可以节省系统资源，避免不必要的计算，提高程序的性能和效率。</li></ul></li><li><p>应用</p><ul><li><strong>Stream API：</strong> Java 8 引入的 Stream API 中的操作都是延迟执行的，只有在终端操作（如 forEach、collect 等）被调用时，中间操作才会执行。</li><li><strong>Supplier 接口：</strong> Supplier 接口代表一个延迟执行的计算，只有在调用 get 方法时才会执行计算。</li><li><strong>Optional 类：</strong> Optional 类中的方法都是延迟执行的，例如 map、flatMap 等方法。</li><li><strong>CompletableFuture 类：</strong> CompletableFuture 类中的异步操作也是延迟执行的，只有在调用 get 方法或者其他终端方法时才会执行异步计算。</li></ul></li><li><p>案例</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用 Supplier 接口实现延迟执行</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 get 方法时才执行计算</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Calculating...</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：10</span>

<span class="token comment">// 使用 Stream API 实现延迟执行</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Mapping: &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 forEach 方法时才执行中间操作</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Mapping: apple，Mapping: banana，Mapping: orange，APPLE，BANANA，ORANGE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，使用 Supplier 接口和 Stream API 实现了延迟执行。在调用 get 方法或 forEach 方法时，才执行实际的计算操作，这样可以实现惰性计算的效果。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><h3 id="命名规律" tabindex="-1"><a class="header-anchor" href="#命名规律"><span>命名规律</span></a></h3><ul><li>带有 Unary 是一元的意思，表示一个参数</li><li>带有 Bi 或 Binary 是二元的意思，表示两个参数</li><li>Ternary 三元</li><li>Quatenary 四元</li></ul><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用"><span>方法引用</span></a></h3><p>用于简化Lambda表达式，能够直接引用已经存在的方法或构造函数作为函数对象。</p><h4 id="类名-静态方法" tabindex="-1"><a class="header-anchor" href="#类名-静态方法"><span>类名::静态方法</span></a></h4><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>引用静态方法</td><td><code>ClassName::staticMethodName</code></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">=</span> x <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 静态方法引用</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此静态方法</li><li>因此这个静态方法需要什么参数，函数对象也提供相应的参数即可</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type2Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
            需求：挑选出所有男性学生
         */</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;周芷若&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;宋青书&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Type2Test</span><span class="token operator">::</span><span class="token function">isMale</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">record</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>filter 这个高阶函数接收的函数类型（Predicate）是：一个 T 类型的入参，一个 boolean 的返回值 <ul><li>因此我们只需要给它提供一个相符合的 lambda 对象即可</li></ul></li><li>isMale 这个静态方法有入参 Student 对应 T，有返回值 boolean 也能对应上，所以可以直接使用</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Student[name=张无忌, sex=男]
Student[name=宋青书, sex=男]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类名-非静态方法" tabindex="-1"><a class="header-anchor" href="#类名-非静态方法"><span>类名::非静态方法</span></a></h4><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>引用特定对象的实例方法</td><td><code>object::instanceMethodName</code></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> equalsIgnoreCase <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> str1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实例方法引用</span>
<span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> equalsIgnoreCase <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此非静态方法</li><li>因此这个函数对象需要提供一个额外的对象参数，以便能够调用此非静态方法</li><li>非静态方法的剩余参数，与函数对象的剩余参数一一对应</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type3Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">highOrder</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">highOrder</span><span class="token punctuation">(</span><span class="token class-name">Type3</span> lambda<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">interface</span> <span class="token class-name">Type3</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; say: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中函数类型的</p><ul><li>参数1 对应着 hello 方法所属类型 Student</li><li>参数2 对应着 hello 方法自己的参数 String</li><li>返回值对应着 hello 方法自己的返回值 String</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>张三 say: 你好
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="对象-非静态方法" tabindex="-1"><a class="header-anchor" href="#对象-非静态方法"><span>对象::非静态方法</span></a></h4><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>引用任意对象的实例方法</td><td><code>ClassName::instanceMethodName</code></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> length <span class="token operator">=</span> str <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 对象方法引用</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> length <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此非静态方法</li><li>因为对象已提供，所以不必作为函数对象参数的一部分</li><li>非静态方法的剩余参数，与函数对象的剩余参数一一对应</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type4Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Util</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;周芷若&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;宋青书&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>util<span class="token operator">::</span><span class="token function">isMale</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>util<span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">record</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> student<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>较为典型的一个应用就是 <code>System.out</code> 对象中的非静态方法，最后的输出可以修改为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原因：</p><ul><li><code>forEach</code> 这个高阶函数接收的函数类型（<code>Consumer</code>）是一个 <code>T</code> 类型参数，<code>void</code> 无返回值</li><li>而 <code>System.out</code> 对象中有非静态方法 <code>void println(Object x)</code> 与之一致，因此可以将此方法化为 <code>lambda</code> 对象给 <code>forEach</code> 使用</li></ul><h4 id="类名-new" tabindex="-1"><a class="header-anchor" href="#类名-new"><span>类名::new</span></a></h4><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>引用构造函数</td><td><code>ClassName::new</code></td></tr><tr><td>引用数组构造函数</td><td><code>TypeName[]::new</code></td></tr><tr><td>引用超类的构造函数</td><td><code>SuperClassName::new</code></td></tr></tbody></table><ol><li>构造方法引用</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">&gt;</span></span> stringBuilderSupplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 构造方法引用</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">&gt;</span></span> stringBuilderSupplier <span class="token operator">=</span> <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数组构造方法引用</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> arrayCreator <span class="token operator">=</span> size <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 数组构造方法引用</span>
<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> arrayCreator <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>超类构造方法引用</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectCreator <span class="token operator">=</span> str <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 超类构造方法引用</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectCreator <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数类型应满足</p><ul><li>参数部分与构造方法参数一致</li><li>返回值类型与构造方法所在类一致</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type5Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;某人&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Student{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">interface</span> <span class="token class-name">Type51</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">interface</span> <span class="token class-name">Type52</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">interface</span> <span class="token class-name">Type53</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Type51</span><span class="token punctuation">)</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Type52</span><span class="token punctuation">)</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Type53</span><span class="token punctuation">)</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Type51</span> creator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Type52</span> creator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Type53</span> creator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this-非静态方法" tabindex="-1"><a class="header-anchor" href="#this-非静态方法"><span>this::非静态方法</span></a></h4><p>形式2的特例，只能在类内部使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type6Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Util</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UtilExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        util<span class="token punctuation">.</span><span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;周芷若&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;宋青书&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">record</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">boolean</span> <span class="token function">isFemale</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stream
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">isMale</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="super-非静态方法" tabindex="-1"><a class="header-anchor" href="#super-非静态方法"><span>super::非静态方法</span></a></h4><p>形式2的特例，只能在类内部使用（用在要用 <code>super</code> 区分重载方法时）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type6Test</span> <span class="token punctuation">{</span>
    
    <span class="token comment">//...</span>
    
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UtilExt</span> <span class="token keyword">extends</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">hiOrder</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stream
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token operator">::</span><span class="token function">isFemale</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特例" tabindex="-1"><a class="header-anchor" href="#特例"><span>特例</span></a></h4><p>函数接口和方法引用之间，可以差一个返回值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> task1 <span class="token operator">=</span> <span class="token class-name">ExceptionTest</span><span class="token operator">::</span><span class="token function">print1</span><span class="token punctuation">;</span>
        <span class="token class-name">Runnable</span> task2 <span class="token operator">=</span> <span class="token class-name">ExceptionTest</span><span class="token operator">::</span><span class="token function">print2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task1 running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task2 running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Runnable</code> 接口不需要返回值，而实际的函数对象多出了返回值，不影响使用</p><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3><p>闭包函数是指在一个函数内部定义的函数，并且该内部函数可以访问到外部函数的变量。这意味着，闭包函数可以“记住”并访问其创建时所在环境的状态。即<strong>函数对象</strong>与<strong>外界变量</strong>绑定在一起，形成的整体。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="案例1"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClosureExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// Lambda表达式和匿名内部类可以捕获外部作用域的变量，因此它们可以看作是闭包函数的实现</span>
        <span class="token comment">// 定义一个Lambda表达式作为闭包函数</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x = &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在定义外部调用闭包函数</span>
        runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：x = 10</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="案例2"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClosureTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">Lambda</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token function">highOrder</span><span class="token punctuation">(</span>y <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">highOrder</span><span class="token punctuation">(</span><span class="token class-name">Lambda</span> lambda<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点</p><ul><li>局部变量 x 必须是 final 或 effective final 的，effective final 意思就是，虽然没有用 final 修饰，但就像是用 final 修饰了一样，不能重新赋值，否则就语法错误。</li><li>闭包是一种给函数执行提供数据的手段，函数执行既可以使用函数入参，还可以使用闭包变量。</li></ul><h3 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化"><span>柯里化</span></a></h3><p>柯里化（Currying）是一种将多参数函数转换为一系列单参数函数的技术。</p><p>如果一个函数有多个参数，可以将这个函数转换为一个接受单个参数并返回另一个函数的序列。每个返回的函数都接受下一个参数，并返回另一个函数，直到接收到所有参数为止，最后返回最终结果。</p><p>好处：</p><ul><li><strong>增加函数的灵活性：</strong> 柯里化可以将多参数函数转换为接受单个参数的函数序列，这样可以更灵活地调用函数。例如，可以先传递一部分参数，然后稍后再传递其余参数，这使得函数的使用更加灵活。</li><li><strong>提高代码的可读性和模块化：</strong> 使用柯里化可以将函数的逻辑分解为一系列单一功能的函数，这样使得代码更易于理解和维护。每个函数只负责处理一个参数，降低了函数的复杂性。</li><li><strong>实现部分应用：</strong> 柯里化使得部分应用变得更加容易。部分应用是指固定函数的一部分参数，并返回一个接受剩余参数的新函数。这在需要多次调用带有相同参数的函数时非常有用。</li><li><strong>函数组合：</strong> 柯里化与函数组合结合使用时可以实现强大的功能。函数组合是指将一个函数的输出作为另一个函数的输入，柯里化可以使得这种组合更加简洁和灵活。</li></ul><hr><p>前后对比:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="函数定义"><pre class="language-java"><code><span class="token comment">// 不使用柯里化</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用柯里化模拟</span>
<span class="token keyword">public</span> <span class="token class-name">IntFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> y <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中创建了一个 <code>IntFunction&lt;Integer&gt;</code> 类型的方法 <code>curriedAdd</code>，它接受一个整数作为参数，并返回一个接受另一个整数并返回整数的函数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="函数使用"><pre class="language-java"><code><span class="token comment">// 不使用柯里化</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接传递所有参数</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span>

<span class="token comment">// 使用柯里化模拟</span>
<span class="token class-name">IntFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> addThree <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先传递部分参数</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> addThree<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 然后传递剩余参数</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在Java中柯里化不如在函数式编程语言中那么直接，但通过使用 lambda 表达式和函数接口，我们可以实现类似柯里化的效果，使得函数的使用更加灵活和方便。</p></blockquote><hr><p>一些示例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurryingTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">highOrder</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> b <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 完全展开</span>
        <span class="token class-name">Step1</span> step1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Step2</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 简写</span>
        step1 <span class="token operator">=</span> a <span class="token operator">-&gt;</span> b <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">highOrder</span><span class="token punctuation">(</span><span class="token class-name">Step1</span> step1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Step2</span> step2 <span class="token operator">=</span> step1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>step2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>step2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">interface</span> <span class="token class-name">Step1</span> <span class="token punctuation">{</span>
        <span class="token class-name">Step2</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">interface</span> <span class="token class-name">Step2</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurryingTest2</span> <span class="token punctuation">{</span>

    <span class="token comment">// 柯里化函数，接受两个参数并返回它们的和</span>
    <span class="token keyword">static</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> add <span class="token operator">=</span>
            x <span class="token operator">-&gt;</span> y <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一次调用返回一个函数</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> add2 <span class="token operator">=</span> add<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第二次调用返回最终结果</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> add2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Result: 5</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurryingTest3</span> <span class="token punctuation">{</span>
    <span class="token comment">// 柯里化函数，接受商品价格并返回一个函数</span>
    <span class="token keyword">static</span> <span class="token class-name">DoubleFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Function</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">DoubleFunction</span><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> calculateTotalPrice <span class="token operator">=</span>
            price <span class="token operator">-&gt;</span> quantity <span class="token operator">-&gt;</span> discountRate <span class="token operator">-&gt;</span> price <span class="token operator">*</span> quantity <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> discountRate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计算价格的柯里化函数</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">DoubleFunction</span><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> calculatePrice <span class="token operator">=</span> calculateTotalPrice<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 商品价格为10元</span>

        <span class="token comment">// 第一次调用，传递商品数量</span>
        <span class="token class-name">DoubleFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> calculateWithQuantity <span class="token operator">=</span> calculatePrice<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 购买5件商品</span>

        <span class="token comment">// 第二次调用，传递折扣率</span>
        <span class="token keyword">double</span> totalPrice <span class="token operator">=</span> calculateWithQuantity<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10% 折扣率</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Total Price: &quot;</span> <span class="token operator">+</span> totalPrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Total Price: 45.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数"><span>高阶函数</span></a></h3><p>定义：该函数是其它函数对象的使用者</p><p>作用：</p><ul><li>将<strong>通用、复杂</strong>的逻辑隐含在<strong>高阶函数</strong>内</li><li>将<strong>易变、未定</strong>的逻辑放在外部的<strong>函数对象</strong>中</li></ul><p>案例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">IntBinaryOperator</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">operateOnNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">IntBinaryOperator</span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义一个加法函数</span>
        <span class="token class-name">IntBinaryOperator</span> addition <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        
        <span class="token comment">// 使用 operateOnNumbers 函数调用加法函数</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">operateOnNumbers</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> addition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Result of addition: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Result of addition: 8</span>
        
        <span class="token comment">// 定义一个乘法函数</span>
        <span class="token class-name">IntBinaryOperator</span> multiplication <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
        
        <span class="token comment">// 使用 operateOnNumbers 函数调用乘法函数</span>
        result <span class="token operator">=</span> <span class="token function">operateOnNumbers</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> multiplication<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Result of multiplication: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Result of multiplication: 15</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operateOnNumbers</code> 函数就是一个高阶函数，它接受两个整数和一个 <code>IntBinaryOperator</code> 类型的操作函数作为参数。然后，根据传入的操作函数，将两个整数应用到这个操作函数上，并返回结果。</p><p>其中定义了两个操作函数，一个用于加法，另一个用于乘法，并通过 <code>operateOnNumbers</code> 函数分别调用它们。这样就实现了在不同的情况下，使用同一个高阶函数来执行不同的操作。</p><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h2><p><a href="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/StreamAPI.html" download="StreamAPI.html">下载StreamAPI速查表</a></p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><ol><li><p>一次使用：流只能使用一次（终结方法只能调用一次）</p></li><li><p>两类操作：</p><ol><li>中间操作，lazy 懒惰的</li><li>终结操作，eager 迫切的</li></ol></li><li><p>方法参数都是函数式接口类型</p></li><li><p>Stream 不保存数据，不改变数据源</p><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/stream.png" alt="Stream操作流程" tabindex="0" loading="lazy"><figcaption>Stream操作流程</figcaption></figure></li></ol><h3 id="基本流" tabindex="-1"><a class="header-anchor" href="#基本流"><span>基本流</span></a></h3><p>基本类型流指 IntStream、LongStream 和 DoubleStream，它们在做数值计算时有更好的性能。</p><p>转换成基本流</p><ul><li>mapToInt</li><li>mapToLong</li><li>mapToDouble</li><li>flatMapToInt</li><li>flatMapToLong</li><li>flatMapToDouble</li><li>mapMultiToInt</li><li>mapMultiToLong</li><li>mapMultiToDouble</li></ul><p>基本流转对象流</p><ul><li>mapToObj</li><li>boxed</li></ul><h3 id="效率" tabindex="-1"><a class="header-anchor" href="#效率"><span>效率</span></a></h3><h4 id="数组求和" tabindex="-1"><a class="header-anchor" href="#数组求和"><span>数组求和</span></a></h4><ul><li>primitive 用 loop 循环对 int 求和</li><li>intStream 用 IntStream 对 int 求和</li><li>boxed 用 loop 循环对 Integer 求和</li><li>stream 用 Stream 对 Integer 求和</li></ul>`,127),k=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>25.424</td><td>± 0.782</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>47.482</td><td>± 1.145</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>72.457</td><td>± 4.136</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>465.141</td><td>± 4.891</td><td>ns/op</td></tr></tbody></table>",1),d=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>270.556</td><td>± 1.277</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>292.467</td><td>± 10.987</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>583.929</td><td>± 57.338</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>5948.294</td><td>± 2209.211</td><td>ns/op</td></tr></tbody></table>",1),r=n('<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>2681.651</td><td>± 12.614</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>2718.408</td><td>± 52.418</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>6391.285</td><td>± 358.154</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>44414.884</td><td>± 3213.055</td><td>ns/op</td></tr></tbody></table><p>结论：</p><ul><li>优先挑选基本流（IntStream 等）</li><li>应当避免普通流（Stream）性能与其它几种相比，慢一个数量级</li></ul><h4 id="求最大值" tabindex="-1"><a class="header-anchor" href="#求最大值"><span>求最大值</span></a></h4><ul><li>custom 自定义多线程并行求最大值</li><li>parallel 并行流求最大值</li><li>sequence 串行流求最大值</li><li>primitive loop 循环求最大值</li></ul>',5),m=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>39619.796</td><td>± 1263.036</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>6754.239</td><td>± 79.894</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>29.538</td><td>± 3.056</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>80.170</td><td>± 1.940</td><td>ns/op</td></tr></tbody></table>",1),v=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>41656.093</td><td>± 1537.237</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>11218.573</td><td>± 1994.863</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>2217.562</td><td>± 80.981</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>5682.482</td><td>± 264.645</td><td>ns/op</td></tr></tbody></table>",1),b=n('<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>194984.564</td><td>± 25794.484</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>298940.794</td><td>± 31944.959</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>325178.873</td><td>± 81314.981</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>618274.062</td><td>± 5867.812</td><td>ns/op</td></tr></tbody></table><p>并行流</p><ul><li>相对自己用多线程实现分而治之更简洁</li><li>只有在数据量非常大时，才能充分发力，数据量少，还不如用串行流</li></ul><h4 id="并行-发-收集" tabindex="-1"><a class="header-anchor" href="#并行-发-收集"><span>并行（发）收集</span></a></h4>',4),g=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>1312.389</td><td>± 90.683</td><td>ns/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>1776.391</td><td>± 255.271</td><td>ns/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>1727.739</td><td>± 28.821</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>27654.004</td><td>± 496.970</td><td>ns/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>16320.113</td><td>± 344.766</td><td>ns/op</td></tr></tbody></table>",1),h=n("<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>211526.546</td><td>± 13549.703</td><td>ns/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>203794.146</td><td>± 3525.972</td><td>ns/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>237688.651</td><td>± 7593.483</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>527203.976</td><td>± 3496.107</td><td>ns/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>369630.728</td><td>± 20549.731</td><td>ns/op</td></tr></tbody></table>",1),y=n(`<table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ms/op)</th><th>Error (ms/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>69.154</td><td>± 3.456</td><td>ms/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>83.815</td><td>± 2.307</td><td>ms/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>103.585</td><td>± 0.834</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>167.032</td><td>± 15.406</td><td>ms/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>52.326</td><td>± 1.501</td><td>ms/op</td></tr></tbody></table><p>并行（发）收集</p><ul><li>sequence 是一个容器单线程收集，数据量少时性能占优</li><li>parallelNoConcurrent 是多个容器多线程并行收集，时间应该花费在合并容器上，性能最差</li><li>parallelConcurrent 是一个容器多线程并发收集，在数据量大时性能较优</li></ul><h3 id="常见操作" tabindex="-1"><a class="header-anchor" href="#常见操作"><span>常见操作</span></a></h3><h4 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h4><p>根据已有的数组构建流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据已有的 Collection 构建流（包括 List，Set 等）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把一个对象变成流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把多个对象变成流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>合并2个流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>流<span class="token number">1</span><span class="token punctuation">,</span> 流<span class="token number">2</span><span class="token punctuation">)</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成" tabindex="-1"><a class="header-anchor" href="#生成"><span>生成</span></a></h4><p>生成从 0 ~ 9 的数字</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>iterate</code>定制化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 生成奇数序列</span>
<span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数1 是初始值</li><li>参数2 是一个特殊 Function，即参数类型与返回值相同，它会根据上一个元素 x 的值计算出当前元素</li><li>第一种需要用 <code>limit</code> 限制元素个数</li></ul><blockquote><p>iterate 的特点是根据上一个元素计算当前元素，如果不需要依赖上一个元素，可以改用 generate 方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 生成5个随机整数</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">// 更简单的方法</span>
<span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">// 指定上下限：生成从 0~9 的100个随机数</span>
<span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="截取" tabindex="-1"><a class="header-anchor" href="#截取"><span>截取</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>	<span class="token comment">// 跳过1个元素</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment">// 限制处理的元素个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.dropWhile()</code> 是 drop 流中元素，直到条件不成立，留下剩余元素</li><li><code>.takeWhile()</code> 是 take 流中元素，直到条件不成立，舍弃剩余元素</li></ul><h4 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤"><span>过滤</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token class-name">String</span> cname<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;草莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Strawberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;桑葚&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mulberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;紫色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;杨梅&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Waxberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;核桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Walnut&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;坚果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;棕色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;草莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Peanut&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;坚果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;棕色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;蓝莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Blueberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/filter.png" alt="莓果" tabindex="0" loading="lazy"><figcaption>莓果</figcaption></figure><ul><li>找到所有浆果</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span>category<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;浆果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>找到蓝色浆果</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 方法1</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;浆果&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 方法2：让每个 lambda 只做一件事，两次 filter 相对于并且关系</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span>category<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;浆果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 方法3：让每个 lambda 只做一件事，不过比方法2强的地方可以 or，and，nagate 运算</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span>category<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;浆果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="映射" tabindex="-1"><a class="header-anchor" href="#映射"><span>映射</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/map.png" alt="image-20240526173943535" tabindex="0" loading="lazy"><figcaption>image-20240526173943535</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">cname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;酱&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="降维" tabindex="-1"><a class="header-anchor" href="#降维"><span>降维</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/flatmap.png" alt="image-20240526180747155" tabindex="0" loading="lazy"><figcaption>image-20240526180747155</figcaption></figure><p>案例1：把坚果和浆果两个集合变成了含六个元素的水果流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
        <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;草莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Strawberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;桑葚&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mulberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;紫色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;杨梅&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Waxberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;蓝莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Blueberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浆果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;核桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Walnut&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;坚果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;棕色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">&quot;草莓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Peanut&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;坚果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;棕色&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例2：把两个有三个元素的订单流，变成了一个有六个元素的商品流</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">6499</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HUAWEI MateBook 14s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">6999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HUAWEI Mate 60 Pro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">1488</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HUAWEI WATCH GT 4&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">8999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple MacBook Air 13&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">7999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple iPhone 15 Pro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">2999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple Watch Series 9&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>order <span class="token operator">-&gt;</span> order<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="排序、去重" tabindex="-1"><a class="header-anchor" href="#排序、去重"><span>排序、去重</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="当前数据"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;独孤求败&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;令狐冲&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;风清扬&quot;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;东方不败&quot;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;方证&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;任我行&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;冲虚&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;向问天&quot;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">&quot;不戒&quot;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先按 strength 武力排序（逆序），武力相同的，按姓名长度排序（正序）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 仅使用 lambda </span>
<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">strength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">strength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">nameLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">nameLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 方法引用</span>
<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>
    <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Hero</span><span class="token operator">::</span><span class="token function">strength</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">thenComparingInt</span><span class="token punctuation">(</span><span class="token class-name">Hero</span><span class="token operator">::</span><span class="token function">nameLength</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>comparingInt</code> 接收一个 key 提取器（说明按对象中哪部分来比较），返回一个比较器</li><li><code>reversed</code> 返回一个顺序相反的比较器</li><li><code>thenComparingInt</code> 接收一个 key 提取器，返回一个新比较器，新比较器在原有比较器结果相等时执行新的比较逻辑</li></ul><h4 id="查找、判断" tabindex="-1"><a class="header-anchor" href="#查找、判断"><span>查找、判断</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 找到流中任意一个 偶数</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意 <code>findAny</code> 返回的是 <code>OptionalInt</code> 对象，因为可能流中不存在偶数</li><li>对于 <code>OptionalInt</code> 对象，一般需要用 <code>ifPresent</code> 或 <code>orElse</code>（提供默认值）来处理</li></ul><p>与 <code>findAny</code> 比较类似的是 <code>firstFirst</code>，它俩的区别</p><ul><li><code>findAny</code> 是找在流中任意位置的元素，不需要考虑顺序，对于上例返回 6 也是可以的</li><li><code>findFirst</code> 是找第一个出现在元素，需要考虑顺序，对于上例只能返回 4</li><li><code>findAny</code> 在顺序流中与 <code>findFirst</code> 表现相同，区别在于并行流下会更快</li></ul><p>判断流中是否存在任意一个偶数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>它返回的是 boolean 值，可以直接用来判断</li></ul><p>判断流是否全部是偶数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>它返回的是 boolean 值，可以直接用来判断</li></ul><p>判断流是否全部不是偶数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>noneMatch</code> 与 <code>allMatch</code> 含义恰好相反</li></ul><h4 id="化简" tabindex="-1"><a class="header-anchor" href="#化简"><span>化简</span></a></h4><p><code>reduce(init, (p,x) -&gt; r)</code></p><ul><li>init 代表初始值</li><li><code>(p,x) -&gt; r</code> 是一个 BinaryOperator，作用是根据上次化简结果 p 和当前元素 x，得到本次化简结果 r</li></ul><p>这样两两化简，可以将流中的所有元素合并成一个结果</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用累加器函数计算总和</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">+</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sum: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Sum: 15</span>

<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;from&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reduce&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用初始值和累加器函数将字符串连接成一个单一的字符串</span>
<span class="token class-name">String</span> concatenatedString <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Concatenated String: &quot;</span> <span class="token operator">+</span> concatenatedString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Concatenated String:  Hello world from reduce</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收集" tabindex="-1"><a class="header-anchor" href="#收集"><span>收集</span></a></h4><h5 id="collect" tabindex="-1"><a class="header-anchor" href="#collect"><span>collect</span></a></h5><p><code>collect(supplier, accumulator, combiner)</code></p><ul><li><code>supplier</code> 是描述如何创建收集容器 c ：<code>()-&gt; c</code></li><li><code>accumulator</code> 是描述如何向容器 c 添加元素 x：<code>(c, x) -&gt; void</code></li><li><code>combiner</code> 是描述如何合并两个容器：<code>(c1, c2) -&gt; void</code><ul><li>串行流下不需要合并容器</li><li>并行流如果用的是并发容器，也不需要合并</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> collectedList <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 可以直接.toList()</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;collectedList = &quot;</span> <span class="token operator">+</span> collectedList<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// collectedList = [Alice, Charlie]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="收集器" tabindex="-1"><a class="header-anchor" href="#收集器"><span>收集器</span></a></h5><p>Collectors提供了很多收集器，<a href="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/StreamAPI.html" download="StreamAPI.html">下载StreamAPI速查表</a></p><h5 id="下游收集器" tabindex="-1"><a class="header-anchor" href="#下游收集器"><span>下游收集器</span></a></h5><p>做 groupingBy 分组收集时，组内可能需要进一步的数据收集，称为下游收集器，<a href="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/functional-programming/StreamAPI.html" download="StreamAPI.html">下载StreamAPI速查表</a></p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda"><span>Lambda</span></a></h3><p>Lambda表达式底层是通过<strong>invokedynamic指令</strong>和<strong>动态创建的私有方法</strong>来实现的。invokedynamic指令允许在运行时动态解析方法调用。而Lambda表达式则是通过javac编译器在编译时生成一个私有静态方法,并将这个方法作为目标方法传递给invokedynamic指令。</p><p>当一个Lambda表达式被创建时,javac编译器会做以下几件事:</p><ol><li><p>生成私有静态方法</p><ul><li>编译器会为每个Lambda表达式生成一个私有静态方法,并将Lambda的实现代码放入该方法中。</li></ul></li><li><p>生成Lambda$xxxxx类</p><ul><li>编译器会创建一个私有静态内部类，继承自<code>java.lang.Object</code>，并且实现相应的函数式接口，这个内部类称为<code>Lambda$xxxxx</code>类（xxxxx是编号）。</li></ul></li><li><p>实现函数式接口方法</p><ul><li>在Lambda$xxxxx中实现函数式接口的方法,并在其中调用第1步生成的私有静态方法。</li></ul></li><li><p>创建Lambda$xxxxx实例</p><ul><li>在程序使用Lambda表达式的地方,实际上是创建了Lambda$xxxxx类的实例。</li></ul></li><li><p>调用invokedynamic指令</p><ul><li>通过invokedynamic指令动态链接第3步实现的函数式接口方法。</li></ul></li></ol><p>下面是一个简化的Lambda表达式示例,可以更直观地看到其实现过程:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Lambda&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello Lambda&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的代码,javac编译器会完成以下步骤:</p><ol><li>生成一个私有静态方法: <code>private static void lambda$main$0()</code></li><li>生成一个<code>Lambda$1</code>类,实现<code>Runnable</code>接口</li><li>在<code>Lambda$1</code>中实现<code>run()</code>方法,其中调用<code>lambda$main$0()</code></li><li>在<code>main</code>方法中,创建<code>Lambda$1</code>实例,赋值给 <code>r</code></li><li>调用<code>r.run()</code>时,通过<code>invokedynamic</code>指令动态链接到<code>Lambda$1.run()</code>方法</li></ol><h3 id="方法引用-1" tabindex="-1"><a class="header-anchor" href="#方法引用-1"><span>方法引用</span></a></h3><p>和Lambda表达式类似,都是基于invokedynamic指令。但与Lambda不同的是,方法引用更进一步地优化和简化了Lambda表达式的实现。</p><p>当使用方法引用时,javac编译器会执行以下步骤:</p><ol><li><p><strong>生成Lambda$xxxxx类</strong></p><ul><li>与Lambda表达式一样,编译器会为每个方法引用生成一个私有静态内部类<code>Lambda$xxxxx</code>,继承自<code>java.lang.Object</code>。</li></ul></li><li><p><strong>生成静态帮助方法</strong></p><ul><li>编译器会生成一个私有静态帮助方法(private static helper method)作为方法引用的入口点。这个帮助方法会根据不同的方法引用类型(静态方法、实例方法、构造方法、数组构造方法)调用对应的目标方法。</li></ul></li><li><p><strong>在Lambda$xxxxx中实现函数式接口方法</strong></p><ul><li>与Lambda表达式类似,在Lambda$xxxxx类中实现函数式接口的方法,但这次它直接调用第2步生成的帮助方法。</li></ul></li><li><p><strong>创建Lambda$xxxxx实例</strong></p><ul><li>在程序使用方法引用的地方,实际上是创建了Lambda$xxxxx类的实例。</li></ul></li><li><p><strong>调用invokedynamic指令</strong></p><ul><li>通过invokedynamic指令动态链接第3步实现的函数式接口方法。</li></ul></li></ol><p>一个简单的示例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferenceExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 123</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的代码,javac编译器会执行以下步骤:</p><ol><li>生成一个<code>Lambda$1</code>类</li><li>生成一个私有静态帮助方法<code>lambda$main$0</code>,它会调用<code>Integer.parseInt(String)</code>方法</li><li>在<code>Lambda$1</code>类中实现<code>apply</code>方法,调用<code>lambda$main$0</code>帮助方法</li><li>在<code>main</code>方法中,创建<code>Lambda$1</code>实例,赋值给<code>f</code></li><li>调用<code>f.apply(&quot;123&quot;)</code>时,通过<code>invokedynamic</code>指令动态链接到<code>Lambda$1.apply()</code>方法</li></ol><h3 id="闭包-1" tabindex="-1"><a class="header-anchor" href="#闭包-1"><span>闭包</span></a></h3><p>闭包的实现主要依赖于以下两个机制:</p><ol><li><strong>成员内部类</strong></li><li><strong>常量池</strong></li></ol><p>当一个内部类被实例化时,无论是匿名类还是命名内部类,它都会捕获所在外部类实例的引用,这使得内部类可以访问外部类的成员变量和方法。而常量池则用于存储外部变量的值。</p><p>当编译器遇到一个内部类(包括匿名类)时,它会执行以下步骤:</p><ol><li><strong>生成一个独立的.class文件</strong><br> 为内部类生成一个独立的.class文件,文件名格式为&quot;外部类名$内部类名.class&quot;。</li><li><strong>捕获外部类实例引用</strong><br> 在内部类的构造方法中,会捕获并存储一份指向外部类实例的引用。</li><li><strong>捕获外部变量</strong><br> 如果内部类访问了外部类的成员变量,编译器会将这些变量复制到内部类中,并将其标记为final。如果外部变量是实例变量,则直接存储引用;如果是方法参数或局部变量,则将其值存储到内部类的常量池中。</li><li><strong>访问外部变量</strong><br> 当内部类访问外部变量时,实际上是访问存储在自身实例中或常量池中的值。</li></ol><p>这三种情况下闭包(匿名内部类)的底层实现原理虽然都是通过匿名内部类和常量池来实现的,但是在具体的实现细节上还是有一些不同之处。</p><p><strong>情况一</strong>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Runnable</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// 捕获 x 和 y</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下:</p><ol><li><code>x</code>是方法外部的局部变量,被声明为<code>final</code>。</li><li>编译器会将<code>x</code>的值直接复制到匿名内部类的常量池中。</li><li>方法参数<code>y</code>的值也会被复制到匿名内部类的常量池中。</li><li>在运行时,匿名内部类可以直接从常量池中获取<code>x</code>和<code>y</code>的值。</li></ol><p><strong>情况二</strong>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Runnable</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// 捕获 x 和 y</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下:</p><ol><li><code>x</code>是方法内部的局部变量,被声明为<code>final</code>。</li><li>编译器会将<code>x</code>的值复制到匿名内部类的常量池中。</li><li>方法参数<code>y</code>的值也会被复制到匿名内部类的常量池中。</li><li>在运行时,匿名内部类可以直接从常量池中获取<code>x</code>和<code>y</code>的值。</li></ol><p><strong>情况三</strong>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Runnable</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> number<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// 捕获 x 和 y</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下:</p><ol><li><code>Number</code>类的<code>x</code>属性的值被赋给了局部变量<code>x</code>。</li><li>编译器会将局部变量<code>x</code>的值复制到匿名内部类的常量池中。</li><li>方法参数<code>y</code>的值也会被复制到匿名内部类的常量池中。</li><li>在运行时,匿名内部类可以直接从常量池中获取局部变量<code>x</code>和方法参数<code>y</code>的值。</li></ol><p>不同之处在于:</p><ol><li>对于方法外部的局部变量(情况一),编译器会直接将其值复制到常量池中。</li><li>对于方法内部的局部变量(情况二和三),编译器会先将其值赋给一个临时的<code>final</code>变量,然后再将这个<code>final</code>变量的值复制到常量池中。</li></ol><h3 id="stream-1" tabindex="-1"><a class="header-anchor" href="#stream-1"><span>Stream</span></a></h3><p><strong>构建原理</strong></p><p>通常有以下几种方式可以构建Stream:</p><ol><li><p><strong>集合(Collection)</strong><br> 可以通过集合的stream()或parallelStream()方法获取Stream。</p></li><li><p><strong>数组(Array)</strong><br> 可以通过Arrays.stream(array)或Stream.of(array)方法获取Stream。</p></li><li><p><strong>文件(File)</strong><br> 可以通过Files.lines()方法从文件中获取行Stream。</p></li><li><p><strong>生成器(Generator)</strong><br> 可以通过Stream.generate()或Stream.iterate()方法创建无限Stream。</p></li></ol><p>无论哪种构建方式,底层都是创建了一个Spliterator(分割迭代器)来支持Stream的运作。Spliterator负责对数据源进行切分和遍历,Stream只是对Spliterator进行了一层抽象。</p><p><strong>切分原理</strong></p><p>Stream的核心优势之一就是能够进行有效的并行处理,这依赖于数据源能够被合理切分。Stream通过Spliterator来切分数据源:</p><ol><li><p><strong>创建头部节点(Head)</strong><br> 构建Stream时会根据数据源创建一个голов�节点(Head)Spliterator。</p></li><li><p><strong>判断是否需要切分(trySplit)</strong><br> 对当前Spliterator调用trySplit()方法,判断是否需要切分。如果数据源足够大,就可以进行切分,否则就不切分。</p></li><li><p><strong>切分数据源(trySplit)</strong><br> 如果需要切分,则通过trySplit()方法将数据源一分为二,生成一个新的Spliterator作为分支节点(Node)。</p></li><li><p><strong>构建树形结构(binarySplit)</strong><br> 重复上述过程,构建树形结构,直到数据源足够小,即不可再切分。</p></li><li><p><strong>执行并行任务(forEach)</strong><br> 在每个叶节点上执行forEach遍历任务,完成Stream的并行处理。</p></li></ol><p>这种通过平衡树来切分数据源的方式,可以充分利用CPU多核并行处理能力,大大提高了Stream的运行效率。</p><p>不同数据源的切分策略不同,ArrayList通过位移计算进行平均切分,LinkedList通过节点步进切分,IntStream则通过splitRange()切分计算区间。</p>`,124);function f(w,q){const s=o("center");return l(),c("div",null,[u,a(s,null,{default:t(()=>[p("元素个数 100")]),_:1}),k,a(s,null,{default:t(()=>[p("元素个数 1000")]),_:1}),d,a(s,null,{default:t(()=>[p("元素个数 10000")]),_:1}),r,a(s,null,{default:t(()=>[p("元素个数 100")]),_:1}),m,a(s,null,{default:t(()=>[p("元素个数 10000")]),_:1}),v,a(s,null,{default:t(()=>[p("元素个数 1000000")]),_:1}),b,a(s,null,{default:t(()=>[p("元素个数 100")]),_:1}),g,a(s,null,{default:t(()=>[p("元素个数 10000")]),_:1}),h,a(s,null,{default:t(()=>[p("元素个数 1000000")]),_:1}),y])}const j=e(i,[["render",f],["__file","functional-programming.html.vue"]]),L=JSON.parse('{"path":"/basic/jdk-new-feature/functional-programming.html","title":"函数式编程","lang":"zh-CN","frontmatter":{"title":"函数式编程","shortTitle":"函数式编程","description":"Java函数式编程（Lambda、Stream）","date":"2024-05-06T09:06:01.000Z","categories":["Java","basic"],"tags":["Java"],"headerDepth":4,"order":1},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"函数化对象","slug":"函数化对象","link":"#函数化对象","children":[]},{"level":3,"title":"行为参数化","slug":"行为参数化","link":"#行为参数化","children":[]},{"level":3,"title":"延迟执行","slug":"延迟执行","link":"#延迟执行","children":[]}]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"命名规律","slug":"命名规律","link":"#命名规律","children":[]},{"level":3,"title":"方法引用","slug":"方法引用","link":"#方法引用","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"柯里化","slug":"柯里化","link":"#柯里化","children":[]},{"level":3,"title":"高阶函数","slug":"高阶函数","link":"#高阶函数","children":[]}]},{"level":2,"title":"Stream","slug":"stream","link":"#stream","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"基本流","slug":"基本流","link":"#基本流","children":[]},{"level":3,"title":"效率","slug":"效率","link":"#效率","children":[]},{"level":3,"title":"常见操作","slug":"常见操作","link":"#常见操作","children":[]}]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"Lambda","slug":"lambda","link":"#lambda","children":[]},{"level":3,"title":"方法引用","slug":"方法引用-1","link":"#方法引用-1","children":[]},{"level":3,"title":"闭包","slug":"闭包-1","link":"#闭包-1","children":[]},{"level":3,"title":"Stream","slug":"stream-1","link":"#stream-1","children":[]}]}],"git":{"createdTime":1716883141000,"updatedTime":1716973610000,"contributors":[{"name":"Zhiyun Qin","email":"2368932388@qq.com","commits":1}]},"readingTime":{"minutes":29.07,"words":8722},"filePathRelative":"basic/jdk-new-feature/functional-programming.md","localizedDate":"2024年5月6日"}');export{j as comp,L as data};
