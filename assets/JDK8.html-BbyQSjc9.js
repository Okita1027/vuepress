import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,c as p,a as n,d as o,w as c,b as a,o as l,e as i}from"./app-NwmlIrjp.js";const u={},k=a(`<h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>Interface</span></a></h2><ul><li><code>default</code>修饰的方法，是普通实例方法，可以用<code>this</code>调用，可以被子类继承、重写。</li><li><code>static</code>修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用<code>Interface</code>调用。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceNew</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;interface提供的方式实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;interface default方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//须要实现类重写</span>
    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceNew1</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;InterfaceNew1 default方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有一个类既实现了 <code>InterfaceNew</code> 接口又实现了 <code>InterfaceNew1</code>接口，它们都有<code>def()</code>，并且 <code>InterfaceNew</code> 接口和 <code>InterfaceNew1</code>接口没有继承关系的话，这时必须重写<code>def()</code>。不然编译时会报错。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceNewImpl</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceNew</span> <span class="token punctuation">,</span> <span class="token class-name">InterfaceNew1</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InterfaceNewImpl</span> interfaceNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterfaceNewImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        interfaceNew<span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InterfaceNew1</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java9开始新增 <strong>私有</strong> 接口方法</p></blockquote>`,6),d={id:"函数式编程",tabindex:"-1"},r={class:"header-anchor",href:"#函数式编程"},m=a(`<h2 id="optional" tabindex="-1"><a class="header-anchor" href="#optional"><span>Optional</span></a></h2><p>定义： <code>Optional</code> 是一个容器对象，它可以包含或不包含值。如果包含值，可以通过 <code>get()</code> 方法获取该值；如果不包含值，则表示为空。</p><p>作用：解决NPE，因为它提供了方法来判断值是否为空，并且在获取值时会进行相应的空值检查。</p><h2 id="date-api" tabindex="-1"><a class="header-anchor" href="#date-api"><span>Date API</span></a></h2><h3 id="clock" tabindex="-1"><a class="header-anchor" href="#clock"><span>Clock</span></a></h3><p><code>Clock</code> 用于提供当前时间的访问和获取。它是一个抽象类，可以有多种实现方式，用于在<strong>不同的时区和时钟系统</strong>中提供时间信息。</p><p><code>Clock</code> 提供了一些静态工厂方法用于获取不同的实例化对象。</p><h3 id="zoneid" tabindex="-1"><a class="header-anchor" href="#zoneid"><span>ZoneId</span></a></h3><p>时区（Time Zones）被抽象为 <code>ZoneId</code> 类，并且通过 <code>ZoneId</code> 类可以获取系统中所有可用的时区。Java 8 中引入了新的时区类 <code>ZoneOffset</code> 用于表示固定偏移量的时区，同时还有 <code>ZoneRules</code> 用于管理每个时区的规则。</p><ol><li><strong>ZoneId：</strong> 代表了一个时区的标识符。可以通过 <code>ZoneId.of()</code> 方法获取特定时区的 <code>ZoneId</code> 对象。</li><li><strong>ZoneOffset：</strong> 代表了一个固定偏移量的时区，以小时和分钟表示。例如，东八区的偏移量为+08:00。</li><li><strong>ZoneRules：</strong> 用于管理每个时区的规则，例如夏令时（Daylight Saving Time）的转换规则等。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="Demo"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneOffset</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneRules</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取系统中所有可用的时区</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> availableZoneIds <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Available Zone IDs: &quot;</span> <span class="token operator">+</span> availableZoneIds<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取特定时区的 ZoneId 对象</span>
        <span class="token class-name">ZoneId</span> shanghaiZoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ZoneId for Shanghai: &quot;</span> <span class="token operator">+</span> shanghaiZoneId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取固定偏移量的 ZoneOffset 对象</span>
        <span class="token class-name">ZoneOffset</span> zoneOffset <span class="token operator">=</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ZoneOffset for UTC+08:00: &quot;</span> <span class="token operator">+</span> zoneOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取特定时区的规则信息</span>
        <span class="token class-name">ZoneRules</span> shanghaiZoneRules <span class="token operator">=</span> shanghaiZoneId<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Rules for Shanghai: &quot;</span> <span class="token operator">+</span> shanghaiZoneRules<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zonedatetime" tabindex="-1"><a class="header-anchor" href="#zonedatetime"><span>ZoneDateTime</span></a></h3><p><code>ZonedDateTime</code> 用于表示带时区的日期时间信息。它包含了日期、时间和时区信息，可以精确地表示全球各个时区的日期时间。</p><ul><li><p><strong>带时区信息：</strong> <code>ZonedDateTime</code> 包含了时区信息，可以准确地表示特定时区的日期时间。</p></li><li><p><strong>不可变性：</strong> <code>ZonedDateTime</code> 是不可变的，一旦创建就无法修改其值。</p></li><li><p><strong>线程安全：</strong> <code>ZonedDateTime</code> 是线程安全的，可以安全地在多个线程中共享和使用。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取当前日期时间</span>
<span class="token class-name">ZonedDateTime</span> now <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Current ZonedDateTime: &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据指定的时区获取日期时间</span>
<span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Specified ZonedDateTime: &quot;</span> <span class="token operator">+</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据默认时区获取日期时间</span>
<span class="token class-name">ZonedDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Local ZonedDateTime: &quot;</span> <span class="token operator">+</span> localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localdate" tabindex="-1"><a class="header-anchor" href="#localdate"><span>LocalDate</span></a></h3><p><code>LocalDate</code> 类表示一个不带时区的日期，它由年、月、日组成，用于表示如生日、纪念日等日期信息。<code>LocalDate</code> 提供了丰富的方法用于日期的操作和计算。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前日期</span>
<span class="token class-name">LocalDate</span> birthday <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定日期</span>
<span class="token keyword">int</span> year <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取年份</span>
<span class="token keyword">int</span> month <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取月份</span>
<span class="token keyword">int</span> day <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取日期</span>
<span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取星期几</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localtime" tabindex="-1"><a class="header-anchor" href="#localtime"><span>LocalTime</span></a></h3><p><code>LocalTime</code> 类表示一个不带时区的时间，它由时、分、秒和纳秒组成，用于表示如会议时间、课程时间等时间信息。<code>LocalTime</code> 也提供了丰富的方法用于时间的操作和计算。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前时间</span>
<span class="token class-name">LocalTime</span> lunchTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定时间</span>
<span class="token keyword">int</span> hour <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取小时</span>
<span class="token keyword">int</span> minute <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取分钟</span>
<span class="token keyword">int</span> second <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取秒</span>
<span class="token keyword">int</span> nano <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取纳秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localdatetime" tabindex="-1"><a class="header-anchor" href="#localdatetime"><span>LocalDateTime</span></a></h3><p><code>LocalDateTime</code> 类表示一个不带时区的日期时间，它由日期和时间组成，用于表示如事件发生时间、预约时间等日期时间信息。<code>LocalDateTime</code> 同样提供了丰富的方法用于日期时间的操作和计算。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前日期时间</span>
<span class="token class-name">LocalDateTime</span> eventTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定日期时间</span>
<span class="token class-name">LocalDate</span> date <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取日期部分</span>
<span class="token class-name">LocalTime</span> time <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取时间部分</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>LocalDate</code>、<code>LocalTime</code> 和 <code>LocalDateTime</code> 类是<strong>线程安全</strong>的，并且提供了丰富的方法用于日期、时间和日期时间的操作和计算。用于替代旧的 <code>Date</code> 和 <code>Calendar</code> 类。</p></blockquote><h3 id="jdbc的关联" tabindex="-1"><a class="header-anchor" href="#jdbc的关联"><span>JDBC的关联</span></a></h3><p>现在 jdbc 时间类型和 java8 时间类型对应关系是</p><ol><li><code>Date</code> ---&gt; <code>LocalDate</code></li><li><code>Time</code> ---&gt; <code>LocalTime</code></li><li><code>Timestamp</code> ---&gt; <code>LocalDateTime</code></li></ol><p>而之前统统对应 <code>Date</code>，也只有 <code>Date</code></p><h2 id="多重注解" tabindex="-1"><a class="header-anchor" href="#多重注解"><span>多重注解</span></a></h2><p>多重注解允许在同一个元素上多次使用相同的注解。在使用多重注解时，可以通过在注解声明中使用 <code>@Repeatable</code> 注解来指定其容器注解，从而使得该注解可以重复使用。</p><p>使用方法：</p><ol><li><p>创建一个注解，并在其中使用 <code>@Repeatable</code> 注解指定其容器注解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Roles</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>	<span class="token comment">// 可以应用在类、接口（包括注解类型）、枚举上。</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>	<span class="token comment">// 可以应用在类、接口（包括注解类型）、枚举上。</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Roles</span> <span class="token punctuation">{</span>
    <span class="token class-name">Role</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在同一个元素上使用多次该注解，或者使用容器注解包装多个注解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Roles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><p>容器注解的必要性：</p><p>Java语言规范要求注解在编译后的字节码中只能出现一次。通过定义一个包含注解数组的容器注解，Java编译器可以将多次使用的注解合并到这个容器中，从而在运行时通过反射访问到所有实例。</p><p>多重注解的引入使得开发者能够更灵活地使用注解，尤其是在需要标记多个相同类型的元数据场景下，比如参数验证、权限控制等。</p>`,37);function v(b,f){const s=t("RouteLink");return l(),p("div",null,[k,n("h2",d,[n("a",r,[n("span",null,[o(s,{to:"/basic/jdk-new-feature/functional-programming.html"},{default:c(()=>[i("函数式编程")]),_:1})])])]),m])}const w=e(u,[["render",v],["__file","JDK8.html.vue"]]),y=JSON.parse('{"path":"/basic/jdk-new-feature/JDK8.html","title":"JDK1.8","lang":"zh-CN","frontmatter":{"title":"JDK1.8","shortTitle":"1.8","description":"Java8新特性","date":"2024-05-27T13:09:16.000Z","categories":["Java","basic"],"tags":["Java","JDK"],"headerDepth":5,"index":true,"order":1},"headers":[{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[]},{"level":2,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[]},{"level":2,"title":"Optional","slug":"optional","link":"#optional","children":[]},{"level":2,"title":"Date API","slug":"date-api","link":"#date-api","children":[{"level":3,"title":"Clock","slug":"clock","link":"#clock","children":[]},{"level":3,"title":"ZoneId","slug":"zoneid","link":"#zoneid","children":[]},{"level":3,"title":"ZoneDateTime","slug":"zonedatetime","link":"#zonedatetime","children":[]},{"level":3,"title":"LocalDate","slug":"localdate","link":"#localdate","children":[]},{"level":3,"title":"LocalTime","slug":"localtime","link":"#localtime","children":[]},{"level":3,"title":"LocalDateTime","slug":"localdatetime","link":"#localdatetime","children":[]},{"level":3,"title":"JDBC的关联","slug":"jdbc的关联","link":"#jdbc的关联","children":[]}]},{"level":2,"title":"多重注解","slug":"多重注解","link":"#多重注解","children":[]}],"git":{"createdTime":1716883141000,"updatedTime":1716973610000,"contributors":[{"name":"Zhiyun Qin","email":"2368932388@qq.com","commits":1}]},"readingTime":{"minutes":5.43,"words":1629},"filePathRelative":"basic/jdk-new-feature/JDK8.md","localizedDate":"2024年5月27日"}');export{w as comp,y as data};
