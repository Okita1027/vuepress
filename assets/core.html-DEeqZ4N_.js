import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,b as s}from"./app-NwmlIrjp.js";const l={},r=s(`<h1 id="初识docker" tabindex="-1"><a class="header-anchor" href="#初识docker"><span>初识Docker</span></a></h1><h2 id="什么是docker" tabindex="-1"><a class="header-anchor" href="#什么是docker"><span>什么是Docker</span></a></h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="应用部署的环境问题" tabindex="-1"><a class="header-anchor" href="#应用部署的环境问题"><span>应用部署的环境问题</span></a></h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171604593.png" alt="image.png" loading="lazy"><br> 例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="docker解决依赖兼容问题" tabindex="-1"><a class="header-anchor" href="#docker解决依赖兼容问题"><span>Docker解决依赖兼容问题</span></a></h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？<br> Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li><li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605369.png" alt="image.png" loading="lazy"><br> 这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。<br> 虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="docker解决操作系统环境差异" tabindex="-1"><a class="header-anchor" href="#docker解决操作系统环境差异"><span>Docker解决操作系统环境差异</span></a></h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171614469.png" alt="image" loading="lazy"><br> 结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><ol><li>应用调用操作系统应用（函数库），实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ol><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605116.png" alt="image.png" loading="lazy"><br> 此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605721.png" alt="image.png" loading="lazy"><br> Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605153.png" alt="image.png" loading="lazy"></p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="docker和虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#docker和虚拟机的区别"><span>Docker和虚拟机的区别</span></a></h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。<br> 两者有什么差异呢？<br><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。<br><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605885.png" alt="image.png" loading="lazy"><br> 对比来看：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605181.png" alt="image.png" loading="lazy"><br> 小结：<br> Docker和虚拟机的差异：</p><ul><li>docker是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h2 id="docker架构" tabindex="-1"><a class="header-anchor" href="#docker架构"><span>Docker架构</span></a></h2><h3 id="镜像和容器" tabindex="-1"><a class="header-anchor" href="#镜像和容器"><span>镜像和容器</span></a></h3><p>Docker中有几个重要的概念：<br><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。<br><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。<br> 一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。<br> 而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。<br><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605794.png" alt="image.png" loading="lazy"><br> 例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="dockerhub" tabindex="-1"><a class="header-anchor" href="#dockerhub"><span>DockerHub</span></a></h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</li><li>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub" target="_blank" rel="noopener noreferrer">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener noreferrer">阿里云镜像库</a>等。</li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605503.png" alt="image.png" loading="lazy"></p><h3 id="docker架构-1" tabindex="-1"><a class="header-anchor" href="#docker架构-1"><span>Docker架构</span></a></h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。<br> Docker是一个CS架构的程序，由两部分组成：</p><ul><li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171605266.png" alt="image.png" loading="lazy"></p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li>服务端：接收命令或远程请求，操作镜像或容器</li><li>客户端：发送命令或者请求到Docker服务端</li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker"><span>安装Docker</span></a></h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此在CentOS下安装Docker：参考《Centos7安装Docker》</p><h1 id="docker的基本操作" tabindex="-1"><a class="header-anchor" href="#docker的基本操作"><span>Docker的基本操作</span></a></h1><h2 id="常用命令一览" tabindex="-1"><a class="header-anchor" href="#常用命令一览"><span>常用命令一览</span></a></h2><p><a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener noreferrer">Use the Docker command line</a></p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker pull</td><td>拉取镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/pull/" target="_blank" rel="noopener noreferrer">docker pull</a></td></tr><tr><td>docker push</td><td>推送镜像到DockerRegistry</td><td><a href="https://docs.docker.com/engine/reference/commandline/push/" target="_blank" rel="noopener noreferrer">docker push</a></td></tr><tr><td>docker images</td><td>查看本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/images/" target="_blank" rel="noopener noreferrer">docker images</a></td></tr><tr><td>docker rmi</td><td>删除本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/rmi/" target="_blank" rel="noopener noreferrer">docker rmi</a></td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td><td><a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noopener noreferrer">docker run</a></td></tr><tr><td>docker stop</td><td>停止指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/stop/" target="_blank" rel="noopener noreferrer">docker stop</a></td></tr><tr><td>docker start</td><td>启动指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/start/" target="_blank" rel="noopener noreferrer">docker start</a></td></tr><tr><td>docker restart</td><td>重新启动容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/restart/" target="_blank" rel="noopener noreferrer">docker restart</a></td></tr><tr><td>docker rm</td><td>删除指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/rm/" target="_blank" rel="noopener noreferrer">docker rm</a></td></tr><tr><td>docker ps</td><td>查看容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/ps/" target="_blank" rel="noopener noreferrer">docker ps</a></td></tr><tr><td>docker logs</td><td>查看容器运行日志</td><td><a href="https://docs.docker.com/engine/reference/commandline/logs/" target="_blank" rel="noopener noreferrer">docker logs</a></td></tr><tr><td>docker exec</td><td>进入容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/exec/" target="_blank" rel="noopener noreferrer">docker exec</a></td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td><td><a href="https://docs.docker.com/engine/reference/commandline/save/" target="_blank" rel="noopener noreferrer">docker save</a></td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noopener noreferrer">docker load</a></td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/inspect/" target="_blank" rel="noopener noreferrer">docker inspect</a></td></tr></tbody></table><p>图中命令的关系：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606204.png" alt="image.png" loading="lazy"><br> 默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Docker开机自启</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># Docker容器开机自启</span>
<span class="token function">docker</span> update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">[</span>容器名/容器id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令别名" tabindex="-1"><a class="header-anchor" href="#命令别名"><span>命令别名</span></a></h3><p>给常用Docker命令起别名，方便我们访问：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改/root/.bashrc文件</span>
<span class="token function">vi</span> /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># .bashrc</span>

<span class="token comment"># User specific aliases and functions</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rm</span><span class="token operator">=</span><span class="token string">&#39;rm -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">&#39;cp -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mv</span><span class="token operator">=</span><span class="token string">&#39;mv -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">&#39;docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token string">&#39;docker images&#39;</span>

<span class="token comment"># Source global definitions</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行命令使别名生效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像操作" tabindex="-1"><a class="header-anchor" href="#镜像操作"><span>镜像操作</span></a></h2><h3 id="镜像名称" tabindex="-1"><a class="header-anchor" href="#镜像名称"><span>镜像名称</span></a></h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606203.png" alt="image.png" loading="lazy"><br> 这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令"><span>镜像命令</span></a></h3><p>常见的镜像操作命令如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606506.png" alt="image.png" loading="lazy"></p><h3 id="案例1-拉取、查看镜像" tabindex="-1"><a class="header-anchor" href="#案例1-拉取、查看镜像"><span>案例1-拉取、查看镜像</span></a></h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><ol><li>首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">DockerHub</a>:</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606065.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="2"><li>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606036.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="3"><li>通过命令：docker images 查看拉取到的镜像</li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606261.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="案例2-保存、导入镜像" tabindex="-1"><a class="header-anchor" href="#案例2-保存、导入镜像"><span>案例2-保存、导入镜像</span></a></h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><ol><li>利用docker xx --help命令查看docker save和docker load的语法</li></ol><p>例如，查看save命令用法，可以输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606258.png" alt="image.png" loading="lazy"><br> 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>保存的目标文件名称<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用docker save导出镜像到磁盘</li></ol><p>运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> nginx.tar nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606751.png" alt="image.png" loading="lazy"></p><ol start="3"><li>使用docker load加载镜像</li></ol><p>先删除本地的nginx镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行命令，加载本地文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> nginx.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606696.png" alt="image.png" loading="lazy"></p><h2 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作"><span>容器操作</span></a></h2><h3 id="容器相关命令" tabindex="-1"><a class="header-anchor" href="#容器相关命令"><span>容器相关命令</span></a></h3><p>容器操作的命令如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171606877.png" alt="image.png" loading="lazy"><br> 容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li>docker start：让一个停止的容器再次运行</li><li>docker rm：删除一个容器</li></ul><h3 id="案例-创建并运行一个容器" tabindex="-1"><a class="header-anchor" href="#案例-创建并运行一个容器"><span>案例-创建并运行一个容器</span></a></h3><p>创建并运行nginx容器的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> containerName <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>--name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。<br> 默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。<br> 现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607176.png" alt="image.png" loading="lazy"></p><h3 id="案例-进入容器-修改文件" tabindex="-1"><a class="header-anchor" href="#案例-进入容器-修改文件"><span>案例-进入容器，修改文件</span></a></h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”<br><strong>提示</strong>：进入容器要用到docker exec命令。<br><strong>步骤</strong>：</p><ol><li>进入容器。进入我们刚刚创建的nginx容器的命令为：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mn <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li>docker exec ：进入容器内部，执行一个命令</li><li>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>mn ：要进入的容器的名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><ol start="2"><li>进入nginx的HTML所在目录 /usr/share/nginx/html</li></ol><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607026.png" alt="image.png" loading="lazy"><br> nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。<br> 查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code><br> 我们执行命令，进入该目录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/share/nginx/html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看目录下文件:<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607803.png" alt="image.png" loading="lazy"></p><ol start="3"><li>修改index.html的内容</li></ol><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#Welcome to nginx#传智教育欢迎您#g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器访问自己的虚拟机地址，例如我的是：http://192.168.150.101，即可看到结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607966.png" alt="image.png" loading="lazy"></p><h3 id="命令别名-1" tabindex="-1"><a class="header-anchor" href="#命令别名-1"><span>命令别名</span></a></h3><p>给常用Docker命令起别名，方便访问</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改/root/.bashrc文件</span>
<span class="token function">vi</span> /root/.bashrc
内容如下：
<span class="token comment"># .bashrc</span>

<span class="token comment"># User specific aliases and functions</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rm</span><span class="token operator">=</span><span class="token string">&#39;rm -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">&#39;cp -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mv</span><span class="token operator">=</span><span class="token string">&#39;mv -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">&#39;docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token string">&#39;docker images&#39;</span>

<span class="token comment"># Source global definitions</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令使别名生效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2"><span>小结</span></a></h3><p>docker run命令的常见参数有哪些？</p><ul><li>--name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="数据卷-容器数据管理" tabindex="-1"><a class="header-anchor" href="#数据卷-容器数据管理"><span>数据卷（容器数据管理）</span></a></h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。<br> 这就是因为容器与数据（容器内文件）耦合带来的后果。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607134.png" alt="image.png" loading="lazy"><br> 要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="什么是数据卷" tabindex="-1"><a class="header-anchor" href="#什么是数据卷"><span>什么是数据卷</span></a></h3><p><strong>数据卷（volume）<strong>是一个虚拟目录，指向宿主机文件系统中的某个目录，是</strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607014.png" alt="image.png" loading="lazy"><br> 一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。<br> 这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了。</p><h3 id="数据卷命令一览" tabindex="-1"><a class="header-anchor" href="#数据卷命令一览"><span>数据卷命令一览</span></a></h3><p>数据卷的相关命令有：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/" target="_blank" rel="noopener noreferrer">docker volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/" target="_blank" rel="noopener noreferrer">docker volume ls</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener noreferrer">docker volume prune</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/" target="_blank" rel="noopener noreferrer">docker volume inspect</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener noreferrer">docker volume prune</a></td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><h3 id="数据集操作命令" tabindex="-1"><a class="header-anchor" href="#数据集操作命令"><span>数据集操作命令</span></a></h3><p>数据卷操作的基本语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="创建和查看数据卷" tabindex="-1"><a class="header-anchor" href="#创建和查看数据卷"><span>创建和查看数据卷</span></a></h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置<br> ① 创建数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 查看所有数据</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607697.png" alt="image.png" loading="lazy"><br> ③ 查看数据卷详细信息卷</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607561.png" alt="image.png" loading="lazy"><br> 可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。<br><strong>小结</strong>：<br> 数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><h3 id="挂载数据卷" tabindex="-1"><a class="header-anchor" href="#挂载数据卷"><span>挂载数据卷</span></a></h3><p>可以发现数据卷的目录结构较深，如果去操作数据卷目录会不太方便。很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 挂载本地目录</span>
<span class="token parameter variable">-v</span> 本地目录:容器内目录
<span class="token comment"># 挂载本地文件</span>
<span class="token parameter variable">-v</span> 本地文件:容器内文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::tips<br><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。<br> :::<br> 例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> mysql:/var/lib/mysql <span class="token comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span>
<span class="token parameter variable">-v</span> ./mysql:/var/lib/mysql <span class="token comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mn <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> html:/root/html <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80
  nginx <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="案例-给nginx挂载数据卷" tabindex="-1"><a class="header-anchor" href="#案例-给nginx挂载数据卷"><span>案例-给nginx挂载数据卷</span></a></h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容<br><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。<br><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷<br> 步骤：<br> ① 创建容器并挂载数据卷到容器内的HTML目录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mn <span class="token parameter variable">-v</span> html:/usr/share/nginx/html <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 进入html数据卷所在位置，并修改HTML内容</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看html数据卷的位置</span>
<span class="token function">docker</span> volume inspect html
<span class="token comment"># 进入该目录</span>
<span class="token builtin class-name">cd</span> /var/lib/docker/volumes/html/_data
<span class="token comment"># 修改文件</span>
<span class="token function">vi</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例-给mysql挂载本地目录" tabindex="-1"><a class="header-anchor" href="#案例-给mysql挂载本地目录"><span>案例-给MySQL挂载本地目录</span></a></h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 ---&gt; 容器内目录</li></ul><p>如图：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607657.png" alt="image.png" loading="lazy"><br><strong>语法</strong>：<br> 目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器<br> 实现思路如下：</p><ol><li>将mysql.tar文件上传到虚拟机，通过load命令加载为镜像</li><li>创建目录/tmp/mysql/data</li><li>创建目录/tmp/mysql/conf，将hmy.cnf文件上传到/tmp/mysql/conf</li><li>去DockerHub查阅资料，创建并运行MySQL容器，要求： <ol><li>挂载/tmp/mysql/data到mysql容器内数据存储目录</li><li>挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</li><li>设置MySQL密码</li></ol></li></ol><p>最终挂载命令：<code>docker run --name mysql -d -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf -v /tmp/mysql/data:/var/lib/mysql mysql:8.0.28</code></p><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3"><span>小结</span></a></h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文件</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的区别：</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h1 id="dockerfile自定义镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile自定义镜像"><span>Dockerfile自定义镜像</span></a></h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。<br> 而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="镜像结构" tabindex="-1"><a class="header-anchor" href="#镜像结构"><span>镜像结构</span></a></h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。<br> 我们以MySQL为例，来看看镜像的组成结构：<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607611.png" alt="image.png" loading="lazy"><br> 简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。<br> 我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="dockerfile语法" tabindex="-1"><a class="header-anchor" href="#dockerfile语法"><span>Dockerfile语法</span></a></h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。<br> 我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。<br> 而描述上述信息的文件就是Dockerfile文件。<br><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。<br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/frame/docker/202406171607486.png" alt="image.png" loading="lazy"><br> 更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/builder</a></p><h2 id="构建java项目" tabindex="-1"><a class="header-anchor" href="#构建java项目"><span>构建Java项目</span></a></h2><h3 id="基于ubuntu构建java项目" tabindex="-1"><a class="header-anchor" href="#基于ubuntu构建java项目"><span>基于Ubuntu构建Java项目</span></a></h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li>步骤1：新建一个空文件夹docker-demo</li><li>步骤2：拷贝docker-demo.jar文件到docker-demo这个目录</li><li>步骤3：拷贝jdk8.tar.gz文件到docker-demo这个目录</li><li>步骤4：拷贝Dockerfile到docker-demo这个目录<br> Dockerfile中的内容如下：</li></ul><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>

<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>步骤5：进入docker-demo<br> 将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</li><li>步骤6：运行命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后访问 http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</p><h3 id="基于java8构建java项目" tabindex="-1"><a class="header-anchor" href="#基于java8构建java项目"><span>基于java8构建Java项目</span></a></h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，都可以在一些安装了部分软件的基础镜像上做改造。<br> 例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。<br> 需求：基于java:8-alpine镜像，将一个Java项目构建为镜像<br> 实现思路如下：</p><ul><li>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</li><li>② 拷贝docker-demo.jar到这个目录中</li><li>③ 编写Dockerfile文件： <ul><li>a ）基于java:8-alpine作为基础镜像</li><li>b ) 设定时区</li><li>c ）将app.jar拷贝到镜像中</li><li>d ）暴露端口</li><li>e ）编写入口ENTRYPOINT<br> 内容如下：</li></ul></li></ul><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token comment"># 设定时区</span>
<span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span>
<span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>④ 使用docker build命令构建镜像</li><li>⑤ 使用docker run创建容器并运行</li></ul><h2 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4"><span>小结</span></a></h2><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li></ol><h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker-Compose</span></a></h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>
 <span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
     <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span> 
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;8090:8090&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/compose-file/</a><br> 其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。<br><strong>语法</strong><br><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener noreferrer">Compose file version 3 reference</a><br><strong>命令</strong><br><a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noopener noreferrer">Overview of docker compose CLI</a><br> 基本语法如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker compose [OPTIONS] [COMMAND]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td></td><td>-p</td><td>指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有service容器</td></tr><tr><td></td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td></td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td></td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td></td><td>stop</td><td>停止容器</td></tr><tr><td></td><td>start</td><td>启动容器</td></tr><tr><td></td><td>restart</td><td>重启容器</td></tr><tr><td></td><td>top</td><td>查看运行的进程</td></tr><tr><td></td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><h1 id="_5-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-docker镜像仓库"><span>5.Docker镜像仓库</span></a></h1><h2 id="_5-1-搭建私有镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-搭建私有镜像仓库"><span>5.1.搭建私有镜像仓库</span></a></h2><p>参考课前资料《CentOS7安装Docker.md》</p><h2 id="_5-2-推送、拉取镜像" tabindex="-1"><a class="header-anchor" href="#_5-2-推送、拉取镜像"><span>5.2.推送、拉取镜像</span></a></h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag nginx:latest <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 推送镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③ 拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">192.168</span>.150.101:8080/nginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,229),i=[r];function t(d,o){return n(),a("div",null,i)}const m=e(l,[["render",t],["__file","core.html.vue"]]),u=JSON.parse('{"path":"/frame/docker/core.html","title":"核心知识","lang":"zh-CN","frontmatter":{"title":"核心知识","shortTitle":"核心知识","description":null,"date":"2024-06-16T22:11:18.000Z","categories":["Docker"],"tags":[]},"headers":[{"level":2,"title":"什么是Docker","slug":"什么是docker","link":"#什么是docker","children":[{"level":3,"title":"应用部署的环境问题","slug":"应用部署的环境问题","link":"#应用部署的环境问题","children":[]},{"level":3,"title":"Docker解决依赖兼容问题","slug":"docker解决依赖兼容问题","link":"#docker解决依赖兼容问题","children":[]},{"level":3,"title":"Docker解决操作系统环境差异","slug":"docker解决操作系统环境差异","link":"#docker解决操作系统环境差异","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"Docker和虚拟机的区别","slug":"docker和虚拟机的区别","link":"#docker和虚拟机的区别","children":[]},{"level":2,"title":"Docker架构","slug":"docker架构","link":"#docker架构","children":[{"level":3,"title":"镜像和容器","slug":"镜像和容器","link":"#镜像和容器","children":[]},{"level":3,"title":"DockerHub","slug":"dockerhub","link":"#dockerhub","children":[]},{"level":3,"title":"Docker架构","slug":"docker架构-1","link":"#docker架构-1","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}]},{"level":2,"title":"安装Docker","slug":"安装docker","link":"#安装docker","children":[]},{"level":2,"title":"常用命令一览","slug":"常用命令一览","link":"#常用命令一览","children":[{"level":3,"title":"命令别名","slug":"命令别名","link":"#命令别名","children":[]}]},{"level":2,"title":"镜像操作","slug":"镜像操作","link":"#镜像操作","children":[{"level":3,"title":"镜像名称","slug":"镜像名称","link":"#镜像名称","children":[]},{"level":3,"title":"镜像命令","slug":"镜像命令","link":"#镜像命令","children":[]},{"level":3,"title":"案例1-拉取、查看镜像","slug":"案例1-拉取、查看镜像","link":"#案例1-拉取、查看镜像","children":[]},{"level":3,"title":"案例2-保存、导入镜像","slug":"案例2-保存、导入镜像","link":"#案例2-保存、导入镜像","children":[]}]},{"level":2,"title":"容器操作","slug":"容器操作","link":"#容器操作","children":[{"level":3,"title":"容器相关命令","slug":"容器相关命令","link":"#容器相关命令","children":[]},{"level":3,"title":"案例-创建并运行一个容器","slug":"案例-创建并运行一个容器","link":"#案例-创建并运行一个容器","children":[]},{"level":3,"title":"案例-进入容器，修改文件","slug":"案例-进入容器-修改文件","link":"#案例-进入容器-修改文件","children":[]},{"level":3,"title":"命令别名","slug":"命令别名-1","link":"#命令别名-1","children":[]},{"level":3,"title":"小结","slug":"小结-2","link":"#小结-2","children":[]}]},{"level":2,"title":"数据卷（容器数据管理）","slug":"数据卷-容器数据管理","link":"#数据卷-容器数据管理","children":[{"level":3,"title":"什么是数据卷","slug":"什么是数据卷","link":"#什么是数据卷","children":[]},{"level":3,"title":"数据卷命令一览","slug":"数据卷命令一览","link":"#数据卷命令一览","children":[]},{"level":3,"title":"数据集操作命令","slug":"数据集操作命令","link":"#数据集操作命令","children":[]},{"level":3,"title":"创建和查看数据卷","slug":"创建和查看数据卷","link":"#创建和查看数据卷","children":[]},{"level":3,"title":"挂载数据卷","slug":"挂载数据卷","link":"#挂载数据卷","children":[]},{"level":3,"title":"案例-给nginx挂载数据卷","slug":"案例-给nginx挂载数据卷","link":"#案例-给nginx挂载数据卷","children":[]},{"level":3,"title":"案例-给MySQL挂载本地目录","slug":"案例-给mysql挂载本地目录","link":"#案例-给mysql挂载本地目录","children":[]},{"level":3,"title":"小结","slug":"小结-3","link":"#小结-3","children":[]}]},{"level":2,"title":"镜像结构","slug":"镜像结构","link":"#镜像结构","children":[]},{"level":2,"title":"Dockerfile语法","slug":"dockerfile语法","link":"#dockerfile语法","children":[]},{"level":2,"title":"构建Java项目","slug":"构建java项目","link":"#构建java项目","children":[{"level":3,"title":"基于Ubuntu构建Java项目","slug":"基于ubuntu构建java项目","link":"#基于ubuntu构建java项目","children":[]},{"level":3,"title":"基于java8构建Java项目","slug":"基于java8构建java项目","link":"#基于java8构建java项目","children":[]}]},{"level":2,"title":"小结","slug":"小结-4","link":"#小结-4","children":[]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"5.1.搭建私有镜像仓库","slug":"_5-1-搭建私有镜像仓库","link":"#_5-1-搭建私有镜像仓库","children":[]},{"level":2,"title":"5.2.推送、拉取镜像","slug":"_5-2-推送、拉取镜像","link":"#_5-2-推送、拉取镜像","children":[]}],"git":{"createdTime":1718621104000,"updatedTime":1718621104000,"contributors":[{"name":"Zhiyun Qin","email":"96156298+Okita1027@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":22.45,"words":6736},"filePathRelative":"frame/docker/core.md","localizedDate":"2024年6月17日"}');export{m as comp,u as data};
