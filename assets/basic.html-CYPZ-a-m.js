import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as e}from"./app-NwmlIrjp.js";const t={},p=e(`<h2 id="安装配置" tabindex="-1"><a class="header-anchor" href="#安装配置"><span>安装配置</span></a></h2><p><a href="https://cloud.tencent.com/developer/article/1705262" target="_blank" rel="noopener noreferrer">PHP安装配置(Windows和Linux)-一篇就够了-腾讯云开发者社区-腾讯云</a></p><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3><ol><li>下载、解压缩</li><li>修改Apache服务器的httpd.conf文件，添加以下行</li></ol><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token comment">#加载PHP</span>
LoadModule php_module &#39;E:/PHP/php8apache2_4.dll&#39;

<span class="token comment">#将PHP配置文件加载到Apache配置文件中，共同生效</span>
PHPIniDir &#39;E:/PHP&#39;

<span class="token comment">#配置Apache分配工作给PHP模块，把PHP代码交给PHP处理</span>
<span class="token comment">#即.php后缀名的文件</span>
AddType application/x-httpd-php .php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171907515.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="3"><li>复制PHP目录下的<code>php.ini-development</code>改名为<code>php.ini</code></li><li>测试配置<code>httpd -M</code></li></ol><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171907491.png" alt="有橙色代表成功" tabindex="0" loading="lazy"><figcaption>有橙色代表成功</figcaption></figure><ol start="5"><li>使用PHP：在Apache的<code>htdocs</code>目录下新建php文件，启动Apache服务后使用<code>localhost/XXX.php</code>访问</li></ol><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><h4 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h4><p>在PHP中，变量以 $ 符号开始，后面跟着变量的名称</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">10.5</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>与其他编程语言不同，PHP 没有用于声明变量的命令。它是在您第一次为其赋值时创建的<code>$num = 1;</code>。</p></blockquote><h4 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h4><p>在 PHP 中，变量的作用域决定了在哪里可以访问这个变量。PHP 中的变量作用域可以分为以下几种：</p><ol><li><strong>局部作用域（Local Scope）</strong>：</li></ol><ul><li>当一个变量在函数内部声明时，其作用域仅限于该函数内部。</li><li>它仅在函数内部可用，函数外部无法访问。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$localVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;I&#39;m local!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$localVar</span><span class="token punctuation">;</span> <span class="token comment">// 正确，变量在作用域内</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token variable">$localVar</span><span class="token punctuation">;</span> <span class="token comment">// 错误，变量在作用域外</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>全局作用域（Global Scope）</strong>：</li></ol><ul><li>在函数之外声明的变量具有全局作用域。</li><li>这些变量在整个脚本中任何地方都可访问，除了函数内部。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$globalVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;I&#39;m global!&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$globalVar</span><span class="token punctuation">;</span> <span class="token comment">// 错误，函数内部不可直接访问全局变量</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$globalVar</span><span class="token punctuation">;</span> <span class="token comment">// 正确，变量在作用域内</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要在函数内部访问全局变量，需要使用 <code>global</code> 关键字或者使用 <code>$GLOBALS</code> 数组。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$globalVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;I&#39;m global!&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$globalVar</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$globalVar</span><span class="token punctuation">;</span> <span class="token comment">// 正确，通过 global 关键字访问</span>

    <span class="token comment">// 或者</span>
    <span class="token keyword">echo</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;globalVar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确，通过 $GLOBALS 数组访问</span>
<span class="token punctuation">}</span>
<span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>静态作用域（Static Scope）</strong>：</li></ol><ul><li>当一个变量在函数内部声明为 <code>static</code> 时，它在函数调用之间保持其值。</li><li>静态变量<strong>仅在局部函数作用域中存在</strong>，但它们不会在函数调用完成后失去值。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token variable">$staticVar</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$staticVar</span><span class="token punctuation">;</span>
    <span class="token variable">$staticVar</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
<span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>参数作用域（Function Parameter Scope）</strong>：</li></ol><ul><li>函数参数在函数内部作为局部变量，其作用域限于函数体内。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">testFunction</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$param</span><span class="token punctuation">;</span> <span class="token comment">// 正确，$param 在函数作用域内</span>
<span class="token punctuation">}</span>
<span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;I&#39;m a parameter!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$param</span><span class="token punctuation">;</span> <span class="token comment">// 错误，$param 在作用域外</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h3><p>在 PHP 中，常量是一个简单值的标识符。一旦常量被定义，它就不能被重新定义或取消定义。常量可以是任何的标量数据类型，即 integer、float、string 或 boolean。它们在脚本的执行期间不会改变。</p><h4 id="定义常量" tabindex="-1"><a class="header-anchor" href="#定义常量"><span>定义常量</span></a></h4><p>常量通过使用 <code>define()</code> 函数来定义，或者使用 <code>const</code> 关键字在类定义之外的任何地方定义。常量的名称通常使用大写字母。<br> 使用 <code>define()</code> 函数定义常量：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SITE_URL&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;https://www.example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>const</code> 关键字定义常量：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">const</span> <span class="token constant">API_KEY</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="访问常量" tabindex="-1"><a class="header-anchor" href="#访问常量"><span>访问常量</span></a></h4><p>访问常量不需要在其名称前加美元符号（<code>$</code>），这是因为常量与变量不同。可以直接使用常量名来访问它的值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token constant">SITE_URL</span><span class="token punctuation">;</span> <span class="token comment">// 输出 https://www.example.com</span>
<span class="token keyword">echo</span> <span class="token constant">API_KEY</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="魔术常量" tabindex="-1"><a class="header-anchor" href="#魔术常量"><span>魔术常量</span></a></h4><p><a href="https://www.w3schools.com/php/php_magic_constants.asp" target="_blank" rel="noopener noreferrer">PHP Constants</a><br> PHP 提供了一组预定义的常量，通常称为魔术常量。这些特殊的常量会根据它们在代码中的位置改变自己的值。例如：</p><ul><li><code>__LINE__</code> - 文件中的当前行号。</li><li><code>__FILE__</code> - 完整的文件路径和文件名。</li><li><code>__DIR__</code> - 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</li><li><code>__FUNCTION__</code> - 函数名称。</li><li><code>__CLASS__</code> - 类的名称。</li><li><code>__METHOD__</code> - 类的方法名。</li><li><code>__NAMESPACE__</code> - 当前命名空间的名称。</li></ul><p>魔术常量的例子：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token constant">__LINE__</span><span class="token punctuation">;</span> <span class="token comment">// 输出当前的行号</span>
<span class="token keyword">echo</span> <span class="token constant">__FILE__</span><span class="token punctuation">;</span> <span class="token comment">// 输出该文件的完整路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常量的特点" tabindex="-1"><a class="header-anchor" href="#常量的特点"><span>常量的特点</span></a></h4><ul><li>常量默认为全局范围，可以在脚本的任何位置访问，包括函数和方法内部。</li><li>常量值只能是标量数据类型。</li><li>常量名不需要使用美元符号前缀（<code>$</code>）。</li><li>一旦定义，常量的值就不能改变或取消定义。</li><li>常量名区分大小写，尽管传统上常量名总是大写。</li></ul><h4 id="类常量" tabindex="-1"><a class="header-anchor" href="#类常量"><span>类常量</span></a></h4><p>类常量可以在类的定义中使用 <code>const</code> 关键字定义。类常量是属于类的，必须通过类名来访问它们，不能通过对象实例访问。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">CONSTANT</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;constant value&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">MyClass</span><span class="token operator">::</span><span class="token constant">CONSTANT</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;constant value&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量提供了一个便捷的方式来组织和使用不变的值，使得代码更加模块化和易于维护。</p><h3 id="echo、print" tabindex="-1"><a class="header-anchor" href="#echo、print"><span>echo、print</span></a></h3><p>在 PHP 中，<code>echo</code> 和 <code>print</code> 都是用来输出字符串到页面上的构造语言。尽管它们在功能上非常相似，但在使用方式和技术上有一些微小的差别：</p><h4 id="echo" tabindex="-1"><a class="header-anchor" href="#echo"><span><strong>echo</strong></span></a></h4><ul><li><code>echo</code> 是一个语言结构，可以不用括号直接跟着要输出的字符串。</li><li>它可以接受一个或多个字符串作为参数（使用逗号 <code>,</code> 分隔）。</li><li><code>echo</code> 没有返回值，无法作为表达式的一部分使用。</li><li>性能上，<code>echo</code> 略快于 <code>print</code>，因为它不返回任何值。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;string &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;was &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;made &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;with multiple parameters.&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="print" tabindex="-1"><a class="header-anchor" href="#print"><span><strong>print</strong></span></a></h4><ul><li><code>print</code> 同样是一个语言结构，但它只能接受一个参数，并且总是返回 1。</li><li><code>print</code> 可以使用括号，但这不是必需的。</li><li>由于 <code>print</code> 有返回值，它可以在表达式中使用。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;This string was made with print.&quot;</span><span class="token punctuation">;</span> <span class="token comment">// $result 会被赋值为 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="print-r" tabindex="-1"><a class="header-anchor" href="#print-r"><span>**print_r() **</span></a></h4><p><code>print_r()</code> 是 PHP 中一个内置函数，用于调试和检查变量的内容，使其以人类可读的格式呈现。<br><strong>目的:</strong></p><ul><li>以便于人类理解的方式打印有关变量的信息。</li><li>适用于检查数组、对象、字符串和其他数据类型的结构和内容。</li></ul><p><strong>语法:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$return</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>$value:</strong> 要检查的变量。</li><li><strong>$return (可选):</strong> 一个布尔值。默认为 <code>false</code>。 <ul><li>如果为 <code>true</code>，则函数返回格式化字符串，而不是直接打印。</li></ul></li></ul><p><strong>输出:</strong></p><ul><li>输出格式取决于变量的数据类型: <ul><li><strong>字符串:</strong> 直接显示字符串值。</li><li><strong>整数:</strong> 显示整数的值。</li><li><strong>浮点数:</strong> 显示浮点数的值。</li><li><strong>数组:</strong> 显示数组结构，包括键和值。</li><li><strong>对象:</strong> 显示对象的属性及其值。</li></ul></li></ul><p><strong>示例:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;橘子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$fruits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将输出类似以下内容:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>数组
(
    [0] =&gt; 苹果
    [1] =&gt; 香蕉
    [2] =&gt; 橘子
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要点:</strong></p><ul><li><code>print_r()</code> 对于调试复杂数据结构（例如嵌套数组或对象）特别有用。</li><li>它还可以用于比较两个变量的内容，以查看它们是否相同。</li><li>虽然 <code>print_r()</code> 提供了良好的概述，但对于有关变量的更详细信息，请考虑使用 <code>var_dump()</code>。</li></ul><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>PHP 支持多种数据类型，它们可以大致分为三类：标量类型、复合类型和特殊类型。</p><h4 id="标量类型" tabindex="-1"><a class="header-anchor" href="#标量类型"><span>标量类型</span></a></h4><ol><li><strong>Boolean（布尔型）</strong>：</li></ol><ul><li>表示逻辑上的真或假。</li><li>可以使用 <code>true</code> 或 <code>false</code> 两个关键字来赋值。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$isTrue</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token variable">$isFalse</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Integer（整型）</strong>：</li></ol><ul><li>表示没有小数的数字。</li><li>可以是十进制、十六进制、八进制或二进制。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$decimal</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>
<span class="token variable">$hexadecimal</span> <span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">;</span>
<span class="token variable">$octal</span> <span class="token operator">=</span> <span class="token number">01234</span><span class="token punctuation">;</span>
<span class="token variable">$binary</span> <span class="token operator">=</span> <span class="token number">0b111111</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Float（浮点型）</strong> 或 <strong>double</strong>：</li></ol><ul><li>表示有小数部分的数字或者是指数形式的数字。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$float</span> <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>
<span class="token variable">$scientific</span> <span class="token operator">=</span> <span class="token number">0.1234E4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>String（字符串型）</strong>：</li></ol><ul><li>表示一串字符序列。</li><li>可以用单引号或双引号定义，双引号内部的变量和特殊字符（如换行 <code>\\n</code>）会被解析。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$singleQuoted</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;This is a string&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$doubleQuoted</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;This is also a string&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型"><span>复合类型</span></a></h4><ol><li><strong>Array（数组）</strong>：</li></ol><ul><li>表示多个值的集合，可以通过键来访问这些值。</li><li>键可以是整数（索引数组）或字符串（关联数组）。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$assocArray</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;first&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;second&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Object（对象）</strong>：</li></ol><ul><li>表示一个类的实例。</li><li>必须通过 <code>class</code> 定义类之后，才能创建该类的对象。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$prop1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;I&#39;m a class property!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特殊类型" tabindex="-1"><a class="header-anchor" href="#特殊类型"><span>特殊类型</span></a></h4><ol><li><strong>Resource（资源）</strong>：</li></ol><ul><li>用来保存外部资源的引用，例如数据库连接、文件句柄等。</li><li>资源由专门的函数来创建和使用，不能直接创建。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;somefile.txt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>NULL（空类型）</strong>：</li></ol><ul><li>表示变量没有值。</li><li>变量可以被显式地赋值为 <code>null</code>，或者未赋值前它们就是 <code>null</code>。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="var-dump" tabindex="-1"><a class="header-anchor" href="#var-dump"><span>var_dump</span></a></h4><p><code>var_dump()</code> 是 PHP 中用于输出变量的详细信息的函数，包括变量的数据类型和值。当你需要调试代码或者查看某个变量包含的数据时，它是非常有用的。<br><code>var_dump()</code> 可以接受一个或多个参数，每个参数都会被独立地输出其信息。<br> 以下是 <code>var_dump()</code> 函数的一些基本用法：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$intVar</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token variable">$floatVar</span> <span class="token operator">=</span> <span class="token number">123.456</span><span class="token punctuation">;</span>
<span class="token variable">$stringVar</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$arrayVar</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$nullVar</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$intVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出 int(123)</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$floatVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 float(123.456)</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$stringVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出 string(13) &quot;Hello, World!&quot;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arrayVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 array(3) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) }</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$nullVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出 NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你同时传递多个变量给 <code>var_dump()</code>，它会依次输出每个变量的信息：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$intVar</span><span class="token punctuation">,</span> <span class="token variable">$stringVar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// int(123)</span>
<span class="token comment">// string(13) &quot;Hello, World!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>var_dump()</code> 对于输出对象的信息也非常有用，它会显示对象的属性及其值，还有对象的类名：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$property</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$myObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$myObject</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// object(MyObject)#1 (1) {</span>
<span class="token comment">//   [&quot;property&quot;]=&gt;</span>
<span class="token comment">//   string(5) &quot;value&quot;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>var_dump()</code> 是一个不返回值的函数，它直接输出到输出流（通常是浏览器或控制台）。如果你需要捕获 <code>var_dump()</code> 的输出，可以使用输出控制函数 <code>ob_start()</code>, <code>ob_get_clean()</code> 等来缓冲输出。<br> 请注意，<code>var_dump()</code> 输出的信息是面向开发者的，因此在生产环境中，通常不应该使用它来输出任何信息。</p><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数"><span>字符串函数</span></a></h3><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h4><blockquote><p><a href="https://www.w3schools.com/php/php_ref_string.asp" target="_blank" rel="noopener noreferrer">W3School：PHP String Functions</a><br><a href="https://www.w3ccoo.com/php/php_ref_string.html" target="_blank" rel="noopener noreferrer">W3School中文站：PHP String 字符串函数</a></p></blockquote><p>PHP 提供了一系列强大的字符串处理函数，可以执行各种操作，如字符串搜索、替换、比较、格式化和分割等。以下是一些常用的字符串函数：</p><ol><li><strong>strlen</strong> - 获取字符串长度。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>strpos</strong> - 查找字符串首次出现的位置（区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>stripos</strong> - 查找字符串首次出现的位置（不区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><strong>strrpos</strong> - 查找字符串最后出现的位置（区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World! World&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><strong>str_replace</strong> - 替换字符串中的一些字符（区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;PHP&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello PHP!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li><strong>str_ireplace</strong> - 替换字符串中的一些字符（不区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;PHP&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello PHP!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li><strong>substr</strong> - 返回字符串的一部分。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li><strong>strtolower</strong> - 把字符串转换为小写。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello WORLD!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 hello world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li><strong>strtoupper</strong> - 把字符串转换为大写。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 HELLO WORLD!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="10"><li><strong>ucfirst</strong> - 把字符串的首个字符转换为大写。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="11"><li><strong>ucwords</strong> - 把字符串中每个单词的首字符转换为大写。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="12"><li><strong>trim</strong> - 去除字符串首尾的空白字符。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;   Hello World!   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="13"><li><strong>ltrim</strong> - 去除字符串左侧的空白字符。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;   Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="14"><li><strong>rtrim</strong> - 去除字符串右侧的空白字符。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="15"><li><strong>str_split</strong> - 把字符串分割到数组中。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">str_split</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Array ( [0] =&gt; He [1] =&gt; ll [2] =&gt; o )</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="16"><li><strong>explode</strong> - 使用一个字符串分割另一个字符串。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Array ( [0] =&gt; Hello [1] =&gt; World! )</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="17"><li><strong>implode</strong> - 将一个一维数组的值转化为字符串。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="18"><li><strong>strcmp</strong> - 比较两个字符串（区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="19"><li><strong>strcasecmp</strong> - 比较两个字符串（不区分大小写）。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="20"><li><strong>number_format</strong> - 以千位分隔符方式格式化数字。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1,000,000.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数字字符串" tabindex="-1"><a class="header-anchor" href="#数字字符串"><span>数字字符串</span></a></h4><p>PHP <code>is_numeric()</code> 函数可用于查找变量是否为数字。 如果变量是数字或数字字符串，该函数返回 true，否则返回 false。</p><blockquote><p>从 PHP 7.0 开始：<code>is_numeric()</code> 函数将对十六进制形式的数字字符串（例如 0xf4c3b00c）返回 FALSE，因为它们不再被视为数字字符串。</p></blockquote><h3 id="数值" tabindex="-1"><a class="header-anchor" href="#数值"><span>数值</span></a></h3><p>在 PHP 中，处理数值主要涉及整数（integers）和浮点数（floats，也称为 doubles）。以下是一些与数值处理相关的基础知识和操作。</p><h4 id="整数-integer" tabindex="-1"><a class="header-anchor" href="#整数-integer"><span>整数 (Integer)</span></a></h4><p>整数是没有小数的数字。PHP中的整数可以是十进制（基数 10）、十六进制（基数 16，以 <code>0x</code> 开头）、八进制（基数 8，以 <code>0</code> 开头）或二进制（基数 2，以 <code>0b</code> 开头）。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$decimal</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token comment">// 十进制数</span>
<span class="token variable">$octal</span> <span class="token operator">=</span> <span class="token number">0123</span><span class="token punctuation">;</span>   <span class="token comment">// 八进制数</span>
<span class="token variable">$hex</span> <span class="token operator">=</span> <span class="token number">0x1AB</span><span class="token punctuation">;</span>    <span class="token comment">// 十六进制数</span>
<span class="token variable">$binary</span> <span class="token operator">=</span> <span class="token number">0b11111111</span><span class="token punctuation">;</span> <span class="token comment">// 二进制数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="浮点数-float" tabindex="-1"><a class="header-anchor" href="#浮点数-float"><span>浮点数 (Float)</span></a></h4><p>浮点数是带小数部分的数字。它们也可以用科学计数法表示，例如 <code>1.2e3</code> 相当于 <code>1.2 x 10^3</code> 或 <code>1200</code>。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$float</span> <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>
<span class="token variable">$scientific</span> <span class="token operator">=</span> <span class="token number">1.2e3</span><span class="token punctuation">;</span>
<span class="token variable">$scientific_negative</span> <span class="token operator">=</span> <span class="token number">7E-10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>float 数据类型通常可以存储高达 1.7976931348623E+308 的值（取决于平台），并且最大精度为 14 位。<br> PHP 有以下函数来检查变量的类型是否为浮点数：<br><code>is_float()</code><br><code>is_double()</code> -<code>is_float()</code>的别名</p><h5 id="无限" tabindex="-1"><a class="header-anchor" href="#无限"><span>无限</span></a></h5><p>大于 PHP_FLOAT_MAX 的数值被认为是无限的。<br> PHP 具有以下函数来检查数值是有限还是无限：</p><ul><li><a href="https://www.w3ccoo.com/php/func_math_is_finite.html" target="_blank" rel="noopener noreferrer">is_finite()</a></li><li><a href="https://www.w3ccoo.com/php/func_math_is_infinite.html" target="_blank" rel="noopener noreferrer">is_infinite()</a></li></ul><h5 id="nan" tabindex="-1"><a class="header-anchor" href="#nan"><span>NAN</span></a></h5><p>NaN 代表非数字。<br> NaN 用于不可能的数学运算。<br> PHP 有以下函数来检查一个值是否不是数字：</p><ul><li><a href="https://www.w3ccoo.com/php/func_math_is_nan.html" target="_blank" rel="noopener noreferrer">is_nan()</a></li></ul><h4 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h4><p>在 PHP 中，数值类型之间的转换可以自动进行，也可以显式进行。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;12.34&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$int</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$num</span><span class="token punctuation">;</span> <span class="token comment">// 强制转换为整数，$int 是 12</span>
<span class="token variable">$float</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">float</span><span class="token punctuation">)</span><span class="token variable">$num</span><span class="token punctuation">;</span> <span class="token comment">// 强制转换为浮点数，$float 是 12.34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数值函数" tabindex="-1"><a class="header-anchor" href="#数值函数"><span>数值函数</span></a></h4><p>PHP 还提供了一些用于处理数值的函数</p><ul><li><code>number_format()</code> 用于格式化数值，使其更易读。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1,000,000</span>
<span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1,000,000.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>is_int()</code> 或 <code>is_integer()</code> 函数用于检查变量是否为整数。</li><li><code>is_float()</code> 或 <code>is_double()</code> 函数用于检查变量是否为浮点数。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$int</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token variable">$float</span> <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>

<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_int</span><span class="token punctuation">(</span><span class="token variable">$int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 bool(true)</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_float</span><span class="token punctuation">(</span><span class="token variable">$float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 bool(true)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数"><span><strong>数学函数</strong></span></a></h4><ul><li><code>pi()</code> - 返回PI的值</li><li><code>abs()</code> - 绝对值</li><li><code>ceil()</code> - 向上取整</li><li><code>floor()</code> - 向下取整</li><li><code>round()</code> - 四舍五入</li><li><code>min()</code> - 找出最小值</li><li><code>max()</code> - 找出最大值</li><li><code>rand()</code> - 生成随机整数</li><li><code>mt_rand()</code> - 生成更好的随机整数</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1.5</span>
<span class="token keyword">echo</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
<span class="token keyword">echo</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
<span class="token keyword">echo</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
<span class="token keyword">echo</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token keyword">echo</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
<span class="token keyword">echo</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1 到 10 之间的一个随机整数</span>
<span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1 到 10 之间的一个更好的随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>min()</code> 和 <code>max()</code> 函数可用于在 参数列表：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// returns -200</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// returns 150</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span>随机数</span></a></h5><p>在 PHP 中，<code>rand()</code> 和 <code>mt_rand()</code> 都是用来生成随机数的函数。它们的主要区别在于生成随机数所用的算法不同，这导致了它们在性能和随机性方面有所差异</p><ol><li><code>rand()</code></li></ol><p><code>rand()</code> 函数是 PHP 中较早的随机数生成函数。它使用 libc 提供的随机数发生器。<code>rand()</code> 在不同的操作系统和不同版本的 PHP 中可能表现不一致，随机数生成的质量和性能也可能不同。基本用法如下：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$randomNumber</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个随机整数</span>
<span class="token variable">$randomNumberInRange</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个在[0, 10]范围内的随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>mt_rand()</code></li></ol><p><code>mt_rand()</code> 函数是基于 Mersenne Twister 算法实现的，提供更快且更好的随机数生成。它在 PHP 4.2.0 以后成为了默认的随机数发生器。由于 Mersenne Twister 算法的统计随机性质比 <code>rand()</code> 函数提供的 libc 随机数发生器要好，所以 <code>mt_rand()</code> 被认为是产生随机数的更好选择。它的基本用法与 <code>rand()</code> 类似：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$randomNumber</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个随机整数</span>
<span class="token variable">$randomNumberInRange</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个在[0, 10]范围内的随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>总结和推荐</li></ol><ul><li><code>mt_rand()</code> 比 <code>rand()</code> 速度更快。</li><li><code>mt_rand()</code> 生成的随机数质量更高。</li><li>由于以上两点，通常建议使用 <code>mt_rand()</code> 而不是 <code>rand()</code>。</li></ul><p>从 PHP 7.1.0 开始，PHP 引入了新的随机数发生器 API：<code>random_int()</code> 和 <code>random_bytes()</code>。这些新函数旨在提供<strong>加密安全</strong>的随机数生成，更加适合安全敏感的用途。如果你需要生成加密安全的随机数，应该使用这些新的函数：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$secureRandomNumber</span> <span class="token operator">=</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个在[0, 10]范围内的加密安全的随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不是出于加密安全的目的，对于一般的随机数需求，<code>mt_rand()</code> 是一个比 <code>rand()</code> 更好的选项。</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><h4 id="基本运算" tabindex="-1"><a class="header-anchor" href="#基本运算"><span>基本运算</span></a></h4><p>PHP 提供了一系列数学运算符和数学函数来处理数值运算。<br><strong>运算符</strong>:</p><ul><li>加法: <code>+</code></li><li>减法: <code>-</code></li><li>乘法: <code>*</code></li><li>除法: <code>/</code></li><li>取余: <code>%</code></li><li>幂运算: <code>**</code></li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
<span class="token keyword">echo</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出 6</span>
<span class="token keyword">echo</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token keyword">echo</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h4><p>用于对整数进行位级操作。</p><ul><li>按位与 (&amp;): <code>$a &amp; $b</code></li><li>按位或 (|): <code>$a | $b</code></li><li>按位异或 (^): <code>$a ^ $b</code></li><li>按位非 (~): <code>~$a</code></li><li>左移 (&lt;&lt;): <code>$a &lt;&lt; $b</code></li><li>右移 (&gt;&gt;): <code>$a &gt;&gt; $b</code></li></ul><h4 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算"><span>逻辑运算</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909501.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="比较运算" tabindex="-1"><a class="header-anchor" href="#比较运算"><span>比较运算</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909464.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909109.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="数组运算符" tabindex="-1"><a class="header-anchor" href="#数组运算符"><span>数组运算符</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909311.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符"><span>三元运算符</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909204.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="错误控制运算符" tabindex="-1"><a class="header-anchor" href="#错误控制运算符"><span>错误控制运算符</span></a></h4><p>用于错误抑制。</p><ul><li>抑制符 (@): @$a 会忽略错误消息。</li></ul><h4 id="类型运算符" tabindex="-1"><a class="header-anchor" href="#类型运算符"><span>类型运算符</span></a></h4><p>用于检查对象类型。</p><ul><li>instanceof: $a instanceof MyClass</li></ul><h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h3><h4 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h4><ul><li><code>if</code> 语句：根据条件的真假来执行不同的代码块。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当 $condition 为 true 时执行</span>
<span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$anotherCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当 $anotherCondition 为 true 时执行</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当所有条件都不为 true 时执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>switch</code> 语句：根据一个变量的值与一系列的值进行比较，执行相应的代码块。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$variable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;value1&#39;</span><span class="token punctuation">:</span>
        <span class="token comment">// 当 $variable 等于 value1 时执行</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;value2&#39;</span><span class="token punctuation">:</span>
        <span class="token comment">// 当 $variable 等于 value2 时执行</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token comment">// 当 $variable 不等于任何 case 中的值时执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h4><ul><li><code>while</code> 循环：只要指定的条件为真，就重复执行代码块。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只要 $condition 为 true 就一直执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>do-while</code> 循环：至少执行一次代码块，然后只要条件为真就重复执行。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先执行一次，然后检查 $condition</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>for</code> 循环：指定初始化、条件和迭代参数，然后执行代码块。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对 $i 进行初始化，检查条件，然后执行并迭代</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>foreach</code> 循环：遍历数组或对象中的每个元素。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对 $array 中的每个元素执行</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者获取键值对</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对 $array 中的每个元素执行，并获取键名</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="跳转语句" tabindex="-1"><a class="header-anchor" href="#跳转语句"><span>跳转语句</span></a></h4><ul><li><code>break</code> 语句：中断当前循环或 <code>switch</code> 语句的执行。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>continue</code> 语句：跳过当前循环的剩余代码，并根据条件测试继续下一次循环。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">continue</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>goto</code> 语句：直接跳转到程序中的另一个位置。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">goto</span> label<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
label<span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h4><ul><li><code>try-catch</code> 语句：尝试执行代码块，并捕获可能发生的异常。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试执行代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 捕获异常</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h4><ul><li><code>declare</code> 结构：用于设定一段代码的执行指令。例如，<code>ticks</code> 用于在每个 tick 中执行代码。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">declare</span><span class="token punctuation">(</span>ticks<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每个 tick 执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>return</code> 语句：从函数中返回一个值并结束函数的执行。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数-1" tabindex="-1"><a class="header-anchor" href="#函数-1"><span>函数</span></a></h3><h4 id="创建函数" tabindex="-1"><a class="header-anchor" href="#创建函数"><span>创建函数</span></a></h4><p>在 PHP 中，可以使用 <code>function</code> 关键字来定义一个函数。下面是一个简单的函数定义的示例：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带参数的函数" tabindex="-1"><a class="header-anchor" href="#带参数的函数"><span>带参数的函数</span></a></h4><p>函数可以接受参数，这些参数用于在函数体内传递数据或值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello, &quot;</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h4><p>函数可以通过 <code>return</code> 语句返回一个值。当 <code>return</code> 被执行时，函数的执行将结束，并返回指定的值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h4><p>定义函数后，可以通过函数名和括号来调用它。如果函数定义了参数，需要在调用时提供实际的参数值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello, World!</span>

<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello, Alice!</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $result 现在是 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认参数值" tabindex="-1"><a class="header-anchor" href="#默认参数值"><span>默认参数值</span></a></h4><p>函数参数可以有默认值。如果在调用函数时没有提供参数，将使用默认值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">setTemperature</span><span class="token punctuation">(</span><span class="token variable">$temperature</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;The temperature is &quot;</span> <span class="token operator">.</span> <span class="token variable">$temperature</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;°C&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTemperature</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：The temperature is 25°C</span>
<span class="token function">setTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：The temperature is 20°C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变参数列表" tabindex="-1"><a class="header-anchor" href="#可变参数列表"><span>可变参数列表</span></a></h4><p>如果你想让一个函数接受任意数量的参数，可以使用可变参数列表：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$total</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$numbers</span> <span class="token keyword">as</span> <span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$total</span> <span class="token operator">+=</span> <span class="token variable">$number</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token variable">$total</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
<span class="token keyword">echo</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过引用传递参数" tabindex="-1"><a class="header-anchor" href="#通过引用传递参数"><span>通过引用传递参数</span></a></h4><p>默认情况下，函数参数是通过值传递的，这意味着函数内对参数的修改不会影响到外部变量。如果想要函数能够修改外部变量的值，可以通过引用<code>&amp;</code>传递参数：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">addFive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$number</span> <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">addFive</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="匿名函数-闭包" tabindex="-1"><a class="header-anchor" href="#匿名函数-闭包"><span>匿名函数（闭包）</span></a></h4><p>匿名函数，也称为闭包，是没有指定名称的函数。它们通常用于回调函数参数和变量赋值：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Hello &quot;</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello John!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p>在 PHP 中，数组是一种复合数据类型，可以存储多个值。数组中的每个值称为元素，每个元素由一个键（key）和一个值（value）组成。数组可以有数字索引或字符串索引。</p><h4 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h4><p>可以使用 <code>array()</code> 函数或 <code>[]</code> 短数组语法来创建数组：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 使用 array() 函数</span>
<span class="token variable">$fruits</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;cherry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 [] 短数组语法</span>
<span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引数组" tabindex="-1"><a class="header-anchor" href="#索引数组"><span>索引数组</span></a></h4><p>索引数组用连续的整数作为键（key）。在没有指定键的情况下，数组的键会自动分配，并从 0 开始：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$numbers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$numbers</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关联数组" tabindex="-1"><a class="header-anchor" href="#关联数组"><span>关联数组</span></a></h4><p>关联数组使用您指定的键（通常是字符串）：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$age</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Peter&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;John&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;Jane&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">22</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将多个项添加到关联数组：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;brand&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Ford&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;model&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Mustang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$cars</span> <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;color&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;year&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">1964</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h4><p>数组的元素也可以是另一个数组，这样就形成了多维数组：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$matrix</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$matrix</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组"><span>遍历数组</span></a></h4><p>可以使用循环来遍历数组：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 遍历索引数组</span>
<span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token keyword">as</span> <span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$color</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放$color</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历关联数组</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Peter&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;John&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;Jane&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">22</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=&gt;</span> <span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot; is &quot;</span> <span class="token operator">.</span> <span class="token variable">$age</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot; years old.\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>遍历完成之后最好使用<code>unset($xxx)</code>释放清除变量。</p></blockquote><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// echo $cars[1];</span>
<span class="token keyword">echo</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>unset</code>函数不会重新排列索引， 这意味着删除后，数组将不再包含缺少的索引。</p></blockquote><h4 id="常用数组函数" tabindex="-1"><a class="header-anchor" href="#常用数组函数"><span>常用数组函数</span></a></h4><p>PHP 提供了许多数组操作的内置函数：</p><ul><li><code>count($array)</code> - 计算数组中的元素数量</li><li><code>array_push($array, $value)</code> - 向数组末尾添加一个或多个元素</li><li><code>array_pop($array)</code> - 弹出并返回数组的<strong>最后一个</strong>元素</li><li><code>array_shift($array)</code> - 弹出并返回数组的<strong>第一个</strong>元素</li><li><code>array_unshift($array, $value)</code> - 在数组开头插入一个或多个元素</li><li><code>array_merge($array1, $array2)</code> - 合并一个或多个数组</li><li><code>array_slice($array, $offset, $length)</code> - 从数组中取出一段</li><li><code>**array_splice**($input, $offset, $length, $replacement)</code> - 把数组中的一部分去掉并用其他值取代；<code>$replacement</code>可以为空以删除<code>$length</code>个元素。</li><li><code>sort($array)</code> - 对数组进行升序排序</li><li><code>rsort($array)</code> - 对数组进行降序排序</li><li><code>asort($array)</code> - 对关联数组按照值进行升序排序，并保持索引关系</li><li><code>ksort($array)</code> - 对关联数组按照键进行升序排序</li><li><code>array_map($callback, $array)</code> - 对数组中的每个元素应用回调函数</li><li><code>array_filter($array, $callback)</code> - 使用回调函数过滤数组中的元素</li><li><code>array_reduce($array, $callback, $initial)</code> - 用回调函数迭代地将数组简化为单一的值</li><li><code>array_key_exists($key, $array)</code> - 检查给定的键或索引是否存在于数组中</li><li><code>in_array($value, $array)</code> - 检查数组中是否存在某个值</li><li><code>array_keys($array)</code> - 返回数组中所有的键</li><li><code>array_values($array)</code> - 返回数组中所有的值</li><li><code>array_flip($array)</code> - 交换数组中的键和值</li><li><code>array_combine($keys, $values)</code> - 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</li><li><code>array_diff($array1, $array2)</code> - 计算数组的差集</li><li><code>array_intersect($array1, $array2)</code> - 计算数组的交集</li><li><code>array_unique($array)</code> - 移除数组中的重复的值</li><li><code>array_search($value, $array)</code> - 在数组中搜索给定的值，并返回首个相应的键名</li><li><code>array_multisort($array)</code> - 对多个数组或多维数组进行排序</li><li><code>array_rand($array, $num)</code> - 从数组中随机取出一个或多个单元</li><li><code>list($var1, $var2, ...) = $array</code> - 把数组中的值赋给一些变量</li></ul><h3 id="超级全局变量" tabindex="-1"><a class="header-anchor" href="#超级全局变量"><span>超级全局变量</span></a></h3><h4 id="globals" tabindex="-1"><a class="header-anchor" href="#globals"><span><code>$GLOBALS</code></span></a></h4><p><code>$GLOBALS</code> 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。<br> PHP 在名为 <code>$GLOBALS[index]</code> 的数组中存储了所有全局变量。变量的名字就是数组的键。<br> 下面的例子展示了如何使用超级全局变量 <code>$GLOBALS</code></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function-definition function">addition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;z&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;y&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">addition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span><code>$_SERVER</code></span></a></h4><p><code>$_SERVER</code> 是一个包含了 <strong>报头、路径和脚本位置</strong>等的数组。这个数组由 Web 服务器创建，并且它的内容可以根据服务器的不同而有所差异。<br> 常见的 <code>$_SERVER</code> 数组的索引包括：</p><ul><li><code>$_SERVER[&#39;HTTP_HOST&#39;]</code> - 当前请求的主机名。</li><li><code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code> - 页面请求的方法，如 <code>GET</code> 或 <code>POST</code>。</li><li><code>$_SERVER[&#39;REQUEST_URI&#39;]</code> - URL 中的路径。</li><li><code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code> - 执行脚本的绝对路径。</li><li><code>$_SERVER[&#39;SERVER_NAME&#39;]</code> - 服务器名。</li><li><code>$_SERVER[&#39;SERVER_PORT&#39;]</code> - 服务器端口号。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> - 用户的 IP 地址。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909025.png" alt="image" loading="lazy"><br><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171909655.png" alt="image" title="$_SERVER中最重要的元素" loading="lazy"></p><h4 id="request" tabindex="-1"><a class="header-anchor" href="#request"><span><code>$_REQUEST</code></span></a></h4><p><code>$_REQUEST</code> 用于收集 HTML 表单提交的数据。<br><code>$_REQUEST</code> 默认包含了 <code>$_GET</code>、<code>$_POST</code> 和 <code>$_COOKIE</code> 的内容。它用于收集提交到脚本的数据，无论是通过 GET 请求、POST 请求还是 cookies。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;PHP_SELF&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fname<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;REQUEST_METHOD&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// collect value of input field</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;fname&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Name is empty&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么是 <code>htmlspecialchars()</code>?<br><code>htmlspecialchars()</code>把特殊字符转换为 HTML 实体。这意味着 &lt; 和 &gt; 之类的 HTML 字符会被替换为 <code>&amp;lt;</code> 和<code> &amp;gt;</code>。这样可防止攻击者通过在表单中注入 HTML 或 JavaScript 代码（跨站点脚本攻击）对代码进行利用。</p><h4 id="post" tabindex="-1"><a class="header-anchor" href="#post"><span><code>$_POST</code></span></a></h4><p><code>$_POST</code> 用于收集表单提交的数据。当使用 HTTP <strong>POST</strong> 方法提交表单时，表单里的数据将作为 <code>$_POST</code> 数组的值。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;PHP_SELF&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fname<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;REQUEST_METHOD&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// collect value of input field</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;fname&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Name is empty&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span><code>$_GET</code></span></a></h4><p><code>$_GET</code> 可以收集 <strong>URL 参数</strong>，也就是查询字符串（query string）。当使用 HTTP **GET **方法请求页面时，可以通过 <code>$_GET</code> 数组访问所有的查询参数。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_get.php?subject=PHP&amp;web=W3schools.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Test $GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Study &quot;</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot; at &quot;</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;web&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token delimiter important">?&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="files" tabindex="-1"><a class="header-anchor" href="#files"><span><code>$_FILES</code></span></a></h4><p><code>$_FILES</code> 用于收集通过 HTTP POST 方法上传的文件的信息。它可以包含多个属性，如 name（原文件名）、type（文件类型）、tmp_name（文件在服务器上的临时副本的路径）、error（任何上传错误的代码）、size（文件大小，单位是字节）。</p><h4 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span><code>$_ENV</code></span></a></h4><p><code>$_ENV</code> 包含了通过环境方式传递给当前脚本的变量。这些环境变量是由服务器提供的，通常在服务器的配置文件或操作系统级别设置。 但是，出于安全考虑，很多服务器配置或 PHP 配置文件中可能会禁用 $_ENV 或者清空其中的数据 。</p><h4 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span><code>$_COOKIE</code></span></a></h4><p><code>$_COOKIE</code> 用于收集客户端发送的所有 Cookies。这些 Cookies 是由 HTTP Cookies 头发送的，并且可以用来识别用户、存储用户偏好等。 例如，如果一个用户在登录表单中选择了“记住我”，登录信息可以被存储在 Cookies 中供后续访问时使用。</p><h4 id="session" tabindex="-1"><a class="header-anchor" href="#session"><span><code>$_SESSION</code></span></a></h4><p><code>$_SESSION</code> 用于存储关于用户会话的信息。会话可以跟踪用户的状态，并且这个数组在用户浏览应用的多个页面时持续存在。要使用会话变量，必须首先启动会话（ 调用 <code>session_start()</code> 函数 ）。</p><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h4><p>处理 <code>$_GET</code> 和 <code>$_POST</code> 时，出于安全考虑，应始终验证和清理用户输入。不要直接使用来自用户的数据，例如在数据库查询中，这可能导致 SQL 注入攻击。推荐使用预处理语句或者适当的过滤函数来处理输入数据。<br> 超级全局变量的使用不需要额外的声明，它们在 PHP 脚本中始终可用。不过，它们的内容依赖于请求的上下文和执行环境。</p><h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h3><p>下面是一些正则表达式的基本组件和它们的含义：</p><h4 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类"><span>字符类</span></a></h4><ul><li><code>.</code>: 匹配除换行符以外的任意单个字符。</li><li><code>[abc]</code>: 匹配方括号内的任意一个字符（在这个例子中是 <code>a</code>、<code>b</code> 或 <code>c</code>）。</li><li><code>[^abc]</code>: 匹配不在方括号内的任意一个字符。</li><li><code>\\d</code>: 匹配任意一个数字，相当于 <code>[0-9]</code>。</li><li><code>\\D</code>: 匹配任意一个非数字字符，相当于 <code>[^0-9]</code>。</li><li><code>\\w</code>: 匹配任意一个字母数字字符（包括下划线），相当于 <code>[a-zA-Z0-9_]</code>。</li><li><code>\\W</code>: 匹配任意一个非字母数字字符，相当于 <code>[^a-zA-Z0-9_]</code>。</li><li><code>\\s</code>: 匹配任意一个空白字符（包括空格、制表符、换行符等）。</li><li><code>\\S</code>: 匹配任意一个非空白字符。=</li></ul><h4 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符"><span>限定符</span></a></h4><ul><li><code>*</code>: 匹配前面的子表达式零次或多次。</li><li><code>+</code>: 匹配前面的子表达式一次或多次。</li><li><code>?</code>: 匹配前面的子表达式零次或一次。</li><li><code>{n}</code>: 匹配前面的子表达式恰好 <code>n</code> 次。</li><li><code>{n,}</code>: 匹配前面的子表达式至少 <code>n</code> 次。</li><li><code>{n,m}</code>: 匹配前面的子表达式至少 <code>n</code> 次，但不超过 <code>m</code> 次。</li></ul><h4 id="位置和边界" tabindex="-1"><a class="header-anchor" href="#位置和边界"><span>位置和边界</span></a></h4><ul><li><code>^</code>: 匹配字符串的开头。</li><li><code>$</code>: 匹配字符串的结尾。</li><li><code>\\b</code>: 匹配单词边界。</li><li><code>\\B</code>: 匹配非单词边界。</li></ul><h4 id="分组和引用" tabindex="-1"><a class="header-anchor" href="#分组和引用"><span>分组和引用</span></a></h4><ul><li><code>(...)</code>: 将括号内的表达式定义为一个组，并按照出现的顺序编号。</li><li><code>x|y</code>: 匹配 <code>x</code> 或 <code>y</code>。</li><li><code>\\n</code>: 引用编号为 <code>n</code> 的分组匹配到的内容。</li></ul><h4 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h4><ul><li><code>\\\\</code>: 匹配 <code>\\</code> 字符本身。</li><li><code>\\*</code>: 匹配 <code>*</code> 字符本身（适用于其他特殊字符）。</li></ul><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h4><p>假设我们有一个正则表达式：<code>^\\d{3}-\\d{2}-\\d{4}$</code><br> 这个表达式可以用来匹配美国的社会安全号码（SSN）格式，具体如下：</p><ul><li><code>^</code>: 表示匹配的字符串必须从行首开始。</li><li><code>\\d{3}</code>: 匹配三个数字。</li><li><code>-</code>: 匹配连字符。</li><li><code>\\d{2}</code>: 匹配两个数字。</li><li><code>-</code>: 再次匹配连字符。</li><li><code>\\d{4}</code>: 匹配四个数字。</li><li><code>$</code>: 表示匹配的字符串必须在行尾结束。</li></ul><p>因此，这个正则表达式会匹配类似 <code>123-45-6789</code> 这样格式的字符串。</p><h4 id="php的正则表达式函数" tabindex="-1"><a class="header-anchor" href="#php的正则表达式函数"><span>PHP的正则表达式函数</span></a></h4><p>在 PHP 中，处理正则表达式主要通过 <code>preg_</code> 系列的函数，这是因为 PHP 使用的是 PCRE (Perl Compatible Regular Expressions) 库。以下是一些常用的 <code>preg_</code> 函数及其用法：</p><ul><li><code>preg_match()</code>: 执行一个正则表达式匹配。</li><li><code>preg_match_all()</code>: 执行一个全局正则表达式匹配。</li><li><code>preg_replace()</code>: 执行一个正则表达式的搜索和替换。</li><li><code>preg_split()</code>: 通过一个正则表达式分隔字符串。</li><li><code>preg_grep()</code>: 返回一个包含所有匹配项的数组。</li><li><code>preg_quote()</code>: 转义正则表达式字符。</li></ul><h5 id="preg-match" tabindex="-1"><a class="header-anchor" href="#preg-match"><span><code>preg_match()</code></span></a></h5><p><code>preg_match()</code> 函数用于执行一个正则表达式匹配，检查正则表达式是否与指定的字符串匹配。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/foo/&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;foobar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;匹配成功&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;匹配失败&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="preg-match-all" tabindex="-1"><a class="header-anchor" href="#preg-match-all"><span><code>preg_match_all()</code></span></a></h5><p><code>preg_match_all()</code> 函数用于执行全局正则表达式匹配，它会匹配所有符合模式的项，而不是像 <code>preg_match()</code> 那样只匹配一次。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/\\d+/&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 匹配数字</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;有 1 点，2 分，和 3 秒&#39;</span><span class="token punctuation">;</span>
<span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="preg-replace" tabindex="-1"><a class="header-anchor" href="#preg-replace"><span><code>preg_replace()</code></span></a></h5><p><code>preg_replace()</code> 函数用于执行一个正则表达式的搜索和替换。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/\\d+/&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 匹配数字</span>
<span class="token variable">$replacement</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;#&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;有 1 点，2 分，和 3 秒&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$replacement</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="preg-split" tabindex="-1"><a class="header-anchor" href="#preg-split"><span><code>preg_split()</code></span></a></h5><p><code>preg_split()</code> 函数用于通过一个正则表达式分割字符串。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/[\\s,]+/&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 匹配空白字符或逗号</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;one, two, three, four&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$parts</span> <span class="token operator">=</span> <span class="token function">preg_split</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$parts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="preg-grep" tabindex="-1"><a class="header-anchor" href="#preg-grep"><span><code>preg_grep()</code></span></a></h5><p><code>preg_grep()</code> 函数用于返回一个包含所有匹配项的数组。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/^(\\s*[a-zA-Z]+\\s*)+$/&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 匹配全字母的行</span>
<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Line 1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Line 2&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;12345&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Line 4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">preg_grep</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="preg-quote" tabindex="-1"><a class="header-anchor" href="#preg-quote"><span><code>preg_quote()</code></span></a></h5><p><code>preg_quote()</code> 函数用于转义正则表达式字符，这在动态构建正则表达式时非常有用。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$keyword</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;40 (forty)&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;/&#39;</span><span class="token operator">.</span><span class="token function">preg_quote</span><span class="token punctuation">(</span><span class="token variable">$keyword</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;This is 40 (forty), that is 20 (twenty).&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;找到匹配项&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;未找到匹配项&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表单处理" tabindex="-1"><a class="header-anchor" href="#表单处理"><span>表单处理</span></a></h2><h3 id="数据格式" tabindex="-1"><a class="header-anchor" href="#数据格式"><span>数据格式</span></a></h3><p>PHP 提供了一些内置函数和过滤器，可以用来验证和过滤常见的数据类型，如电子邮箱、URL 等。这些工具是 PHP 的过滤器扩展的一部分，这个扩展默认是开启的。对于电话号码，由于格式多样，PHP 没有内置的验证函数，通常需要使用正则表达式进行验证。</p><h4 id="电子邮箱" tabindex="-1"><a class="header-anchor" href="#电子邮箱"><span>电子邮箱</span></a></h4><p>要验证电子邮箱，可以使用 <code>filter_var()</code> 函数搭配 <code>FILTER_VALIDATE_EMAIL</code> 过滤器：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;user@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;无效的邮箱格式&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;有效的邮箱格式&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span>URL</span></a></h4><p>验证 URL，可以使用 <code>filter_var()</code> 函数搭配 <code>FILTER_VALIDATE_URL</code> 过滤器：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;http://www.example.com&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_URL</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;无效的 URL&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;有效的 URL&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ip-地址" tabindex="-1"><a class="header-anchor" href="#ip-地址"><span>IP 地址</span></a></h4><p>验证 IP 地址，可以使用 <code>filter_var()</code> 函数搭配 <code>FILTER_VALIDATE_IP</code> 过滤器：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;无效的 IP 地址&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;有效的 IP 地址&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="电话号码" tabindex="-1"><a class="header-anchor" href="#电话号码"><span>电话号码</span></a></h4><p>对于电话号码，可以使用正则表达式来验证，因为电话号码的格式因国家和地区而异，没有通用的验证方式。下面是一个简单的例子，用正则表达式验证美国的电话号码格式：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;(555) 555-5555&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/^\\(\\d{3}\\) \\d{3}-\\d{4}$/&quot;</span><span class="token punctuation">,</span> <span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;有效的电话号码&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;无效的电话号码&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的正则表达式检查电话号码是否符合 <code>(xxx) xxx-xxxx</code> 的格式，其中 <code>x</code> 表示一个数字。</p><h3 id="数据清洗" tabindex="-1"><a class="header-anchor" href="#数据清洗"><span>数据清洗</span></a></h3><h4 id="sql注入" tabindex="-1"><a class="header-anchor" href="#sql注入"><span>SQL注入</span></a></h4><h4 id="xss攻击" tabindex="-1"><a class="header-anchor" href="#xss攻击"><span>XSS攻击</span></a></h4><p>防止跨站脚本攻击（XSS）是 Web 安全中的一个重要环节。XSS 攻击发生在攻击者将恶意脚本注入到其他用户会查看的页面中。当其他用户加载受攻击的页面时，恶意脚本会执行，可能会盗取 cookies、会话令牌或其他敏感信息，甚至可以篡改页面内容。<br> 以下是一些预防 XSS 攻击的最佳实践：</p><h5 id="_1-对用户输入进行编码" tabindex="-1"><a class="header-anchor" href="#_1-对用户输入进行编码"><span>1. 对用户输入进行编码</span></a></h5><p>在将用户输入呈现在页面上时，确保对 HTML 特殊字符（如 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&quot;</code>, <code>&#39;</code> 等）进行转义。这样可以避免这些字符被浏览器解释为代码的一部分。在 PHP 中，可以使用 <code>htmlspecialchars()</code> 或 <code>htmlentities()</code> 函数来实现：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 转义 HTML 特殊字符</span>
<span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$userInput</span><span class="token punctuation">,</span> <span class="token constant">ENT_QUOTES</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-使用内容安全策略-csp" tabindex="-1"><a class="header-anchor" href="#_2-使用内容安全策略-csp"><span>2. 使用内容安全策略（CSP）</span></a></h5><p>内容安全策略是一个额外的安全层，可以帮助减轻 XSS 攻击的风险。CSP 通过指定哪些动态资源允许执行和加载，从而限制 XSS 攻击的影响。你可以通过设置 HTTP 头部 <code>Content-Security-Policy</code> 来实现：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 设置 CSP 头部</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Content-Security-Policy: script-src &#39;self&#39;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-使用安全的-api-和框架" tabindex="-1"><a class="header-anchor" href="#_3-使用安全的-api-和框架"><span>3. 使用安全的 API 和框架</span></a></h5><p>使用支持自动编码的模板系统和框架，如 React、Vue.js 或 Angular。这些框架默认对输出进行编码，从而降低 XSS 的风险。</p><h5 id="_4-验证和过滤所有的输入" tabindex="-1"><a class="header-anchor" href="#_4-验证和过滤所有的输入"><span>4. 验证和过滤所有的输入</span></a></h5><p>尽管编码输出是防止 XSS 的关键，但对所有输入进行验证和过滤也非常重要。确保对所有的输入数据进行严格的验证，对于不符合预期格式的输入应当拒绝或进行清理。</p><h5 id="_5-避免创建-dom-节点与-html-字符串" tabindex="-1"><a class="header-anchor" href="#_5-避免创建-dom-节点与-html-字符串"><span>5. 避免创建 DOM 节点与 HTML 字符串</span></a></h5><p>避免使用 <code>innerHTML</code>、<code>document.write()</code> 或类似的方法，它们可以将字符串解析为 HTML，这可能导致 XSS 漏洞。相反，使用 <code>textContent</code> 属性或创建 DOM 节点的方法来安全地修改页面内容。</p><h5 id="_6-使用-http-only-和-secure-标志的-cookies" tabindex="-1"><a class="header-anchor" href="#_6-使用-http-only-和-secure-标志的-cookies"><span>6. 使用 HTTP Only 和 Secure 标志的 cookies</span></a></h5><p>如果你的应用程序使用 cookies，设置 <code>HttpOnly</code> 和 <code>Secure</code> 标志可以增加安全性。<code>HttpOnly</code> 标志阻止 JavaScript 访问 cookie，<code>Secure</code> 标志确保 cookie 仅通过 HTTPS 传输。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 设置 cookies</span>
<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SecureCookie&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;expires&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;path&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;domain&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;secure&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;httponly&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;samesite&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Lax&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级"><span>高级</span></a></h2><h3 id="日期时间" tabindex="-1"><a class="header-anchor" href="#日期时间"><span>日期时间</span></a></h3><h4 id="字符格式" tabindex="-1"><a class="header-anchor" href="#字符格式"><span>字符格式</span></a></h4><p>在PHP中，<code>date()</code> 函数和 <code>DateTime::format()</code> 方法使用特定的字符格式化日期和时间。以下是一些常用的格式化字符及其含义：</p><table><thead><tr><th>字符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>Y</code></td><td>四位数年份</td><td>2024</td></tr><tr><td><code>y</code></td><td>两位数年份</td><td>24</td></tr><tr><td><code>m</code></td><td>两位数月份（带前导零）</td><td>01-12</td></tr><tr><td><code>n</code></td><td>月份，不带前导零</td><td>1-12</td></tr><tr><td><code>M</code></td><td>三个字母缩写表示的月份</td><td>Jan-Dec</td></tr><tr><td><code>F</code></td><td>完整月份名称</td><td>January-December</td></tr><tr><td><code>d</code></td><td>两位数天数（带前导零）</td><td>01-31</td></tr><tr><td><code>j</code></td><td>天数，不带前导零</td><td>1-31</td></tr><tr><td><code>D</code></td><td>三个字母缩写表示的星期几</td><td>Mon-Sun</td></tr><tr><td><code>l</code></td><td>完整星期几名称</td><td>Sunday-Saturday</td></tr><tr><td><code>H</code></td><td>两位数24小时制小时（带前导零）</td><td>00-23</td></tr><tr><td><code>h</code></td><td>两位数12小时制小时（带前导零）</td><td>01-12</td></tr><tr><td><code>G</code></td><td>24小时制小时，不带前导零</td><td>0-23</td></tr><tr><td><code>g</code></td><td>12小时制小时，不带前导零</td><td>1-12</td></tr><tr><td><code>i</code></td><td>两位数分钟（带前导零）</td><td>00-59</td></tr><tr><td><code>s</code></td><td>两位数秒数（带前导零）</td><td>00-59</td></tr><tr><td><code>a</code></td><td>小写的上午和下午值</td><td>am 或 pm</td></tr><tr><td><code>A</code></td><td>大写的上午和下午值</td><td>AM 或 PM</td></tr><tr><td><code>T</code></td><td>本机所在的时区</td><td>EST, MDT 等</td></tr><tr><td><code>O</code></td><td>与格林威治时间相差的小时和分钟数</td><td>+0200</td></tr><tr><td><code>P</code></td><td>与格林威治时间相差的小时和分钟数，小时和分钟分开表示</td><td>+02:00</td></tr><tr><td><code>c</code></td><td>ISO 8601 日期</td><td>2024-03-22T17:45:12+02:00</td></tr><tr><td><code>r</code></td><td>RFC 2822 格式化的日期</td><td>Thu, 21 Dec 2024 16:01:07 +0200</td></tr></tbody></table><p>使用这些字符，您可以创建各种日期和时间格式。例如：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d H:i:s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出类似 &quot;2024-03-22 17:45:12&quot;</span>
<span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;l, F j, Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出类似 &quot;Friday, March 22, 2024&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见方法" tabindex="-1"><a class="header-anchor" href="#常见方法"><span>常见方法</span></a></h4><p>设置时区<code>date_default_timezone_set(&quot;Asia/Shanghai&quot;);</code></p><hr><p>输出当前时间戳<code>time()</code></p><hr><p>把时间戳格式化为更易读的日期和时间<code>date(_format_,_timestamp_)</code></p><ul><li>format：必需；规定时间戳的格式。</li><li>timestamp：可选。规定时间戳。默认是当前时间和日期。</li></ul><hr><p>创建日期<code>mktime()</code><br> 该函数是 PHP 中用于获取特定日期和时间的 Unix 时间戳的内置函数。这个函数最多可以接受六个参数，依次指定小时、分钟、秒、月、日和年。<br> 以下是 <code>mktime()</code> 函数的语法：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword type-declaration">int</span> <span class="token function">mktime</span> <span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$hour</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;H&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$minute</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;i&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;s&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$month</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;n&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$day</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;j&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$year</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Y&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 
            <span class="token keyword type-hint">int</span> <span class="token variable">$is_dst</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>$hour</code> - 时间的小时部分。</li><li><code>$minute</code> - 时间的分钟部分。</li><li><code>$second</code> - 时间的秒部分。</li><li><code>$month</code> - 日期的月份部分。</li><li><code>$day</code> - 日期的日部分。</li><li><code>$year</code> - 日期的年份部分。</li><li><code>$is_dst</code> - 此参数可以在时间为夏令时时设置为 1，在非夏令时时设置为 0，或者在不确定时间是否为夏令时时设置为 -1（默认值）。</li></ul><p>如果你没有提供某个参数，<code>mktime()</code> 会使用当前日期和时间为该参数的值。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$timestamp</span> <span class="token operator">=</span> <span class="token function">mktime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$timestamp</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会输出 2024 年 1 月 1 日午夜时刻的 Unix 时间戳，基于服务器的本地时区。<br> 从 PHP 5.1.0 开始，<code>mktime()</code> 的所有参数都是可选的，并且每个参数都有一个默认值。如果你调用 <code>mktime()</code> 时没有任何参数，它将返回当前的 Unix 时间戳。<br> 此外，在 PHP 7.0.0 及更新版本中，<code>is_dst</code> 参数已被弃用。由于夏令时的应用规则有所变化，依赖此参数可能会导致意外的结果。因此，你应该始终为你的脚本或应用程序使用正确的时区设置。</p><hr><p><code>strtotime</code><br><code>strtotime()</code> 函数是 PHP 中用于将英文文本日期格式转换为 Unix 时间戳的函数。这个函数非常强大，因为它可以解析多种英语日期和时间格式，并将其转换为自 Unix 纪元（1970 年 1 月 1 日 00:00:00 UTC）以来经过的秒数。<br> 以下是 <code>strtotime()</code> 函数的基本用法：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword type-declaration">int</span> <span class="token function">strtotime</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$time</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>$time</code> - 以英文格式表示的字符串日期时间。</li><li><code>$now</code> - 可选参数，用于指定计算所基于的时间戳，默认是当前时间。</li></ul><p>这里有一些 <code>strtotime()</code> 函数的使用示例：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;10 September 2000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 指定日期的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间加一天的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 week&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间加一星期的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 week 2 days 4 hours 2 seconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间加上特定时间间隔的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;next Thursday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 下一个星期四的 Unix 时间戳</span>
<span class="token keyword">echo</span> <span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;last Monday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 上一个星期一的 Unix 时间戳</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>strtotime()</code> 函数非常灵活，适用于各种场合。例如，它可以用于计算在未来或过去的特定日期和时间，或者用于解析用户输入的自然语言日期。<br> 需要注意的是，<code>strtotime()</code> 会根据服务器设置的时区来解析时间。如果需要处理不同的时区，应该使用 <code>DateTime</code> 类与 <code>DateTimeZone</code> 类一起，来指定正确的时区。</p><hr><p>DateTimeZone类</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$timezone</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeZone</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Europe/Paris&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>检查日期有效性<code>checkdate()</code><br> 该函数检查日、月、年是否构成一个有效的格里高利日期。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">checkdate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false) 因为2023年没有2月29日</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">checkdate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true) 2024年是闰年，有2月29日</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="datetime-类" tabindex="-1"><a class="header-anchor" href="#datetime-类"><span>DateTime 类</span></a></h4><p><code>DateTime</code> 类用于表示日期和时间，可以表示任何日期和时间，包括过去的、现在的和未来的。并提供了一系列的方法来操作它们。这个类从 PHP 5.2.0 开始引入。<br> 创建 <code>DateTime</code> 对象：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dateTime</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间</span>
<span class="token variable">$dateTime</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2024-03-22 10:00:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定日期和时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化日期和时间：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$dateTime</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d H:i:s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出日期和时间的字符串表示</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改日期和时间：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dateTime</span><span class="token operator">-&gt;</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;+1 day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间加一天</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取和设置时区：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$timezone</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeZone</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;America/New_York&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dateTime</span><span class="token operator">-&gt;</span><span class="token function">setTimezone</span><span class="token punctuation">(</span><span class="token variable">$timezone</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 DateTime 对象的时区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dateinterval-类" tabindex="-1"><a class="header-anchor" href="#dateinterval-类"><span>DateInterval 类</span></a></h4><p><code>DateInterval</code> 类用于表示日期和时间之间的间隔。它可以用来计算两个日期或时间之间的差值。可以用于添加或减去一个时间段从 <code>DateTime</code> 对象。<br> 创建 <code>DateInterval</code> 对象：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$interval</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;P1D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表示一个周期为一天的时间间隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>DateInterval</code> 修改 <code>DateTime</code> 对象：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dateTime</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$interval</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 DateTime 对象上添加时间间隔</span>
<span class="token variable">$dateTime</span><span class="token operator">-&gt;</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token variable">$interval</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 DateTime 对象上减去时间间隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="datetimeimmutable-类" tabindex="-1"><a class="header-anchor" href="#datetimeimmutable-类"><span>DateTimeImmutable 类</span></a></h4><p><code>DateTimeImmutable</code> 类是从 PHP 5.5.0 引入的，表示不可变的日期和时间，它与 <code>DateTime</code> 类似，但所有修改日期和时间的方法都会保持原对象不变，而返回一个修改后的新对象。<br> 创建 <code>DateTimeImmutable</code> 对象：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dateTimeImmutable</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeImmutable</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>DateTimeImmutable</code> 对象（注意：每次修改都会返回一个新对象）：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$newDateTimeImmutable</span> <span class="token operator">=</span> <span class="token variable">$dateTimeImmutable</span><span class="token operator">-&gt;</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;+1 day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个新的对象，代表加一天后的日期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 <code>DateTimeImmutable</code> 对象在修改后返回新的实例，它在某些场合下更为适用，特别是在不希望原始日期被修改的情况下。<br> 所有这些类都支持更多复杂的日期和时间操作，比如计算日期差异（使用 <code>date_diff</code> 函数或 <code>DateTime::diff</code> 方法），检查日期的有效性等。使用这些类可以让日期和时间的处理变得更加简单和直观。</p><h4 id="日期周期的重复事件" tabindex="-1"><a class="header-anchor" href="#日期周期的重复事件"><span>日期周期的重复事件</span></a></h4><p><code>DatePeriod</code> 类可以用来处理重复发生的事件。例如，如果你想获取接下来的每个星期一的日期：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$start</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2024-03-22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$interval</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;P1W&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一周一次</span>
<span class="token variable">$recurrences</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 获取4次事件</span>
<span class="token variable">$period</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatePeriod</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$interval</span><span class="token punctuation">,</span> <span class="token variable">$recurrences</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$period</span> <span class="token keyword">as</span> <span class="token variable">$date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$date</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; is a Monday&#39;</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件引入" tabindex="-1"><a class="header-anchor" href="#文件引入"><span>文件引入</span></a></h3><p>在 PHP 中，<code>include</code> 和 <code>require</code> 语句用于在执行脚本的时候插入一个文件的内容到另一个文件中。这两个语句相似，但它们在处理文件无法找到或不可读的情况下的行为不同。</p><h4 id="include" tabindex="-1"><a class="header-anchor" href="#include"><span>include</span></a></h4><p><code>include</code> 语句在 PHP 脚本中包含并运行指定文件。如果文件不存在或者由于某些原因无法包含，<code>include</code> 会发出一个警告（E_WARNING），但脚本会继续执行。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">include</span> <span class="token string single-quoted-string">&#39;file.php&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="require" tabindex="-1"><a class="header-anchor" href="#require"><span>require</span></a></h4><p>与 <code>include</code> 类似，<code>require</code> 语句也是用来包含文件的，但如果指定的文件不存在或者无法包含，<code>require</code> 会发出一个致命错误（E_COMPILE_ERROR），并且脚本会停止执行。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">require</span> <span class="token string single-quoted-string">&#39;file.php&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="include-once-、-require-once" tabindex="-1"><a class="header-anchor" href="#include-once-、-require-once"><span>include_once 、 require_once</span></a></h4><p><code>include_once</code> 和 <code>require_once</code> 语句的功能类似于 <code>include</code> 和 <code>require</code>，但它们会首先检查指定的文件在当前脚本中是否已经被包含过，如果是，则不会再次包含。这可以防止函数定义、类定义或其他代码因多次包含同一个文件而发生冲突。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">include_once</span> <span class="token string single-quoted-string">&#39;file.php&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string single-quoted-string">&#39;file.php&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="include-、require-的使用场景" tabindex="-1"><a class="header-anchor" href="#include-、require-的使用场景"><span>include 、require 的使用场景</span></a></h4><p>在 PHP 编程中，当你的项目变得庞大，需要组织和管理大量的代码时，将代码分散到不同的文件中就变得非常有用。<code>include</code> 和 <code>require</code> 语句让你能够将 PHP 文件分成可重用的模块，如函数库、配置文件和页面模板等。</p><h5 id="函数库" tabindex="-1"><a class="header-anchor" href="#函数库"><span>函数库</span></a></h5><p>如果你有一组在多个脚本中都要使用的自定义函数，通常会将它们放在一个单独的文件中，然后在需要使用这些函数的文件中使用 <code>include</code> 或 <code>require</code> 来载入它们。</p><h5 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h5><p>配置文件通常包含数据库连接信息和全局设置。这些文件应该使用 <code>require</code> 语句包含，因为如果配置文件缺失，应用程序通常无法正常运行。</p><h5 id="页面模板" tabindex="-1"><a class="header-anchor" href="#页面模板"><span>页面模板</span></a></h5><p>在基于模板的网站设计中，页面顶部、底部和菜单等元素通常是重复的。你可以将它们各自放在不同的文件中，并在每个页面中使用 <code>include</code> 语句来载入它们。</p><h4 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h4><p><code>include</code> 和 <code>require</code> 的主要区别在于它们如何处理文件包含失败的情况：</p><ul><li>使用 <code>include</code> 时，如果文件不存在，PHP 会发出一个警告，然后继续执行余下的脚本。这对于非关键性的文件包含是有用的。</li><li>使用 <code>require</code> 时，如果文件不存在，PHP 会发出一个错误，并停止执行脚本。这对于那些没有它们程序就无法运行的关键性文件来说非常重要。</li></ul><h4 id="性能考虑" tabindex="-1"><a class="header-anchor" href="#性能考虑"><span>性能考虑</span></a></h4><p>在性能方面，<code>include</code> 和 <code>require</code> 通常没有显著差异。但是，使用 <code>include_once</code> 和 <code>require_once</code> 可能会稍微慢一些，因为 PHP 必须检查要包含的文件是否已经包含过了。<br> 然而，这种性能差异通常是微乎其微的，并且在实际应用中几乎可以忽略不计。代码的组织和可维护性远比微小的性能差异更加重要。</p><h4 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h4><ul><li>为了应用程序的稳定性和可维护性，应该始终使用 <code>require_once</code> 来包含关键的依赖文件，例如配置文件和重要的函数库。</li><li>使用 <code>include</code> 或 <code>include_once</code> 来包含模板文件或者可能会根据不同情况而改变的文件。</li><li>避免在 <code>include</code> 或 <code>require</code> 语句中使用相对路径，因为这会使代码的移植性变差。建议使用绝对路径，你可以使用 PHP 的魔术常量 <code>__DIR__</code> 来获取当前文件所在的目录，以确保包含路径的准确性。</li><li>避免在条件语句中多次包含同一个文件，这样不仅会影响性能，还可能导致函数重定义或者类重复定义的错误。此时，使用 <code>include_once</code> 或 <code>require_once</code> 是一个明智的选择。</li></ul><h3 id="文件处理" tabindex="-1"><a class="header-anchor" href="#文件处理"><span>文件处理</span></a></h3><h4 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h4><h5 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h5><ol><li>打开文件</li></ol><p>使用 <code>fopen()</code> 函数可以打开文件。此函数需要两个参数：文件的路径和打开模式。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开文件用于读取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171910013.png" alt="文件打开方式" tabindex="0" loading="lazy"><figcaption>文件打开方式</figcaption></figure><ol start="2"><li>读取文件</li></ol><ul><li><code>readfile()</code>读取文件全部内容</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;./senior/example.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>fread()</code> 读取打开的文件：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>fgets()</code> 读取单行：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>fgetc()</code> 读取单个字符：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$char</span> <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>file_get_contents</code>读取整个文件到一个字符串</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>file()</code>读取文件并将内容按行分割到一个数组中。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$lines</span> <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 每个数组元素包含文件的一行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>写入文件</li></ol><ul><li><code>fwrite()</code> 或 <code>fputs()</code> 写入文件：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>file_put_contents</code>将一个字符串写入文件（会覆盖文件原来的内容）</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;New content for the file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>关闭文件</li></ol><p>使用 <code>fclose()</code> 函数关闭打开的文件：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>删除文件</li></ol><p>使用 <code>unlink()</code> 函数可以删除文件：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>修改文件</li></ol><p><code>touch()</code>设置文件的访问和修改时间。如果文件不存在，PHP 将尝试创建它。<br><code>copy()</code>将文件复制到新位置<code>copy(&quot;source.txt&quot;, &quot;destination.txt&quot;);</code><br><code>rename()</code> 可以重命名或移动文件<code>rename(&quot;oldname.txt&quot;, &quot;newname.txt&quot;);</code><br><code>move_uploaded_file()</code> 处理上传文件的安全方式，通常用于将上传的文件从临时目录移动到目标目录。<br><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &quot;path/to/target&quot;);</code></p><h5 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h5><ol><li>文件信息</li></ol><ul><li><code>is_file()</code>仅用于检查文件是否存在</li><li><code>file_exists()</code> 检查文件、目录是否存在</li><li><code>filesize()</code> 获取文件大小</li><li><code>filemtime()</code> 获取文件最后修改时间</li><li><code>filetype()</code> 获取文件类型</li><li><code>fileperms()</code>获取文件的权限</li><li><code>fileinode()</code>获取文件的inode</li><li><code>filegroup()</code>获取文件组</li><li><code>fileowner()</code>获取文件所有者</li><li><code>pathinfo()</code>返回文件路径的信息，如目录名、基本名、扩展名和文件名。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/path/to/example.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;dirname&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;basename&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;extension&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;filename&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 自 PHP 5.2.0 起</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>文件位置指针</li></ol><ul><li><code>rewind()</code> 将文件指针重置到开头</li><li><code>ftell()</code> 返回文件指针的当前位置</li><li><code>fseek()</code> 在文件中定位到指定的位置</li></ul><ol start="3"><li>模式匹配</li></ol><ul><li><code>glob()</code>返回匹配指定模式的文件名或目录。</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;*.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// $files 是一个数组，包含当前目录下所有 txt 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="文件锁定" tabindex="-1"><a class="header-anchor" href="#文件锁定"><span>文件锁定</span></a></h5><p>当你在多个脚本中同时写入文件时，使用文件锁定可以避免冲突。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取独占锁定</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Write something...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 刷新输出缓冲到文件</span>
    <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_UN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放锁定</span>
<span class="token punctuation">}</span>

<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h4><h5 id="基本操作-1" tabindex="-1"><a class="header-anchor" href="#基本操作-1"><span>基本操作</span></a></h5><ol><li>创建目录</li></ol><p>使用 <code>mkdir()</code> 函数创建新目录：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;new_directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>删除目录</li></ol><p>使用 <code>rmdir()</code> 函数删除空目录：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;new_directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>读取目录内容</li></ol><p>使用 <code>opendir()</code>、<code>readdir()</code> 和 <code>closedir()</code> 读取目录内容：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;path/to/directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;filename: &quot;</span> <span class="token operator">.</span> <span class="token variable">$file</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1"><span>常用方法</span></a></h5><ul><li><code>is_dir()</code>检查指定路径是否为目录</li></ul><h5 id="目录迭代器" tabindex="-1"><a class="header-anchor" href="#目录迭代器"><span>目录迭代器</span></a></h5><p>PHP 的 DirectoryIterator 类提供了一个简单的接口来遍历文件系统。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$iterator</span> <span class="token keyword">as</span> <span class="token variable">$fileinfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$fileinfo</span><span class="token operator">-&gt;</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token variable">$fileinfo</span><span class="token operator">-&gt;</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h4><p>PHP 中的文件上传是一个相对直接的过程，通常涉及一个 HTML 表单，用于选择文件，以及一个 PHP 脚本，用于处理上传的文件。上传的文件存储在全局数组 <code>$_FILES</code> 中。</p><h5 id="html-表单" tabindex="-1"><a class="header-anchor" href="#html-表单"><span>HTML 表单</span></a></h5><p>首先，你需要创建一个 HTML 表单，允许用户选择要上传的文件。表单的 <code>enctype</code> 必须设置为 <code>multipart/form-data</code>，这样才能正确传输文件。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload.php<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  选择文件：
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileToUpload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileToUpload<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上传文件<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="php-脚本-upload-php" tabindex="-1"><a class="header-anchor" href="#php-脚本-upload-php"><span>PHP 脚本（upload.php）</span></a></h5><p>然后，需要一个 PHP 脚本来接收并处理上传的文件。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$target_dir</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;uploads/&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 指定存储上传文件的目录</span>
<span class="token variable">$target_file</span> <span class="token operator">=</span> <span class="token variable">$target_dir</span> <span class="token operator">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;fileToUpload&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$uploadOk</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token variable">$imageFileType</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$target_file</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查文件大小</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;fileToUpload&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;size&quot;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;对不起，您的文件太大。&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$uploadOk</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 允许特定格式的文件</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$imageFileType</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;jpg&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$imageFileType</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;png&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$imageFileType</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;jpeg&quot;</span>
<span class="token operator">&amp;&amp;</span> <span class="token variable">$imageFileType</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;gif&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;对不起，只允许 JPG, JPEG, PNG &amp; GIF 文件格式。&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$uploadOk</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 检查 $uploadOk 是否因为错误而设置为 0</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$uploadOk</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;对不起，您的文件未被上传。&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 尝试上传文件</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;fileToUpload&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;tmp_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;文件 &quot;</span><span class="token operator">.</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token function">basename</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;fileToUpload&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; 已被上传。&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;对不起，在上传文件时遇到错误。&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 PHP 脚本执行以下操作：</p><ol><li>定义一个目录，用于存储上传的文件。</li><li>获取上传文件的信息，并构造存储路径。</li><li>对上传的文件进行一些检查，例如大小限制和文件类型限制。</li><li>如果检查通过，使用 <code>move_uploaded_file()</code> 函数将文件从临时目录移动到目标目录。</li></ol><h5 id="重要的安全措施" tabindex="-1"><a class="header-anchor" href="#重要的安全措施"><span>重要的安全措施</span></a></h5><ol><li><strong>验证文件类型</strong>：确保上传的文件是允许的类型，以避免上传可执行脚本或其他潜在危险的文件。</li><li><strong>限制文件大小</strong>：限制可以上传的文件大小，以防止服务拒绝攻击（DoS）。</li><li><strong>文件名随机化</strong>：更改上传文件的名称，例如使用 <code>uniqid()</code> 函数生成唯一的文件名，以防止覆盖现有文件和其他潜在的安全风险。</li><li><strong>权限</strong>：确保上传目录的权限设置正确，不允许执行上传的文件。</li><li><strong>用户认证</strong>：仅允许经过认证的用户上传文件。</li><li><strong>错误处理</strong>：将错误信息记录到日志文件中，而不是直接显示给用户，以避免信息泄露。</li></ol><h3 id="cookie-1" tabindex="-1"><a class="header-anchor" href="#cookie-1"><span>Cookie</span></a></h3><p>在 PHP 中，cookie 是一种在客户端存储数据的机制，通常用于识别用户会话、保存用户偏好设置或跟踪用户行为。以下是关于如何在 PHP 中设置、检索和删除 cookie 的信息。</p><h4 id="设置-cookie" tabindex="-1"><a class="header-anchor" href="#设置-cookie"><span>设置 Cookie</span></a></h4><p>PHP 使用 <code>setcookie()</code> 函数来发送一个 cookie。这个函数必须在任何输出发送到浏览器之前被调用，因为它是通过 HTTP 头部来设置 cookie 的。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$cookie_name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$cookie_value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 设置一个简单的 cookie，cookie 的名称是 &quot;user&quot;，值是 &quot;John Doe&quot;；cookie 会在一天后过期</span>
<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token variable">$cookie_name</span><span class="token punctuation">,</span> <span class="token variable">$cookie_value</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">86400</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 86400 = 1 day</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 判断有无该cookie</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token variable">$cookie_name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Cookie named &#39;&quot;</span> <span class="token operator">.</span> <span class="token variable">$cookie_name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&#39; is not set!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Cookie &#39;&quot;</span> <span class="token operator">.</span> <span class="token variable">$cookie_name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&#39; is set!&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Value is: &quot;</span> <span class="token operator">.</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token variable">$cookie_name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setcookie()</code> 函数的参数如下：</p><ul><li><code>name</code>: Cookie 的名称。</li><li><code>value</code>: Cookie 的值。</li><li><code>expires</code>: （可选）Cookie 的过期时间，是 Unix 时间戳（即自 January 1 1970 00:00:00 GMT 以来经过的秒数）。如果未设置，cookie 会在浏览器关闭时自动过期。</li><li><code>path</code>: （可选）指定 cookie 可以在域中的哪些路径上被访问。如果设置为 &#39;/&#39;，cookie 对整个域名有效。</li><li><code>domain</code>: （可选）指定 cookie 有效的域名。子域必须明确设置 cookie 才能跨子域访问。</li><li><code>secure</code>: （可选）如果设置为 true，则只有在使用 SSL 连接时才会发送 cookie。</li><li><code>httponly</code>: （可选）如果设置为 true，则 cookie 仅可通过 HTTP 协议访问，无法通过 JavaScript 等方式访问。</li></ul><h4 id="检索-cookie" tabindex="-1"><a class="header-anchor" href="#检索-cookie"><span>检索 Cookie</span></a></h4><p>一旦设置了 cookie，它们将在随后的请求中被自动发送到服务器，并且可以通过 <code>$_COOKIE</code> 超全局数组来访问</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Welcome &quot;</span> <span class="token operator">.</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Welcome guest!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除-cookie" tabindex="-1"><a class="header-anchor" href="#删除-cookie"><span>删除 Cookie</span></a></h4><p>删除一个 cookie 实际上是通过设置它的过期时间为过去某一时间来实现的，从而使浏览器清除它。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 设置 user cookie 的过期时间为一个小时前，从而删除它</span>
<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h4><ul><li>由于 <code>setcookie()</code> 会发送 HTTP 头部，因此必须在任何 HTML 输出之前调用。</li><li>一旦设置了 cookie，它将在下一个 HTTP 请求中可用，不会立即在当前脚本中可用。</li><li>为了避免跨站点脚本（XSS）攻击，应当使用 <code>htmlspecialchars()</code> 或其他适当的函数对 cookie 的值进行编码，特别是在将它们输出到 HTML 中的时候。</li><li>使用 HTTPS 和 <code>secure</code> 标志可以提高 cookie 的安全性。</li><li>使用 <code>httponly</code> 标志可以增加保护，防止 JavaScript 等客户端脚本访问 cookie。</li></ul><h3 id="session-1" tabindex="-1"><a class="header-anchor" href="#session-1"><span>Session</span></a></h3><p>在 PHP 中，会话（session）是一种用来保存用户数据以便跨多个页面请求（或浏览器会话）使用的方式。会话通常用于保持用户状态和数据，比如登录信息、购物车内容等。不同于 cookie，会话数据存储在服务器端，用户无法直接访问，这提供了更好的安全性。</p><h4 id="开始会话" tabindex="-1"><a class="header-anchor" href="#开始会话"><span>开始会话</span></a></h4><p>在 PHP 中，你可以使用 <code>session_start()</code> 函数来初始化会话系统和恢复会话变量。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 在脚本开始处调用 session_start() 来启动会话</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>session_start()</code> 必须在脚本输出任何内容到浏览器之前调用，因为它会发送 HTTP 头信息。</p><h4 id="存储会话变量" tabindex="-1"><a class="header-anchor" href="#存储会话变量"><span>存储会话变量</span></a></h4><p>一旦会话开始，你可以通过 <code>$_SESSION</code> 超全局数组来存储和访问会话变量。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 存储会话数据</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;john_doe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;email&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;john@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;logged_in&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检索会话变量" tabindex="-1"><a class="header-anchor" href="#检索会话变量"><span>检索会话变量</span></a></h4><p>在一个会话已经开始后的任何页面上，你可以通过 <code>$_SESSION</code> 数组来检索之前存储的会话变量。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 开始会话</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检索会话数据</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Welcome, &quot;</span> <span class="token operator">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Please log in.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="销毁会话" tabindex="-1"><a class="header-anchor" href="#销毁会话"><span>销毁会话</span></a></h4><p>要删除所有全局会话变量并销毁会话， <code>session_unset()</code> 和 <code>session_destroy()</code></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// remove all session variables</span>
<span class="token function">session_unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// destroy the session</span>
<span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2"><span>注意事项</span></a></h4><ul><li><code>session_start()</code> 会尝试从客户端 cookie 或请求中恢复一个会话标识符。如果没有找到，它会创建一个新的会话。</li><li>默认情况下，PHP 使用 cookie 来传递会话标识符。但是，如果客户端不接受 cookie，也可以通过 URL 传递会话标识符。</li><li>为了提高安全性，尤其是在处理敏感数据时，应该在使用 HTTPS 协议的网站上使用会话。</li><li>定期再生成会话 ID 可以提高安全性，可以使用 <code>session_regenerate_id()</code> 函数来实现。</li><li>会话数据是存储在服务器上的，这意味着如果不进行垃圾回收，随着时间的推移，它们可能会占用大量的磁盘空间。PHP 配置文件（php.ini）中的会话设置定义了会话数据清理的行为。</li><li>使用会话时需要考虑隐私和合规性问题，确保遵守适用的法律法规。</li></ul><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h3><p>在 PHP 中，<code>filter</code> 函数用于验证和清理来自用户的输入或任何不可信数据。这是一种安全措施，可帮助避免安全漏洞，例如 SQL 注入和跨站脚本 (XSS) 攻击。PHP 提供了一系列的过滤器，可以用于对不同类型的数据进行检验和处理。<br><a href="https://www.w3ccoo.com/php/php_ref_filter.html" target="_blank" rel="noopener noreferrer">PHP 过滤函数</a></p><h4 id="filter-var-函数" tabindex="-1"><a class="header-anchor" href="#filter-var-函数"><span><code>filter_var</code> 函数</span></a></h4><p><code>filter_var</code> 函数是用来过滤单一变量的。你可以使用不同的过滤器和选项来验证或清理数据。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;someuser@example.com&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This email address is considered valid.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This email address is considered invalid.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>FILTER_VALIDATE_EMAIL</code> 过滤器被用来验证一个电子邮件地址。</p><h4 id="filter-input-函数" tabindex="-1"><a class="header-anchor" href="#filter-input-函数"><span><code>filter_input</code> 函数</span></a></h4><p><code>filter_input</code> 函数是用来获取并过滤外部数据的，例如来自 <code>GET</code>、<code>POST</code>、<code>COOKIE</code> 或 <code>SERVER</code> 超全局变量。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This email address is considered valid.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This email address is considered invalid.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>filter_input</code> 从 <code>POST</code> 数据中获取 <code>&#39;email&#39;</code> 字段并验证它是不是一个有效的电子邮件地址。</p><h4 id="过滤器类型" tabindex="-1"><a class="header-anchor" href="#过滤器类型"><span>过滤器类型</span></a></h4><p>PHP 提供了两种主要的过滤器类型：</p><ol><li><strong>验证过滤器</strong> (<code>FILTER_VALIDATE_</code>): 这些过滤器用于验证数据。如果数据通过验证，则返回原始数据，否则返回 <code>false</code>。</li><li><strong>清理过滤器</strong> (<code>FILTER_SANITIZE_</code>): 这些过滤器用于清洁数据。它们通常会返回一个清理过的版本的数据，或者在无法清理时返回空字符串。</li></ol><h4 id="常见的验证过滤器" tabindex="-1"><a class="header-anchor" href="#常见的验证过滤器"><span>常见的验证过滤器</span></a></h4><ul><li><code>FILTER_VALIDATE_EMAIL</code>: 验证电子邮件地址。</li><li><code>FILTER_VALIDATE_INT</code>: 验证是否为整数值。</li><li><code>FILTER_VALIDATE_IP</code>: 验证是否为 IP 地址。</li><li><code>FILTER_VALIDATE_URL</code>: 验证是否为 URL。</li></ul><h4 id="常见的清理过滤器" tabindex="-1"><a class="header-anchor" href="#常见的清理过滤器"><span>常见的清理过滤器</span></a></h4><ul><li><code>FILTER_SANITIZE_EMAIL</code>: 清理电子邮件地址字符串。</li><li><code>FILTER_SANITIZE_STRING</code>: 清理字符串，移除标签和可选的去除或编码特殊字符。</li><li><code>FILTER_SANITIZE_URL</code>: 清理 URL 字符串。</li></ul><h4 id="过滤器选项和标志" tabindex="-1"><a class="header-anchor" href="#过滤器选项和标志"><span>过滤器选项和标志</span></a></h4><p>过滤器可以接受额外的选项和标志来精细控制数据的过滤方式。例如，<code>FILTER_VALIDATE_INT</code> 可以接受一个范围，以指定整数值应该在什么范围内：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">&quot;options&quot;</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string double-quoted-string">&quot;min_range&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string double-quoted-string">&quot;max_range&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">100</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_INT</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;The value is within the legal range.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;The value is not within the legal range.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用过滤器的好处" tabindex="-1"><a class="header-anchor" href="#使用过滤器的好处"><span>使用过滤器的好处</span></a></h4><ul><li><strong>安全性</strong>: 过滤器有助于减少注入攻击和其他安全漏洞的风险。</li><li><strong>数据一致性</strong>: 验证数据格式的一致性，例如确保用户输入的是有效的电子邮件地址。</li><li><strong>便捷性</strong>: <code>filter_var</code> 和 <code>filter_input</code> 函数提供了简单的 API 来处理日常的数据验证和清理任务。</li></ul><h3 id="生成器函数" tabindex="-1"><a class="header-anchor" href="#生成器函数"><span>生成器函数</span></a></h3><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h4><p><code>yield</code> 是一个关键字，用于创建生成器（Generator）。生成器是一种特殊的函数，可以逐个生成值，而不是一次性生成所有值。<br> 在 PHP 中，使用 <code>yield</code> 关键字定义的函数被称为生成器函数。生成器函数与普通函数的区别在于，当生成器函数调用时，它并不立即执行函数体，而是返回一个生成器对象。每次迭代生成器对象时，函数会从上一次暂停的位置继续执行，直到遇到下一个 <code>yield</code> 关键字，将生成的值返回给调用方。<br> 下面是一个简单的示例，展示了如何使用 <code>yield</code> 创建一个生成器函数：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$generator</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中定义了一个名为 <code>myGenerator()</code> 的生成器函数。它使用 <code>yield</code> 关键字生成了三个值，分别是 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 和 <code>&#39;c&#39;</code>。然后，我们将生成器函数调用的结果赋值给变量 <code>$generator</code>，并使用 <code>foreach</code> 循环遍历生成器对象的值。在每次迭代时，生成器函数会从上一次暂停的位置继续执行，生成一个值并返回给 <code>foreach</code> 循环。<br> 生成器函数的优点是它们可以节省内存，因为它们不会一次性生成所有值，而是按需生成。这对于处理大型数据集合或需要逐个处理结果的情况非常有用。<br> 此外，生成器函数还可以接受参数，并根据参数的不同生成不同的值序列。你可以在生成器函数中使用循环、条件语句和其他控制结构来定义生成值的逻辑。<br> 当涉及到生成器（Generator）和使用 <code>yield</code> 关键字时，还有一些其他方面和用法可以了解：</p><h4 id="生成器函数参数" tabindex="-1"><a class="header-anchor" href="#生成器函数参数"><span><strong>生成器函数参数</strong></span></a></h4><p>生成器函数可以接受参数，在每次迭代时根据参数的不同生成不同的值序列。这使得生成器函数更加灵活和可定制</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">countUpTo</span><span class="token punctuation">(</span><span class="token variable">$max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$max</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token function">countUpTo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$generator</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为 <code>countUpTo()</code> 的生成器函数，它接受一个参数 <code>$max</code>，表示要计数的最大值。在每次迭代时，生成器函数会生成从 1 到 <code>$max</code> 的整数。然后，我们调用 <code>countUpTo()</code> 函数并将结果赋值给变量 <code>$generator</code>，再使用 <code>foreach</code> 循环遍历生成器对象的值。</p><h4 id="生成器委托" tabindex="-1"><a class="header-anchor" href="#生成器委托"><span><strong>生成器委托</strong></span></a></h4><p>生成器委托是一种在生成器函数中调用其他生成器函数的技术。它允许你在一个生成器函数中重用另一个生成器函数的逻辑。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">generator1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-definition function">generator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;1&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;2&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-definition function">combinedGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> <span class="token function">generator1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> <span class="token function">generator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token function">combinedGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$generator</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了两个生成器函数 <code>generator1()</code> 和 <code>generator2()</code>，它们分别生成字母和数字序列。然后，我们定义了一个名为 <code>combinedGenerator()</code> 的生成器函数，使用 <code>yield from</code> 关键字将 <code>generator1()</code> 和 <code>generator2()</code> 的生成器委托给 <code>combinedGenerator()</code>。最后，我们通过调用 <code>combinedGenerator()</code> 创建生成器对象，并使用 <code>foreach</code> 循环遍历生成器的值。生成器委托使得在一个生成器函数中组合和重用其他生成器函数变得更加简单。</p><h4 id="生成器的键值对-keys-and-values" tabindex="-1"><a class="header-anchor" href="#生成器的键值对-keys-and-values"><span><strong>生成器的键值对（Keys and Values）</strong></span></a></h4><p>除了生成值，生成器还可以生成键值对。在每次迭代时，生成器可以使用 <code>yield</code> 关键字生成一个键值对，其中键和值可以是任意类型的数据。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">keyValueGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string single-quoted-string">&#39;country&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;USA&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token function">keyValueGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$generator</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;: &#39;</span> <span class="token operator">.</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为 <code>keyValueGenerator()</code> 的生成器函数，它生成了一个包含姓名、年龄和国家的键值对。在每次迭代时，生成器函数使用 <code>yield</code> 关键字生成一个键值对。然后，我们使用 <code>foreach</code> 循环遍历生成器对象，并输出键值对的内容。<br> 生成器的键值对可以用于在迭代过程中为生成的值提供标识或关联信息。</p><h3 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h3><p>回调函数（callback function）是一个作为参数传递给另一个函数的函数，这个另一个函数在适当的时候会回过头来执行这个回调函数。这是一种常见的技术，用于实现事件驱动编程或处理异步操作，比如在操作完成时通知调用者。<br> PHP 中的回调可以是一个普通函数、对象的方法、静态类的方法，甚至是一个匿名函数（也称为闭包）。</p><h4 id="普通函数作为回调" tabindex="-1"><a class="header-anchor" href="#普通函数作为回调"><span>普通函数作为回调</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">my_callback_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 一个接受回调函数作为参数的函数</span>
<span class="token keyword">function</span> <span class="token function-definition function">execute_callback</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用 execute_callback 并传入 my_callback_function</span>
<span class="token function">execute_callback</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my_callback_function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="is-callable" tabindex="-1"><a class="header-anchor" href="#is-callable"><span>is_callable</span></a></h5><p>检查变量是否可以作为函数调用的工具。<br><strong>作用:</strong></p><ul><li>判断一个变量是否包含可调用的函数名、可调用方法的数组、或者实现了 <code>__invoke</code> 方法的对象。</li><li>在需要动态调用函数或方法时非常有用，可以事先判断合法性避免错误。</li></ul><p><strong>语法:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword type-declaration">bool</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$syntax_only</span> <span class="token operator">=</span> <span class="token constant boolean">false</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$callable_name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>$var:</strong> 要检查的变量。</li><li><strong>$syntax_only (可选):</strong> 布尔值，默认为 <code>false</code>。 <ul><li>为 <code>true</code> 时，只进行语法检查，不考虑函数或方法是否存在。</li></ul></li><li><strong>$callable_name (可选):</strong> 字符串，仅用于类方法的检查。指定方法名后，判断类中是否存在该方法。</li></ul><p><strong>返回值:</strong></p><ul><li>如果变量是可以调用的，则返回 <code>true</code>；否则返回 <code>false</code>。</li></ul><p><strong>示例:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 假设 MyClass 类实现了 __invoke 方法</span>

<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$greet</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// false (字符串不可调用)</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true (对象可能实现 __invoke)</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;doStuff&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (语法上合法的方法调用)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>需要注意:</strong></p><ul><li>从 PHP 5.3.0 版本开始，<code>is_callable()</code> 不再认为类构造函数 (constructor) 是可调用的。</li><li>使用 <code>is_callable()</code> 进行检查，可以提高代码的可读性和健壮性。</li></ul><h5 id="call-user-func" tabindex="-1"><a class="header-anchor" href="#call-user-func"><span>call_user_func</span></a></h5><p><code>call_user_func</code> 是 PHP 中用于 <strong>动态调用函数</strong> 的函数。有了它，你可以根据变量的值来决定要调用的函数。<br><strong>作用:</strong></p><ul><li>在运行时根据提供的参数来调用函数。</li><li>适用于函数名保存在变量中、需要根据用户输入决定调用哪个函数等场景。</li></ul><p><strong>语法:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword type-declaration">mixed</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$arg1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$arg2</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> $<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>$callback</code>: 必需参数，要调用的函数名（字符串形式）、可调用对象的数组(形式为 array($object, &#39;methodName&#39;))、或者实现了 <code>__invoke</code> 方法的对象。</li><li><code>$arg1, $arg2</code>, ...: 可选参数，将作为调用函数的参数传递。</li></ul><p><strong>返回值:</strong></p><ul><li>返回被调用函数的返回值。</li></ul><p><strong>示例:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello, <span class="token interpolation"><span class="token variable">$name</span></span>!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;greet&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Alice&#39;</span><span class="token punctuation">;</span>

<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">,</span> <span class="token variable">$person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Hello, Alice!</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 假设 MyClass 类实现了 __invoke 方法</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;argument&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 具体输出取决于 MyClass 实现的 __invoke 方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>需要注意:</strong></p><ul><li><code>call_user_func</code> 函数的参数数量要和实际调用的函数的参数数量匹配，否则会产生错误。</li><li>它并不会检查函数是否存在，调用不存在的函数会引发错误。建议配合 <code>is_callable</code> 函数一起使用，确保调用的合法性。</li></ul><p><strong>进阶用法:</strong></p><ul><li><strong>call_user_func_array:</strong> 与 <code>call_user_func</code> 类似，但是可以将参数打包成数组传入。</li></ul><h5 id="call-user-func-array" tabindex="-1"><a class="header-anchor" href="#call-user-func-array"><span>call_user_func_array</span></a></h5><p><strong>call_user_func_array 函数</strong> 是 PHP 中用于 <strong>使用参数数组动态调用函数</strong> 的函数。它扩展了 <code>call_user_func</code> 的功能，提供了一种更灵活的参数传递方式。<br><strong>核心功能:</strong></p><ul><li>使用包含要传递的参数的数组来调用函数。</li><li>适用于参数存储在数组中或参数数量可能动态变化的情况。</li></ul><p><strong>语法:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword type-declaration">mixed</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>$callback:</strong> 必需参数，代表可调用的实体。它可以是： <ul><li>作为字符串的函数名。</li><li>包含对象和方法名的数组 (<code>array($object, &#39;methodName&#39;)</code>)。</li><li>实现 <code>__invoke</code> 方法的对象。</li></ul></li><li><strong>$args:</strong> 必需参数，一个包含要传递给被调用函数的参数的数组。</li></ul><p><strong>返回值:</strong></p><ul><li>返回被调用函数返回的结果。</li></ul><p><strong>示例:</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">sum</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$numbers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sum&#39;</span><span class="token punctuation">,</span> <span class="token variable">$numbers</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $result 将为 8</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设 MyClass 实现了 __invoke</span>
<span class="token variable">$arguments</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;param1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;param2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出取决于 MyClass 的 __invoke 实现</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要点:</strong></p><ul><li><code>$args</code> 数组中的元素顺序与函数参数顺序直接对应。</li><li>类似于 <code>call_user_func</code>，确保数组中的参数数量与函数期望的参数数量匹配，以避免错误。</li><li>考虑在调用之前使用 <code>is_callable</code> 和 <code>call_user_func_array</code> 一起验证实体的可调用性。</li></ul><p><strong>额外见解:</strong></p><ul><li><strong>相对于 <strong><code>**call_user_func**</code></strong> 的优势:</strong><ul><li>提供参数传递的更多灵活性。</li><li>简化了处理参数数量可变的情况。</li></ul></li><li><strong>语法糖:</strong> 当 <code>$args</code> 数组仅包含数字键时，它们将被视为位置参数，模拟 <code>call_user_func</code> 行为。</li></ul><h4 id="方法作为回调" tabindex="-1"><a class="header-anchor" href="#方法作为回调"><span>方法作为回调</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">myCallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 传递数组作为回调参数，包含对象和方法名</span>
<span class="token function">execute_callback</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;myCallbackMethod&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="匿名函数-闭包-作为回调" tabindex="-1"><a class="header-anchor" href="#匿名函数-闭包-作为回调"><span>匿名函数（闭包）作为回调</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$myClosure</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">execute_callback</span><span class="token punctuation">(</span><span class="token variable">$myClosure</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="php-中使用回调的内置函数" tabindex="-1"><a class="header-anchor" href="#php-中使用回调的内置函数"><span>PHP 中使用回调的内置函数</span></a></h4><p>PHP 有很多内置函数支持回调，例如 <code>array_map()</code>, <code>array_filter()</code>, <code>usort()</code> 等。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$numbers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 array_map 应用回调到数组中的每个元素</span>
<span class="token variable">$squared_numbers</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$number</span> <span class="token operator">*</span> <span class="token variable">$number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">$numbers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$squared_numbers</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Array ( [0] =&gt; 1 [1] =&gt; 4 [2] =&gt; 9 [3] =&gt; 16 [4] =&gt; 25 )</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="回调的注意事项" tabindex="-1"><a class="header-anchor" href="#回调的注意事项"><span>回调的注意事项</span></a></h4><ul><li>回调函数在定义时并不立即执行；它们在被回调的时候才执行。</li><li>确保回调是可调用的，可以使用 <code>is_callable()</code> 函数检查。</li><li>如果回调是对象方法或类方法，需要提供正确的作用域或对象实例。</li><li>匿名函数（闭包）可以捕获其创建时所在作用域的变量。</li></ul><p>回调函数在异步编程、事件监听、抽象和特定行为定制等场景中非常有用。它们是一种强大的编程技术，增加了代码的灵活性和动态性。</p><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h3><ol><li><code>json_encode($data)</code>：将PHP数组或对象转换为JSON格式的字符串。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;city&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;New York&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$jsonString</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>json_decode($jsonString, $assoc)</code>：将JSON字符串转换为PHP数组或对象。第二个参数 <code>$assoc</code> 是一个可选参数，当设置为 <code>true</code> 时，将返回关联数组；设置为 <code>false</code> 或不传递该参数时，将返回对象。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span> <span class="token comment">// 输出：John</span>

<span class="token comment">// 或者使用关联数组</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出：John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;addresses&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;city&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;state&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;NY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;city&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;London&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;country&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;UK&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$jsonString</span><span class="token punctuation">;</span>
<span class="token comment">// 对多维数组进行解码</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">addresses</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">city</span><span class="token punctuation">;</span> <span class="token comment">// 输出：New York</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;addresses&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;city&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 从JSON文件中读取数据</span>
<span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>

<span class="token comment">// 将数据写入JSON文件</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;city&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;New York&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;data.json&#39;</span><span class="token punctuation">,</span> <span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理复杂的JSON结构：有时候，JSON数据可能具有复杂的嵌套结构，包含数组、嵌套对象等。在这种情况下，可以使用递归的方式来遍历和处理JSON数据。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">processJsonData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理对象</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理键值对</span>
            <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;: &#39;</span><span class="token punctuation">;</span>
            <span class="token function">processJsonData</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理数组</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">processJsonData</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理基本值</span>
        <span class="token keyword">echo</span> <span class="token variable">$data</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; &#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;addresses&quot;:[{&quot;city&quot;:&quot;New York&quot;},{&quot;city&quot;:&quot;London&quot;}]}&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processJsonData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理JSON中的日期和时间：有时候，JSON数据中可能包含日期和时间信息。你可以使用 <code>DateTime</code> 类来解析和格式化这些日期和时间。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;date&quot;:&quot;2024-03-24&quot;,&quot;time&quot;:&quot;12:30:00&quot;}&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$date</span> <span class="token operator">=</span> <span class="token class-name static-context">DateTime</span><span class="token operator">::</span><span class="token function">createFromFormat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$date</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2024-03-24</span>

<span class="token variable">$time</span> <span class="token operator">=</span> <span class="token class-name static-context">DateTime</span><span class="token operator">::</span><span class="token function">createFromFormat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;H:i:s&#39;</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$time</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;H:i:s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：12:30:00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>json_last_error()</code>：返回最后一个JSON操作的错误码。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">json_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON_ERROR_SYNTAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;JSON语法错误&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>json_last_error_msg()</code> 函数获取错误的详细描述。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$jsonString</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$jsonString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">json_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">JSON_ERROR_NONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;JSON解码错误：&quot;</span> <span class="token operator">.</span> <span class="token function">json_last_error_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>处理大型JSON文件：对于大型的JSON文件，一次性读取和解析整个文件可能会占用过多的内存。在这种情况下，可以考虑使用流式处理来逐行读取和处理JSON数据，以减少内存消耗。你可以结合使用 <code>fopen()</code>、<code>fgets()</code> 和 <code>json_decode()</code> 函数来实现这一点。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;large_data.json&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理每一行的数据</span>
<span class="token punctuation">}</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常处理-1" tabindex="-1"><a class="header-anchor" href="#异常处理-1"><span>异常处理</span></a></h3><h4 id="基本处理" tabindex="-1"><a class="header-anchor" href="#基本处理"><span>基本处理</span></a></h4><p>PHP中的异常处理使用了以下几个关键词和结构：</p><ol><li><code>try</code>：<code>try</code> 块包含可能会引发异常的代码块。当某个异常被抛出时，程序的控制流将立即转到 <code>catch</code> 块。</li><li><code>catch</code>：<code>catch</code> 块用于捕获和处理异常。它定义了处理特定类型异常的代码块。</li><li><code>throw</code>：<code>throw</code> 语句用于手动抛出一个异常。可以使用内置的异常类，也可以自定义异常类。</li><li><code>finally</code>：不论出错与否，最终一定执行。</li></ol><p>下面是一个基本的异常处理的示例：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能引发异常的代码</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This code will always run&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用多个 <code>catch</code> 块来捕获和处理不同类型的异常，以便针对不同的异常类型执行不同的操作。例如：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能引发异常的代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$fileNotFound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;文件未找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$permissionDenied</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PermissionException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;权限被拒绝&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理文件未找到异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到文件未找到异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PermissionException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理权限被拒绝异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到权限被拒绝异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理其他异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，你还可以定义自己的异常类，以便在特定情况下抛出和捕获自定义的异常。这样可以使你的代码更具可读性和可维护性。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自定义异常类</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能引发异常的代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$someCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;自定义异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理自定义异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到自定义异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理其他异常</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exception函数" tabindex="-1"><a class="header-anchor" href="#exception函数"><span>Exception函数</span></a></h4><figure><img src="https://gcore.jsdelivr.net/gh/Okita1027/knowledge-database-images@main/basic/php/202406171910631.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="自定义异常处理" tabindex="-1"><a class="header-anchor" href="#自定义异常处理"><span>自定义异常处理</span></a></h4><ol><li>使用断言（Assertions）进行调试：断言是一种用于验证代码假设的机制。在开发和调试阶段，可以使用断言来检查代码中的条件是否为真。如果断言失败，将抛出 AssertionError 异常。这</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$numerator</span><span class="token punctuation">,</span> <span class="token variable">$denominator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$denominator</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;除数不能为零&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$numerator</span> <span class="token operator">/</span> <span class="token variable">$denominator</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>自定义异常类：在处理异常时，可以自定义异常类来提供更具体的异常信息和行为。自定义异常类继承自内置的 Exception 类或其子类，并可以添加额外的属性和方法。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$extraData</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">,</span> <span class="token variable">$extraData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">extraData</span> <span class="token operator">=</span> <span class="token variable">$extraData</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getExtraData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">extraData</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$someCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;自定义异常&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到自定义异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;附加数据：&quot;</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getExtraData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>错误处理器：除了异常处理外，PHP还提供了错误处理器（Error Handler）来处理非异常的运行时错误。错误处理器可以用于捕获和处理警告、通知、致命错误等。可以使用 set_error_handler() 函数来注册自定义的错误处理器。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">customErrorHandler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;发生错误：<span class="token interpolation"><span class="token variable">$errstr</span></span>&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;错误文件：<span class="token interpolation"><span class="token variable">$errfile</span></span>&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;错误行号：<span class="token interpolation"><span class="token variable">$errline</span></span>&quot;</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 可以选择记录错误日志、发送通知等其他操作</span>
    
    <span class="token comment">// 返回 true 表示错误已经被处理，不会再由 PHP 默认的错误处理机制处理</span>
    <span class="token comment">// 返回 false 或不返回任何值，错误会继续由 PHP 默认的错误处理机制处理</span>
    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册自定义错误处理器</span>
<span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;customErrorHandler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是，自定义错误处理器只能处理非致命错误。对于致命错误（如内存耗尽错误、解析错误等），无法通过自定义错误处理器捕获和处理，因为它们无法被正常的 PHP 代码拦截</p></blockquote><ol start="4"><li>异常处理器：除了在代码中使用 try/catch 块处理异常外，PHP还提供了全局的异常处理器。通过注册一个异常处理器，可以在全局范围内处理未被捕获的异常。</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">customExceptionHandler</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常逻辑</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;捕获到异常： &quot;</span> <span class="token operator">.</span> <span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">set_exception_handler</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;customExceptionHandler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局异常处理器 set_exception_handler() 和自定义错误处理器 set_error_handler() 在处理错误和异常时有一些区别：</p><ol><li>错误和异常类型：set_error_handler() 注册的处理器只能处理 PHP 运行时错误（包括警告、致命错误和通知），而不能处理异常（Exception 类或其子类）。而 set_exception_handler() 注册的处理器专门用于处理异常，可以捕获和处理通过 throw 语句抛出的异常。</li><li>错误级别：set_error_handler() 可以设置处理的错误级别，例如只处理警告级别的错误或只处理致命错误。而 set_exception_handler() 处理的是由 throw 语句抛出的任何异常，无论异常的类型或严重程度。</li><li>使用方式：set_error_handler() 和 set_exception_handler() 的使用方式略有不同。set_error_handler() 接受一个回调函数作为参数，用于处理错误。而 set_exception_handler() 接受一个回调函数作为参数，用于处理异常。</li><li>调用顺序：当同时使用 set_error_handler() 和 set_exception_handler() 注册处理器时，错误处理器会在异常处理器之前被调用。这意味着如果发生既有错误又有异常的情况，首先会触发错误处理器。</li></ol><p>综上所述，自定义错误处理器适用于处理运行时错误，而全局异常处理器适用于捕获和处理显式抛出的异常。它们在处理不同类型的问题和错误时有不同的用途和功能。<br> PHP 运行时错误是在代码执行期间发生的问题，可能导致程序无法继续正常执行。PHP 将运行时错误分为不同的级别，包括警告、致命错误和通知。以下是对这些级别的详细解释：</p><ol><li>警告（Warning）：警告是一种较低级别的错误，表示在代码执行期间发生了一些潜在的问题，但不会导致程序完全中断。例如，使用未定义的变量、调用不存在的函数或方法、打开不存在的文件等情况都可能触发警告。警告不会导致脚本终止执行，而是在继续执行之前将警告消息发送到输出流（通常是浏览器或日志文件）。</li><li>致命错误（Fatal Error）：致命错误是一种严重的错误，表示在代码执行期间发生了无法恢复的问题，导致程序无法继续执行。例如，调用一个不存在的类、使用无效的语法、内存耗尽等情况都可能触发致命错误。致命错误会导致脚本立即终止，并将错误消息发送到输出流。这意味着后续的代码将不会被执行。</li><li>通知（Notice）：通知是一种较低级别的错误，类似于警告，表示在代码执行期间发生了一些不严重的问题。通常是一些建议性的消息，提醒开发者注意某些代码的改进或潜在的问题。例如，访问数组中不存在的键、使用未初始化的变量等情况都可能触发通知。通知不会导致脚本终止执行，而是将通知消息发送到输出流。</li></ol><p>在默认情况下，PHP 将警告和通知显示在输出流中，以帮助开发者调试和修复代码。对于致命错误，PHP 会显示一个致命错误消息，并终止脚本的执行。<br> 为了更好地处理这些运行时错误，可以使用 set_error_handler() 函数注册自定义错误处理器，该处理器将在发生错误时被调用，可以对错误进行捕获、记录、处理或显示自定义的错误消息。</p><h3 id="die" tabindex="-1"><a class="header-anchor" href="#die"><span>die</span></a></h3><p>在许多编程语言中，<code>die</code> 是一个用于终止程序执行的函数或关键字。它通常用于在程序中遇到错误或不可恢复的情况下，立即停止程序的执行，并显示错误消息或进行其他处理。<br> 在 PHP 中，<code>die</code> 是一个语言结构，用于输出一条消息并终止脚本的执行。它的作用与 <code>exit</code> 函数相似，可以用来退出程序并返回一个指定的退出状态码。<br><code>die</code> 的基本语法如下：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">die</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">die</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>message</code> 是可选的错误消息或终止信息。<br> 以下是一些示例，展示了 <code>die</code> 的用法：<br><strong>示例 1：</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;data.txt&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;无法打开文件。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无法继续执行之后的操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们尝试打开一个名为 &quot;data.txt&quot; 的文件。如果文件打开失败，则执行 <code>die</code> 语句，并输出错误消息 &quot;无法打开文件。&quot;。这样可以避免继续执行后续的操作，因为文件无法打开。<br><strong>示例 2：</strong></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;您必须年满18岁才能访问此内容。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无法继续执行之后的操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们检查年龄是否小于 18 岁。如果是，则执行 <code>die</code> 语句，并输出一条消息，阻止用户访问受限内容。<br><code>die</code> 语句的执行将会立即终止程序的执行，并将消息输出给用户。你可以根据需要在 <code>die</code> 语句中提供自定义的错误消息。如果没有提供消息，则只会终止程序的执行。<br> 需要注意的是，在实际的应用程序中，过度使用 <code>die</code> 可能会导致代码的可读性和可维护性降低。在许多情况下，使用异常处理机制可能更为合适，因为它提供了更好的错误处理和代码流程控制的灵活性。</p><h2 id="oop" tabindex="-1"><a class="header-anchor" href="#oop"><span>OOP</span></a></h2><h3 id="语言常规" tabindex="-1"><a class="header-anchor" href="#语言常规"><span>语言常规</span></a></h3><h4 id="类常量-1" tabindex="-1"><a class="header-anchor" href="#类常量-1"><span>类常量</span></a></h4><p>类常量在类中使用 <code>const</code> 关键字声明。<br> 类常量区分大小写。 但是，建议以全部大写字母命名常量。<br> 我们可以通过使用类名后跟范围解析运算符 (<code>::</code>) 后跟常量名来从类外部访问常量，如下所示：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Goodbye</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">LEAVING_MESSAGE</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Thank you for visiting W3Schools.com!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">Goodbye</span><span class="token operator">::</span><span class="token constant">LEAVING_MESSAGE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过使用 self 关键字后跟范围解析运算符 ( :😃 后跟常量名，如下所示：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Goodbye</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">LEAVING_MESSAGE</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Thank you for visiting W3Schools.com!&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">byebye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">LEAVING_MESSAGE</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$goodbye</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$goodbye</span><span class="token operator">-&gt;</span><span class="token function">byebye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h4><p>三种访问修饰符：</p><ul><li>public - 可以从任何地方访问属性或方法。 这是默认设置</li><li>protected - 属性或方法可以在类内以及从该类派生的类中访问</li><li>private - 属性或方法只能在类中访问</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fruit</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">protected</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$weight</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$mango</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mango</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Mango&#39;</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token variable">$mango</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Yellow&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span>
<span class="token variable">$mango</span><span class="token operator">-&gt;</span><span class="token property">weight</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;300&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造、析构函数" tabindex="-1"><a class="header-anchor" href="#构造、析构函数"><span>构造、析构函数</span></a></h4><ul><li>构造函数：<code>__construct</code></li><li>析构函数：<code>__destruct</code></li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Fruit</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$eat</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造函数</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token variable">$eat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">eat</span> <span class="token operator">=</span> <span class="token variable">$eat</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 析构函数</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;The fruit is <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">}</span></span> and the color is <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token punctuation">}</span></span> and the eat is <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">eat</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态属性、方法" tabindex="-1"><a class="header-anchor" href="#静态属性、方法"><span>静态属性、方法</span></a></h4><p>使用 <code>static</code> 关键字声明静态属性</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">ClassName</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$staticProp</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;W3Schools&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要访问静态属性，请使用类名、双冒号 (<code>::</code>) 和属性名</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token class-name static-context">ClassName</span><span class="token operator">::</span><span class="token constant">staticProp</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>self</code>也可访问静态属性</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">pi</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$value</span><span class="token operator">=</span><span class="token number">3.14159</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">staticValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$value</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$pi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$pi</span><span class="token operator">-&gt;</span><span class="token function">staticValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要从子类调用静态属性，请在子类中使用 <code>parent</code> 关键字</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">pi</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$value</span><span class="token operator">=</span><span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">x</span> <span class="token keyword">extends</span> <span class="token class-name">pi</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">xStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token variable">$value</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Get value of static property directly via child class</span>
<span class="token keyword">echo</span> <span class="token class-name static-context">x</span><span class="token operator">::</span><span class="token variable">$value</span><span class="token punctuation">;</span>

<span class="token comment">// or get value of static property via xStatic() method</span>
<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">-&gt;</span><span class="token function">xStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h4><p>抽象类是包含<strong>至少一个</strong>抽象方法的类。 抽象方法是已声明但未在代码中实现的方法。<br> 一个抽象类或方法是用 abstract 关键字定义的：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod2</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当子类继承自抽象类时，我们有以下规则：</p><ul><li>子类方法必须定义同名并重新声明父抽象方法</li><li>子类方法必须使用相同或更少限制的访问修饰符定义</li><li>所需参数的数量必须相同。 但是，子类可能还有可选参数</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function-definition function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fun</span><span class="token punctuation">(</span><span class="token variable">$parm</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;可选参数&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;this is a function!&#39;</span> <span class="token operator">.</span> <span class="token variable">$parm</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h4><ol><li>定义接口</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">interface</span> <span class="token class-name-definition class-name">InterfaceName</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod2</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用接口</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Meow&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$animal</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$animal</span><span class="token operator">-&gt;</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>接口VS抽象类</li></ol><p>接口类似于抽象类。 接口和抽象类的区别在于：</p><ul><li>接口不能有属性，而抽象类可以</li><li>所有接口方法必须是公共的，而抽象类方法是公共的或受保护的</li><li>接口中的所有方法都是抽象的，因此不能在代码中实现，也不需要abstract关键字</li><li>类可以在实现一个接口的同时从另一个类继承</li></ul><h3 id="php特有" tabindex="-1"><a class="header-anchor" href="#php特有"><span>PHP特有</span></a></h3><h4 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征</span></a></h4><p>PHP 仅支持单一继承：子类只能从一个单一父类继承。<br> 那么，如果一个类需要继承多个行为呢? OOP 特征解决了这个问题。<br> 特征用于声明可在多个类中使用的方法。 Traits 可以具有可在多个类中使用的方法和抽象方法，并且方法可以具有任何访问修饰符（<code>public</code>、<code>private</code> 或 <code>protected</code>）。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">trait</span> <span class="token class-name-definition class-name">TraitName</span> <span class="token punctuation">{</span>
  <span class="token comment">// some code...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token package">TraitName</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">trait</span> <span class="token class-name-definition class-name">message1</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">msg1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;OOP is fun! &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Welcome</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token package">message1</span><span class="token punctuation">;</span>	<span class="token comment">// 多个特征用 , 间隔</span>
<span class="token punctuation">}</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">msg1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h4><p>在 PHP 中，命名空间（Namespace）是一种用于组织和管理代码的机制，它允许将相关的类、函数和常量放置在一个命名空间下，以避免命名冲突并提高代码的可维护性。PHP 中的命名空间使用关键字 <code>namespace</code> 来定义，并以分层次的方式进行组织。<br><strong>1. 定义命名空间：</strong><br> 可以使用 <code>namespace</code> 关键字来定义一个命名空间，通常在文件的顶部进行定义。命名空间的命名可以使用反斜杠 <code>\\</code> 来表示分层次关系。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">MyProject</span><span class="token punctuation">;</span>

<span class="token comment">// 类、函数和常量的定义...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为 <code>MyProject</code> 的命名空间。<br><strong>2. 命名空间下的元素：</strong><br> 在命名空间中，可以定义类、函数和常量。它们可以通过完全限定名称（Fully Qualified Name）或使用 <code>use</code> 关键字来访问。</p><ul><li>使用完全限定名称访问：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>MyProject<span class="token punctuation">\\</span>SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function"><span class="token punctuation">\\</span>MyProject<span class="token punctuation">\\</span>someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$value</span> <span class="token operator">=</span> \\MyProject\\<span class="token constant">SOME_CONSTANT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用完全限定名称 <code>\\MyProject\\SomeClass</code> 来实例化一个 <code>SomeClass</code> 类，使用 <code>\\MyProject\\someFunction()</code> 来调用一个函数，以及使用 <code>\\MyProject\\SOME_CONSTANT</code> 来访问一个常量。</p><ul><li>使用 <code>use</code> 关键字导入命名空间：</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">MyProject<span class="token punctuation">\\</span>SomeClass</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">MyProject<span class="token punctuation">\\</span>someFunction</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">const</span> MyProject\\<span class="token constant">SOME_CONSTANT</span><span class="token punctuation">;</span>

<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">SOME_CONSTANT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 <code>use</code> 关键字导入了 <code>SomeClass</code> 类、<code>someFunction</code> 函数和 <code>SOME_CONSTANT</code> 常量，然后可以直接使用它们而无需使用完全限定名称。<br><strong>3. 命名空间的嵌套和子命名空间：</strong><br> 命名空间可以进行嵌套和分层次组织，以创建更复杂的命名空间结构。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">MyProject<span class="token punctuation">\\</span>SubNamespace</span><span class="token punctuation">;</span>

<span class="token comment">// 类、函数和常量的定义...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为 <code>MyProject\\SubNamespace</code> 的子命名空间。可以通过完全限定名称或使用 <code>use</code> 关键字来访问子命名空间中的元素。<br> 当涉及到 PHP 中的命名空间时，还有一些其他方面和用法可以了解：</p><ol start="4"><li><strong>别名（Alias）：</strong></li></ol><p>在 PHP 中，可以使用 <code>use</code> 关键字为一个类或命名空间创建别名，以简化其使用。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">MyProject<span class="token punctuation">\\</span>SomeClass</span> <span class="token keyword">as</span> MyClass<span class="token punctuation">;</span>

<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>use</code> 关键字将 <code>MyProject\\SomeClass</code> 类创建了一个别名 <code>MyClass</code>，然后可以使用 <code>MyClass</code> 来实例化 <code>SomeClass</code> 类。</p><ol start="5"><li><strong>全局命名空间（Global Namespace）：</strong></li></ol><p>PHP 中有一个全局命名空间，它是默认的命名空间，不需要显式指定。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码中，我们使用完全限定名称 <code>\\SomeClass</code> 来实例化一个位于全局命名空间中的 <code>SomeClass</code> 类。</p><ol start="6"><li><strong>多个命名空间的定义：</strong></li></ol><p>一个 PHP 文件可以定义多个命名空间，但是建议每个文件只定义一个命名空间。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">MyProject<span class="token punctuation">\\</span>Namespace1</span> <span class="token punctuation">{</span>
    <span class="token comment">// 命名空间 1 的定义...</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">MyProject<span class="token punctuation">\\</span>Namespace2</span> <span class="token punctuation">{</span>
    <span class="token comment">// 命名空间 2 的定义...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们在同一个文件中定义了两个命名空间 <code>MyProject\\Namespace1</code> 和 <code>MyProject\\Namespace2</code>，并在各自的命名空间中进行定义。</p><ol start="7"><li><strong>动态命名空间：</strong></li></ol><p>使用变量或表达式作为命名空间的一部分，从而实现动态命名空间。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;MyProject\\SubNamespace&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$className</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;\\SomeClass&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用变量 <code>$namespace</code> 和 <code>$className</code> 来构建动态命名空间，并实例化了 <code>$className</code> 变量所代表的类。</p><ol start="8"><li><strong>命名空间的文件结构和自动加载：</strong></li></ol><p>PHP 的命名空间通常与文件系统的目录结构相对应。例如，命名空间 <code>MyProject\\SubNamespace</code> 可以对应于文件夹 <code>MyProject/SubNamespace</code>，并且在该文件夹下的 PHP 文件中定义相关的类、函数和常量。<br> 为了方便自动加载命名空间下的类，可以使用 PSR-4（PHP Standards Recommendation）标准来定义命名空间和类文件的映射关系。通过遵循 PSR-4 标准，并使用自动加载机制，可以在使用类时自动加载对应的类文件，而无需手动包含（include）文件。<br> 这些是关于 PHP 命名空间的更多信息和用法。命名空间是 PHP 中组织和管理代码的重要机制，它可以提高代码的可维护性、可读性和可重用性，并避免常见的命名冲突问题。</p><ol start="9"><li><strong>自动加载命名空间下的类：</strong></li></ol><p>当使用命名空间组织类时，可以使用自动加载机制来自动加载相应的类文件。通过注册自定义的自动加载函数，可以根据类的命名空间和类名来确定类文件的路径，并自动加载所需的类文件。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;\\\\&#39;</span><span class="token punctuation">,</span> <span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">,</span> <span class="token variable">$className</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.php&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">require_once</span> <span class="token variable">$fileName</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>MyProject<span class="token punctuation">\\</span>SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 <code>spl_autoload_register</code> 函数注册了一个自动加载函数，它将根据类的命名空间和类名来确定类文件的路径，并使用 <code>require_once</code> 加载类文件。</p><h4 id="可迭代对象" tabindex="-1"><a class="header-anchor" href="#可迭代对象"><span>可迭代对象</span></a></h4><p>可迭代对象（Iterable）是指可以被迭代（遍历）的对象。它是一种抽象概念，表示一组元素或数据集合，可以按照一定的顺序逐个访问这些元素。<br> 在 PHP 中，可迭代对象是通过实现 <code>Iterator</code> 接口或 <code>IteratorAggregate</code> 接口来定义的。这些接口提供了遍历对象元素的方法和规范。</p><h4 id="_1-iterator-接口" tabindex="-1"><a class="header-anchor" href="#_1-iterator-接口"><span><strong>1. <strong><code>**Iterator**</code></strong> 接口：</strong></span></a></h4><p>任何实现 <code>Iterator</code> 接口的对象都可以用作需要可迭代对象的函数的参数。<br> 迭代器包含一个项目列表并提供遍历它们的方法。它保留一个指向列表中元素之一的指针。列表中的每个项目都应该有一个可用于查找项目的键。<br> 一个迭代器必须有这些方法：</p><ul><li><code>current()</code> - 返回指针当前指向的元素。它可以是任何数据类型</li><li><code>key()</code> 返回与列表中当前元素关联的键。只能是整数、浮点数、布尔值或字符串</li><li><code>next()</code> 将指针移动到列表中的下一个元素</li><li><code>rewind()</code> 将指针移动到列表中的第一个元素</li><li><code>valid()</code> 如果内部指针没有指向任何元素（例如，如果 next() 在列表末尾被调用），这应该返回假。在任何其他情况下都返回 true</li></ul><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$position</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">position</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">array</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">position</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">position</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">position</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">array</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">position</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$iterator</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;: &#39;</span> <span class="token operator">.</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个实现了 <code>Iterator</code> 接口的 <code>MyIterator</code> 类。该类包含了实现 <code>Iterator</code> 接口所需的方法。然后，我们创建了一个 <code>MyIterator</code> 对象，并使用 <code>foreach</code> 循环遍历该对象的元素。</p><h4 id="_2-iteratoraggregate-接口" tabindex="-1"><a class="header-anchor" href="#_2-iteratoraggregate-接口"><span><strong>2. <strong><code>**IteratorAggregate**</code></strong> 接口：</strong></span></a></h4><p><code>IteratorAggregate</code> 接口允许对象通过返回一个实现了 <code>Iterator</code> 接口的迭代器来进行遍历。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCollection</span> <span class="token keyword">implements</span> <span class="token class-name">IteratorAggregate</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$collection</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个实现了 <code>IteratorAggregate</code> 接口的 <code>MyCollection</code> 类。该类实现了 <code>getIterator()</code> 方法，返回一个 <code>ArrayIterator</code> 对象作为迭代器。然后，我们创建了一个 <code>MyCollection</code> 对象，并使用 <code>foreach</code> 循环遍历该对象的元素。</p><h4 id="_3-可迭代对象和-foreach-循环" tabindex="-1"><a class="header-anchor" href="#_3-可迭代对象和-foreach-循环"><span><strong>3. 可迭代对象和 <strong><code>**foreach**</code></strong> 循环：</strong></span></a></h4><p>在 PHP 中，<code>foreach</code> 循环是用于遍历可迭代对象的常用语法。当在 <code>foreach</code> 循环中使用一个可迭代对象时，循环会自动调用迭代器的方法来遍历对象的元素。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>foreach</code> 循环遍历了一个数组 <code>$items</code> 的元素。</p><h4 id="使用iterables" tabindex="-1"><a class="header-anchor" href="#使用iterables"><span>使用Iterables</span></a></h4><p>iterable 关键字可以用作函数参数的数据类型或函数的返回类型：</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">printIterable</span><span class="token punctuation">(</span><span class="token keyword type-hint">iterable</span> <span class="token variable">$myIterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$myIterable</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printIterable</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">getIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">iterable</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$myIterable</span> <span class="token operator">=</span> <span class="token function">getIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$myIterable</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h2><h3 id="连接mysql" tabindex="-1"><a class="header-anchor" href="#连接mysql"><span>连接MySQL</span></a></h3><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;password&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Connected successfully&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="curd" tabindex="-1"><a class="header-anchor" href="#curd"><span>CURD</span></a></h3><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h4><h5 id="基本查询" tabindex="-1"><a class="header-anchor" href="#基本查询"><span>基本查询</span></a></h5><p><code>$conn-&gt;query($sql)</code></p><h5 id="获取上次插入记录的id" tabindex="-1"><a class="header-anchor" href="#获取上次插入记录的id"><span>获取上次插入记录的ID</span></a></h5><p><code>$last_id = $conn-&gt;insert_id;</code></p><h5 id="插入多条数据" tabindex="-1"><a class="header-anchor" href="#插入多条数据"><span>插入多条数据</span></a></h5><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Mary&#39;, &#39;Moe&#39;, &#39;mary@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Julie&#39;, &#39;Dooley&#39;, &#39;julie@example.com&#39;)&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">multi_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="预处理" tabindex="-1"><a class="header-anchor" href="#预处理"><span>预处理</span></a></h5><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// prepare and bind</span>
<span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// i - integer（整型）</span>
<span class="token comment">// d - double（双精度浮点型）</span>
<span class="token comment">// s - string（字符串）</span>
<span class="token comment">// b - BLOB（binary large object:二进制大对象）</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;sss&quot;</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set parameters and execute</span>
<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Doe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;john@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mary&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Moe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;mary@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Julie&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Dooley&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;julie@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="获取查询结果" tabindex="-1"><a class="header-anchor" href="#获取查询结果"><span>获取查询结果</span></a></h5><p><code>$result = $conn-&gt;query($sql);</code></p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// output data of each row</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;id: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; - Name: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;firstname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;lastname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;0 results&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>num_rows</code>判断返回的数据。<br> 如果返回的是多条数据，<code>fetch_assoc()</code> 将结果集放入到关联数组并循环输出。</p><hr><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;username&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;password&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Connected successfully&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Create database</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;CREATE DATABASE myDB&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Database created successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error creating database: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;数据库连接成功！&quot;</span><span class="token punctuation">;</span>


<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;CREATE TABLE MyGuests (
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
firstname VARCHAR(30) NOT NULL,
lastname VARCHAR(30) NOT NULL,
email VARCHAR(50),
reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Table MyGuests created successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error creating table: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;数据库连接成功！\\n&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 插入单条记录</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;)&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$last_id</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">insert_id</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;New record created successfully&quot;</span> <span class="token operator">.</span> <span class="token variable">$last_id</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error: &quot;</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 插入多条记录</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Mary&#39;, &#39;Moe&#39;, &#39;mary@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Julie&#39;, &#39;Dooley&#39;, &#39;julie@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">multi_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;New records created successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error: &quot;</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;数据库连接成功！\\n&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 插入单条记录</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;)&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$last_id</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">insert_id</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;New record created successfully&quot;</span> <span class="token operator">.</span> <span class="token variable">$last_id</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error: &quot;</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 插入多条记录</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Mary&#39;, &#39;Moe&#39;, &#39;mary@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email)
VALUES (&#39;Julie&#39;, &#39;Dooley&#39;, &#39;julie@example.com&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">multi_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;New records created successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error: &quot;</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// prepare and bind</span>
<span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// i - integer（整型）</span>
<span class="token comment">// d - double（双精度浮点型）</span>
<span class="token comment">// s - string（字符串）</span>
<span class="token comment">// b - BLOB（binary large object:二进制大对象）</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;sss&quot;</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set parameters and execute</span>
<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Doe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;john@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mary&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Moe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;mary@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Julie&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Dooley&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;julie@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;New records created successfully&quot;</span><span class="token punctuation">;</span>

<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;UPDATE MyGuests SET firstname=&#39;DIO&#39;, lastname=&#39;BRAND&#39; WHERE id=2&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Record updated successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error updating record: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// sql to delete a record</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;DELETE FROM MyGuests WHERE id=3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Record deleted successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error deleting record: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;UPDATE MyGuests SET firstname=&#39;DIO&#39;, lastname=&#39;BRAND&#39; WHERE id=2&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Record updated successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Error updating record: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname desc&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// output data of each row</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;id: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; - Name: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;firstname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;lastname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;0 results&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myDB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create connection</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Check connection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// $sql = &quot;SELECT id, firstname, lastname FROM MyGuests limit 3 offset 1&quot;;  // 偏移量1，限制三个，即从第二个开始的3个元素</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM MyGuests LIMIT 3, 2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 使用逗号时，数字是颠倒的，即倒数第三个开始后的2个</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// output data of each row</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;id: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; - Name: &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;firstname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot; &quot;</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;lastname&quot;</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;0 results&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xml" tabindex="-1"><a class="header-anchor" href="#xml"><span>XML</span></a></h2><h3 id="解析器类型" tabindex="-1"><a class="header-anchor" href="#解析器类型"><span>解析器类型</span></a></h3><p>在 XML 解析中，有两种主要的解析器类型：基于树的解析器（Tree-based Parser）和基于事件的解析器（Event-based Parser）。它们在处理 XML 数据时采用了不同的方法和策略。</p><ol><li>基于树的解析器（Tree-based Parser）：<br> 基于树的解析器（例如 DOM 解析器）将整个 XML 文档加载到内存中，并构建一个树状结构（DOM 树）来表示整个文档。这样可以方便地遍历、查询和修改文档的任意部分，因为整个文档在内存中可用。</li></ol><p>基于树的解析器的优点是：</p><ul><li>允许随机访问和修改 XML 文档中的任何部分。</li><li>提供了丰富的方法和属性，用于操作和处理 XML 节点。</li><li>适用于处理较小的 XML 文档或需要对整个文档进行操作的场景。</li></ul><p>然而，基于树的解析器也有一些缺点：</p><ul><li>占用较多的内存，对于大型 XML 文档可能会导致性能问题。</li><li>在处理大型文档时，加载整个文档到内存中可能会导致延迟较高。</li></ul><ol start="2"><li>基于事件的解析器（Event-based Parser）：<br> 基于事件的解析器（例如 SAX 解析器）从头到尾逐行读取 XML 文档，并在解析过程中触发各种事件（例如开始元素、结束元素、文本节点等）。应用程序可以注册事件处理程序来响应这些事件，以实现对文档的处理和处理。</li></ol><p>基于事件的解析器的优点是：</p><ul><li>不需要将整个 XML 文档加载到内存中，因此适用于处理大型 XML 文档。</li><li>解析过程是逐行进行的，不会占用大量内存。</li><li>适用于一次性处理文档的场景，不需要随机访问和修改文档的任意部分。</li></ul><p>然而，基于事件的解析器也有一些缺点：</p><ul><li>编码复杂度较高，需要编写事件处理程序来处理不同的解析事件。</li><li>无法直接随机访问和修改文档中的任意部分，因为解析是顺序进行的。</li></ul><p>选择使用基于树的解析器还是基于事件的解析器取决于具体的需求和场景。如果需要对整个文档进行操作或需要随机访问和修改文档的任意部分，则基于树的解析器更适合。如果处理大型 XML 文档或只需顺序处理文档的一部分，则基于事件的解析器更合适。</p><h3 id="simplexml" tabindex="-1"><a class="header-anchor" href="#simplexml"><span>SimpleXML</span></a></h3><p>PHP 的 SimpleXML 扩展提供了一种简单而直观的方式来解析和处理 XML 数据。它将 XML 数据转换为一个对象，通过对象的属性和方法来访问和操作 XML 数据。</p><h4 id="解析-xml-字符串数据" tabindex="-1"><a class="header-anchor" href="#解析-xml-字符串数据"><span>解析 XML 字符串数据：</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>$xmlString = &#39;<span class="token php language-php"><span class="token delimiter important">&lt;?</span>xml version<span class="token operator">=</span><span class="token string double-quoted-string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string double-quoted-string">&quot;UTF-8&quot;</span><span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Jane Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">&gt;</span></span>B+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">&gt;</span></span>&#39;;

$xml = simplexml_load_string($xmlString);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>// XML文档有错误时，libxml_use_internal_errors()函数
// 可以设置是否使用内置的错误处理函数。
libxml_use_internal_errors(true);
$myXMLData =
&quot;<span class="token php language-php"><span class="token delimiter important">&lt;?</span>xml version<span class="token operator">=</span><span class="token string single-quoted-string">&#39;1.0&#39;</span> encoding<span class="token operator">=</span><span class="token string single-quoted-string">&#39;UTF-8&#39;</span><span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>document</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wronguser</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">&gt;</span></span>john@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wrongemail</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>document</span><span class="token punctuation">&gt;</span></span>&quot;;

$xml = simplexml_load_string($myXMLData);
if ($xml === false) {
  echo &quot;Failed loading XML: &quot;;
  foreach(libxml_get_errors() as $error) {
    echo &quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;, $error-&gt;message;
  }
} else {
  print_r($xml);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问-xml文件-数据" tabindex="-1"><a class="header-anchor" href="#访问-xml文件-数据"><span>访问 XML文件 数据：</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>001<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">smallName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>John<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John · Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Jane Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">&gt;</span></span>B+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Bob Johnson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">&gt;</span></span>A-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 读取XML文件</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;./XML/Data.xml&quot;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Error: Cannot create object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取特定元素的值</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">gender</span><span class="token punctuation">;</span>
<span class="token comment">// 获取属性值</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;code&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">code</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n;
echo <span class="token interpolation"><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span></span>[0]-&gt;name[&#39;smallName&#39;] . &quot;</span>\\n<span class="token string double-quoted-string">&quot;;
// 循环遍历
for (<span class="token interpolation"><span class="token variable">$i</span></span> = 0; <span class="token interpolation"><span class="token variable">$i</span></span> &lt; count(<span class="token interpolation"><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span></span>); <span class="token interpolation"><span class="token variable">$i</span></span>++) {
    echo <span class="token interpolation"><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span></span>[<span class="token interpolation"><span class="token variable">$i</span></span>]-&gt;name;
    echo <span class="token interpolation"><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span></span>[<span class="token interpolation"><span class="token variable">$i</span></span>]-&gt;age;
    echo <span class="token interpolation"><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span></span>[<span class="token interpolation"><span class="token variable">$i</span></span>]-&gt;gender;
}
echo &quot;</span>\\n&quot;<span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span> <span class="token keyword">as</span> <span class="token variable">$student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">gender</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 转换为关联数组</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;./XML/Data.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$array</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print_r($array);</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$student</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// 使用 XPath 查询选择所有学生节点的名称</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;./XML/Data.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$names</span> <span class="token operator">=</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;//student/name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$names</span> <span class="token keyword">as</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>// 处理命名空间
$xmlString = &#39;<span class="token php language-php"><span class="token delimiter important">&lt;?</span>xml version<span class="token operator">=</span><span class="token string double-quoted-string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string double-quoted-string">&quot;UTF-8&quot;</span><span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns:</span>students</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns:</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns:</span>name</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns:</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns:</span>age</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns:</span>age</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns:</span>student</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns:</span>students</span><span class="token punctuation">&gt;</span></span>&#39;;

$xml = simplexml_load_string($xmlString);
$namespaces = $xml-&gt;getNamespaces(true);

// 访问具有命名空间的节点
$student = $xml-&gt;children($namespaces[&#39;ns&#39;])-&gt;student;
$name = $student-&gt;name;
$age = $student-&gt;age;

echo $name . $age;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改-xml-数据" tabindex="-1"><a class="header-anchor" href="#修改-xml-数据"><span>修改 XML 数据：</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;./XML/Data.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 修改第一个学生的成绩</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John · Doe&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">gender</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;female&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">grade</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;B&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;code&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;01&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;smallName&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 添加新的学生节点</span>
<span class="token variable">$newStudent</span> <span class="token operator">=</span> <span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token property">student</span><span class="token operator">-&gt;</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Bob Johnson&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;grade&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;A-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存修改后的 XML 数据到文件</span>
<span class="token variable">$xml</span><span class="token operator">-&gt;</span><span class="token function">asXML</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;path/to/newfile.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml-expat" tabindex="-1"><a class="header-anchor" href="#xml-expat"><span>XML Expat</span></a></h3><p>XML Expat 扩展提供了一种事件驱动的解析方式，逐行读取 XML 数据并触发相应的事件，以便应用程序可以对这些事件进行处理。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">// 创建解析器对象</span>
<span class="token variable">$parser</span> <span class="token operator">=</span> <span class="token function">xml_parser_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义事件处理函数</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$parser</span> 解析器对象
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$name</span> 元素名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$attrs</span> 元素属性
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function-definition function">startElement</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$attrs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;开始元素：<span class="token interpolation"><span class="token variable">$name</span></span>\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;属性：&quot;</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$attrs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$parser</span> 解析器对象
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$name</span> 元素名称
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function-definition function">endElement</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;结束元素：<span class="token interpolation"><span class="token variable">$name</span></span>\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$parser</span> 解析器对象
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">[</span>type<span class="token punctuation">]</span></span> <span class="token parameter">$data</span> 字符数据
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function-definition function">characterData</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;字符数据：<span class="token interpolation"><span class="token variable">$data</span></span>\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册事件处理函数</span>
<span class="token function">xml_set_element_handler</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;startElement&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;endElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xml_set_character_data_handler</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;characterData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析XMl文件</span>
<span class="token comment">/* $xmlString = &#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;students&gt;
  &lt;student&gt;
    &lt;name&gt;John Doe&lt;/name&gt;
    &lt;age&gt;20&lt;/age&gt;
  &lt;/student&gt;
  &lt;student&gt;
    &lt;name&gt;Jane Smith&lt;/name&gt;
    &lt;age&gt;19&lt;/age&gt;
  &lt;/student&gt;
&lt;/students&gt;&#39;; */</span>
<span class="token variable">$xmlString</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;./XML/Data.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 XML 数据</span>
<span class="token function">xml_parse</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span> <span class="token variable">$xmlString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 释放解析器</span>
<span class="token function">xml_parser_free</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Initialize the XML parser</span>
<span class="token variable">$parser</span><span class="token operator">=</span><span class="token function">xml_parser_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Function to use at the start of an element</span>
<span class="token keyword">function</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token variable">$element_name</span><span class="token punctuation">,</span><span class="token variable">$element_attrs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$element_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;NOTE&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;-- Note --&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;TO&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;To: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;FROM&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;From: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;HEADING&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Heading: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;BODY&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Message: &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Function to use at the end of an element</span>
<span class="token keyword">function</span> <span class="token function-definition function">stop</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token variable">$element_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Function to use when finding character data</span>
<span class="token keyword">function</span> <span class="token function-definition function">char</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Specify element handler</span>
<span class="token function">xml_set_element_handler</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;start&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Specify data handler</span>
<span class="token function">xml_set_character_data_handler</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;char&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Open XML file</span>
<span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;./XML/Note.xml&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read data</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">xml_parse</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span>
  <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;XML Error: %s at line %d&quot;</span><span class="token punctuation">,</span>
  <span class="token function">xml_error_string</span><span class="token punctuation">(</span><span class="token function">xml_get_error_code</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">xml_get_current_line_number</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Free the XML parser</span>
<span class="token function">xml_parser_free</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml-dom" tabindex="-1"><a class="header-anchor" href="#xml-dom"><span>XML DOM</span></a></h3><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlString</span> <span class="token operator">=</span>
  <span class="token string single-quoted-string">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;students&gt;
  &lt;student&gt;
    &lt;name&gt;John Doe&lt;/name&gt;
    &lt;age&gt;20&lt;/age&gt;
  &lt;/student&gt;
  &lt;student&gt;
    &lt;name&gt;Jane Smith&lt;/name&gt;
    &lt;age&gt;19&lt;/age&gt;
  &lt;/student&gt;
&lt;/students&gt;&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 XML 数据</span>
<span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// $dom-&gt;load(&quot;./XML/Note.xml&quot;);</span>

<span class="token keyword">print</span> <span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">saveXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 循环遍历XML</span>
<span class="token variable">$students</span> <span class="token operator">=</span> <span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$students</span> <span class="token keyword">as</span> <span class="token variable">$student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">nodeValue</span><span class="token punctuation">;</span>
  <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">nodeValue</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Name: <span class="token interpolation"><span class="token variable">$name</span></span>, Age: <span class="token interpolation"><span class="token variable">$age</span></span>\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 创建新的学生结点</span>
<span class="token variable">$newStudent</span> <span class="token operator">=</span> <span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$nameElement</span> <span class="token operator">=</span> <span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;qzy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ageElement</span> <span class="token operator">=</span> <span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将元素添加到文档中</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token variable">$nameElement</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newStudent</span><span class="token operator">-&gt;</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token variable">$ageElement</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token property">documentElement</span><span class="token operator">-&gt;</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token variable">$newStudent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将修改后的XML数据保存到文件</span>
<span class="token variable">$dom</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;./XML/DomData.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml-reader-writer" tabindex="-1"><a class="header-anchor" href="#xml-reader-writer"><span>XML Reader/Writer</span></a></h3><h4 id="xml-reader" tabindex="-1"><a class="header-anchor" href="#xml-reader"><span>XML Reader</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 创建 XML Reader 对象</span>
<span class="token variable">$reader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打开 XML 文件或数据</span>
<span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;./XML/Note.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 XML 数据</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理事件</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token property">nodeType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name static-context">XMLReader</span><span class="token operator">::</span><span class="token constant">ELEMENT</span><span class="token punctuation">:</span>
            <span class="token comment">// 处理开始元素事件</span>
            <span class="token comment">// $reader-&gt;name: 元素名称</span>
            <span class="token keyword">echo</span> <span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name static-context">XMLReader</span><span class="token operator">::</span><span class="token constant">TEXT</span><span class="token punctuation">:</span>
            <span class="token comment">// 处理文本数据事件</span>
            <span class="token comment">// $reader-&gt;value: 文本内容</span>
            <span class="token keyword">echo</span> <span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token property">value</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name static-context">XMLReader</span><span class="token operator">::</span><span class="token constant">END_ELEMENT</span><span class="token punctuation">:</span>
            <span class="token comment">// 处理结束元素事件</span>
            <span class="token comment">// $reader-&gt;name: 元素名称</span>
            <span class="token keyword">echo</span> <span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 关闭 XML Reader 对象</span>
<span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xml-writer" tabindex="-1"><a class="header-anchor" href="#xml-writer"><span>XML Writer</span></a></h4><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 创建 XML Writer 对象</span>
<span class="token variable">$writer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打开输出流或文件</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">openURI</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;./XML/XMLWriterData.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置 XML Writer 选项</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">setIndent</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">setIndentString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;  &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始文档</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">startDocument</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始元素</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">startElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写入元素和文本内容</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">startElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">writeElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;John Doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">writeElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">endElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束元素</span>

<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">startElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;student&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">writeElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Jane Smith&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">writeElement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;19&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">endElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束元素</span>

<span class="token comment">// 结束元素</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">endElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束元素</span>

<span class="token comment">// 结束文档</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">endDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 关闭 XML Writer 对象</span>
<span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,907),o=[p];function l(c,i){return a(),s("div",null,o)}const d=n(t,[["render",l],["__file","basic.html.vue"]]),k=JSON.parse('{"path":"/basic/php/basic.html","title":"基础","lang":"zh-CN","frontmatter":{"title":"基础","shortTitle":"基础","description":null,"date":"2024-06-17T19:15:41.000Z","categories":["PHP"],"tags":[]},"headers":[{"level":2,"title":"安装配置","slug":"安装配置","link":"#安装配置","children":[{"level":3,"title":"Windows","slug":"windows","link":"#windows","children":[]},{"level":3,"title":"Linux","slug":"linux","link":"#linux","children":[]}]},{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"常量","slug":"常量","link":"#常量","children":[]},{"level":3,"title":"echo、print","slug":"echo、print","link":"#echo、print","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"字符串函数","slug":"字符串函数","link":"#字符串函数","children":[]},{"level":3,"title":"数值","slug":"数值","link":"#数值","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"流程控制","slug":"流程控制","link":"#流程控制","children":[]},{"level":3,"title":"函数","slug":"函数-1","link":"#函数-1","children":[]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"超级全局变量","slug":"超级全局变量","link":"#超级全局变量","children":[]},{"level":3,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]}]},{"level":2,"title":"表单处理","slug":"表单处理","link":"#表单处理","children":[{"level":3,"title":"数据格式","slug":"数据格式","link":"#数据格式","children":[]},{"level":3,"title":"数据清洗","slug":"数据清洗","link":"#数据清洗","children":[]}]},{"level":2,"title":"高级","slug":"高级","link":"#高级","children":[{"level":3,"title":"日期时间","slug":"日期时间","link":"#日期时间","children":[]},{"level":3,"title":"文件引入","slug":"文件引入","link":"#文件引入","children":[]},{"level":3,"title":"文件处理","slug":"文件处理","link":"#文件处理","children":[]},{"level":3,"title":"Cookie","slug":"cookie-1","link":"#cookie-1","children":[]},{"level":3,"title":"Session","slug":"session-1","link":"#session-1","children":[]},{"level":3,"title":"Filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"生成器函数","slug":"生成器函数","link":"#生成器函数","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":3,"title":"异常处理","slug":"异常处理-1","link":"#异常处理-1","children":[]},{"level":3,"title":"die","slug":"die","link":"#die","children":[]}]},{"level":2,"title":"OOP","slug":"oop","link":"#oop","children":[{"level":3,"title":"语言常规","slug":"语言常规","link":"#语言常规","children":[]},{"level":3,"title":"PHP特有","slug":"php特有","link":"#php特有","children":[]}]},{"level":2,"title":"MySQL","slug":"mysql","link":"#mysql","children":[{"level":3,"title":"连接MySQL","slug":"连接mysql","link":"#连接mysql","children":[]},{"level":3,"title":"CURD","slug":"curd","link":"#curd","children":[]}]},{"level":2,"title":"XML","slug":"xml","link":"#xml","children":[{"level":3,"title":"解析器类型","slug":"解析器类型","link":"#解析器类型","children":[]},{"level":3,"title":"SimpleXML","slug":"simplexml","link":"#simplexml","children":[]},{"level":3,"title":"XML Expat","slug":"xml-expat","link":"#xml-expat","children":[]},{"level":3,"title":"XML DOM","slug":"xml-dom","link":"#xml-dom","children":[]},{"level":3,"title":"XML Reader/Writer","slug":"xml-reader-writer","link":"#xml-reader-writer","children":[]}]}],"git":{"createdTime":1718623040000,"updatedTime":1718623040000,"contributors":[{"name":"Zhiyun Qin","email":"96156298+Okita1027@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":93.18,"words":27955},"filePathRelative":"basic/php/basic.md","localizedDate":"2024年6月18日"}');export{d as comp,k as data};
